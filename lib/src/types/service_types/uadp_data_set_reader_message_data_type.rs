// OPCUA for Rust
// SPDX-License-Identifier: MPL-2.0
// Copyright (C) 2017-2024 Adam Lock, Einar Omang
//
// This file was autogenerated from tools/schema/schemas/1.0.4/Opc.Ua.Types.bsd by opcua-codegen
//
// DO NOT EDIT THIS FILE
#[derive(Debug, Clone, PartialEq)]
#[derive(Default)]
pub struct UadpDataSetReaderMessageDataType {
    pub group_version: u32,
    pub network_message_number: u16,
    pub data_set_offset: u16,
    pub data_set_class_id: crate::types::guid::Guid,
    pub network_message_content_mask: super::enums::UadpNetworkMessageContentMask,
    pub data_set_message_content_mask: super::enums::UadpDataSetMessageContentMask,
    pub publishing_interval: f64,
    pub receive_offset: f64,
    pub processing_offset: f64,
}
impl crate::types::BinaryEncoder<UadpDataSetReaderMessageDataType>
for UadpDataSetReaderMessageDataType {
    fn byte_len(&self) -> usize {
        let mut size = 0usize;
        size += self.group_version.byte_len();
        size += self.network_message_number.byte_len();
        size += self.data_set_offset.byte_len();
        size += self.data_set_class_id.byte_len();
        size += self.network_message_content_mask.byte_len();
        size += self.data_set_message_content_mask.byte_len();
        size += self.publishing_interval.byte_len();
        size += self.receive_offset.byte_len();
        size += self.processing_offset.byte_len();
        size
    }
    #[allow(unused_variables)]
    fn encode<S: std::io::Write>(
        &self,
        stream: &mut S,
    ) -> crate::types::EncodingResult<usize> {
        let mut size = 0usize;
        size += self.group_version.encode(stream)?;
        size += self.network_message_number.encode(stream)?;
        size += self.data_set_offset.encode(stream)?;
        size += self.data_set_class_id.encode(stream)?;
        size += self.network_message_content_mask.encode(stream)?;
        size += self.data_set_message_content_mask.encode(stream)?;
        size += self.publishing_interval.encode(stream)?;
        size += self.receive_offset.encode(stream)?;
        size += self.processing_offset.encode(stream)?;
        Ok(size)
    }
    #[allow(unused_variables)]
    fn decode<S: std::io::Read>(
        stream: &mut S,
        decoding_options: &crate::types::DecodingOptions,
    ) -> crate::types::EncodingResult<Self> {
        let group_version = <u32 as crate::types::BinaryEncoder<
            u32,
        >>::decode(stream, decoding_options)?;
        let network_message_number = <u16 as crate::types::BinaryEncoder<
            u16,
        >>::decode(stream, decoding_options)?;
        let data_set_offset = <u16 as crate::types::BinaryEncoder<
            u16,
        >>::decode(stream, decoding_options)?;
        let data_set_class_id = <crate::types::guid::Guid as crate::types::BinaryEncoder<
            crate::types::guid::Guid,
        >>::decode(stream, decoding_options)?;
        let network_message_content_mask = <super::enums::UadpNetworkMessageContentMask as crate::types::BinaryEncoder<
            super::enums::UadpNetworkMessageContentMask,
        >>::decode(stream, decoding_options)?;
        let data_set_message_content_mask = <super::enums::UadpDataSetMessageContentMask as crate::types::BinaryEncoder<
            super::enums::UadpDataSetMessageContentMask,
        >>::decode(stream, decoding_options)?;
        let publishing_interval = <f64 as crate::types::BinaryEncoder<
            f64,
        >>::decode(stream, decoding_options)?;
        let receive_offset = <f64 as crate::types::BinaryEncoder<
            f64,
        >>::decode(stream, decoding_options)?;
        let processing_offset = <f64 as crate::types::BinaryEncoder<
            f64,
        >>::decode(stream, decoding_options)?;
        Ok(Self {
            group_version,
            network_message_number,
            data_set_offset,
            data_set_class_id,
            network_message_content_mask,
            data_set_message_content_mask,
            publishing_interval,
            receive_offset,
            processing_offset,
        })
    }
}
