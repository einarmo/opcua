// OPCUA for Rust
// SPDX-License-Identifier: MPL-2.0
// Copyright (C) 2017-2024 Adam Lock, Einar Omang
//
// This file was autogenerated from tools/schema/schemas/1.0.4/Opc.Ua.Types.bsd by opcua-codegen
//
// DO NOT EDIT THIS FILE
#[derive(Debug, Clone, PartialEq)]
#[derive(Default)]
pub struct DataTypeSchemaHeader {
    pub namespaces: Option<Vec<crate::types::string::UAString>>,
    pub structure_data_types: Option<
        Vec<super::structure_description::StructureDescription>,
    >,
    pub enum_data_types: Option<Vec<super::enum_description::EnumDescription>>,
    pub simple_data_types: Option<
        Vec<super::simple_type_description::SimpleTypeDescription>,
    >,
}
impl crate::types::MessageInfo for DataTypeSchemaHeader {
    fn object_id(&self) -> crate::types::ObjectId {
        crate::types::ObjectId::DataTypeSchemaHeader_Encoding_DefaultBinary
    }
}
impl crate::types::BinaryEncoder for DataTypeSchemaHeader {
    fn byte_len(&self) -> usize {
        let mut size = 0usize;
        size += self.namespaces.byte_len();
        size += self.structure_data_types.byte_len();
        size += self.enum_data_types.byte_len();
        size += self.simple_data_types.byte_len();
        size
    }
    #[allow(unused_variables)]
    fn encode<S: std::io::Write>(
        &self,
        stream: &mut S,
    ) -> crate::types::EncodingResult<usize> {
        let mut size = 0usize;
        size += self.namespaces.encode(stream)?;
        size += self.structure_data_types.encode(stream)?;
        size += self.enum_data_types.encode(stream)?;
        size += self.simple_data_types.encode(stream)?;
        Ok(size)
    }
    #[allow(unused_variables)]
    fn decode<S: std::io::Read>(
        stream: &mut S,
        decoding_options: &crate::types::DecodingOptions,
    ) -> crate::types::EncodingResult<Self> {
        let namespaces = <Option<
            Vec<crate::types::string::UAString>,
        > as crate::types::BinaryEncoder>::decode(stream, decoding_options)?;
        let structure_data_types = <Option<
            Vec<super::structure_description::StructureDescription>,
        > as crate::types::BinaryEncoder>::decode(stream, decoding_options)?;
        let enum_data_types = <Option<
            Vec<super::enum_description::EnumDescription>,
        > as crate::types::BinaryEncoder>::decode(stream, decoding_options)?;
        let simple_data_types = <Option<
            Vec<super::simple_type_description::SimpleTypeDescription>,
        > as crate::types::BinaryEncoder>::decode(stream, decoding_options)?;
        Ok(Self {
            namespaces,
            structure_data_types,
            enum_data_types,
            simple_data_types,
        })
    }
}
