// OPCUA for Rust
// SPDX-License-Identifier: MPL-2.0
// Copyright (C) 2017-2024 Adam Lock, Einar Omang
//
// This file was autogenerated from tools/schema/schemas/1.0.4/Opc.Ua.Types.bsd by opcua-codegen
//
// DO NOT EDIT THIS FILE
#[derive(Debug, Clone, PartialEq, Default)]
pub struct X509IdentityToken {
    pub policy_id: crate::types::string::UAString,
    pub certificate_data: crate::types::byte_string::ByteString,
}
impl crate::types::BinaryEncoder<X509IdentityToken> for X509IdentityToken {
    fn byte_len(&self) -> usize {
        let mut size = 0usize;
        size += self.policy_id.byte_len();
        size += self.certificate_data.byte_len();
        size
    }
    #[allow(unused_variables)]
    fn encode<S: std::io::Write>(&self, stream: &mut S) -> crate::types::EncodingResult<usize> {
        let mut size = 0usize;
        size += self.policy_id.encode(stream)?;
        size += self.certificate_data.encode(stream)?;
        Ok(size)
    }
    #[allow(unused_variables)]
    fn decode<S: std::io::Read>(
        stream: &mut S,
        decoding_options: &crate::types::DecodingOptions,
    ) -> crate::types::EncodingResult<Self> {
        let policy_id = <crate::types::string::UAString as crate::types::BinaryEncoder<
            crate::types::string::UAString,
        >>::decode(stream, decoding_options)?;
        let certificate_data =
            <crate::types::byte_string::ByteString as crate::types::BinaryEncoder<
                crate::types::byte_string::ByteString,
            >>::decode(stream, decoding_options)?;
        Ok(Self {
            policy_id,
            certificate_data,
        })
    }
}
