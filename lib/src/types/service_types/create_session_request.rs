// OPCUA for Rust
// SPDX-License-Identifier: MPL-2.0
// Copyright (C) 2017-2024 Adam Lock, Einar Omang
//
// This file was autogenerated from tools/schema/schemas/1.0.4/Opc.Ua.Types.bsd by opcua-codegen
//
// DO NOT EDIT THIS FILE
#[derive(Debug, Clone, PartialEq)]
pub struct CreateSessionRequest {
    pub request_header: crate::types::request_header::RequestHeader,
    pub client_description: super::application_description::ApplicationDescription,
    pub server_uri: crate::types::string::UAString,
    pub endpoint_url: crate::types::string::UAString,
    pub session_name: crate::types::string::UAString,
    pub client_nonce: crate::types::byte_string::ByteString,
    pub client_certificate: crate::types::byte_string::ByteString,
    pub requested_session_timeout: f64,
    pub max_response_message_size: u32,
}
impl crate::types::MessageInfo for CreateSessionRequest {
    fn object_id(&self) -> crate::types::ObjectId {
        crate::types::ObjectId::CreateSessionRequest_Encoding_DefaultBinary
    }
}
impl crate::types::BinaryEncoder<CreateSessionRequest> for CreateSessionRequest {
    fn byte_len(&self) -> usize {
        let mut size = 0usize;
        size += self.request_header.byte_len();
        size += self.client_description.byte_len();
        size += self.server_uri.byte_len();
        size += self.endpoint_url.byte_len();
        size += self.session_name.byte_len();
        size += self.client_nonce.byte_len();
        size += self.client_certificate.byte_len();
        size += self.requested_session_timeout.byte_len();
        size += self.max_response_message_size.byte_len();
        size
    }
    #[allow(unused_variables)]
    fn encode<S: std::io::Write>(&self, stream: &mut S) -> crate::types::EncodingResult<usize> {
        let mut size = 0usize;
        size += self.request_header.encode(stream)?;
        size += self.client_description.encode(stream)?;
        size += self.server_uri.encode(stream)?;
        size += self.endpoint_url.encode(stream)?;
        size += self.session_name.encode(stream)?;
        size += self.client_nonce.encode(stream)?;
        size += self.client_certificate.encode(stream)?;
        size += self.requested_session_timeout.encode(stream)?;
        size += self.max_response_message_size.encode(stream)?;
        Ok(size)
    }
    #[allow(unused_variables)]
    fn decode<S: std::io::Read>(
        stream: &mut S,
        decoding_options: &crate::types::DecodingOptions,
    ) -> crate::types::EncodingResult<Self> {
        let request_header =
            <crate::types::request_header::RequestHeader as crate::types::BinaryEncoder<
                crate::types::request_header::RequestHeader,
            >>::decode(stream, decoding_options)?;
        let client_description = <super::application_description::ApplicationDescription as crate::types::BinaryEncoder<
            super::application_description::ApplicationDescription,
        >>::decode(stream, decoding_options)?;
        let server_uri = <crate::types::string::UAString as crate::types::BinaryEncoder<
            crate::types::string::UAString,
        >>::decode(stream, decoding_options)?;
        let endpoint_url = <crate::types::string::UAString as crate::types::BinaryEncoder<
            crate::types::string::UAString,
        >>::decode(stream, decoding_options)?;
        let session_name = <crate::types::string::UAString as crate::types::BinaryEncoder<
            crate::types::string::UAString,
        >>::decode(stream, decoding_options)?;
        let client_nonce =
            <crate::types::byte_string::ByteString as crate::types::BinaryEncoder<
                crate::types::byte_string::ByteString,
            >>::decode(stream, decoding_options)?;
        let client_certificate =
            <crate::types::byte_string::ByteString as crate::types::BinaryEncoder<
                crate::types::byte_string::ByteString,
            >>::decode(stream, decoding_options)?;
        let requested_session_timeout =
            <f64 as crate::types::BinaryEncoder<f64>>::decode(stream, decoding_options)?;
        let max_response_message_size =
            <u32 as crate::types::BinaryEncoder<u32>>::decode(stream, decoding_options)?;
        Ok(Self {
            request_header,
            client_description,
            server_uri,
            endpoint_url,
            session_name,
            client_nonce,
            client_certificate,
            requested_session_timeout,
            max_response_message_size,
        })
    }
}
