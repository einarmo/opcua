// OPCUA for Rust
// SPDX-License-Identifier: MPL-2.0
// Copyright (C) 2017-2024 Adam Lock, Einar Omang
//
// This file was autogenerated from tools/schema/schemas/1.0.4/Opc.Ua.Types.bsd by opcua-codegen
//
// DO NOT EDIT THIS FILE
#[derive(Debug, Clone, PartialEq, Default)]
pub struct DataSetWriterDataType {
    pub name: crate::types::string::UAString,
    pub enabled: bool,
    pub data_set_writer_id: u16,
    pub data_set_field_content_mask: super::enums::DataSetFieldContentMask,
    pub key_frame_count: u32,
    pub data_set_name: crate::types::string::UAString,
    pub data_set_writer_properties: Option<Vec<super::key_value_pair::KeyValuePair>>,
    pub transport_settings: crate::types::extension_object::ExtensionObject,
    pub message_settings: crate::types::extension_object::ExtensionObject,
}
impl crate::types::MessageInfo for DataSetWriterDataType {
    fn object_id(&self) -> crate::types::ObjectId {
        crate::types::ObjectId::DataSetWriterDataType_Encoding_DefaultBinary
    }
}
impl crate::types::BinaryEncoder<DataSetWriterDataType> for DataSetWriterDataType {
    fn byte_len(&self) -> usize {
        let mut size = 0usize;
        size += self.name.byte_len();
        size += self.enabled.byte_len();
        size += self.data_set_writer_id.byte_len();
        size += self.data_set_field_content_mask.byte_len();
        size += self.key_frame_count.byte_len();
        size += self.data_set_name.byte_len();
        size += self.data_set_writer_properties.byte_len();
        size += self.transport_settings.byte_len();
        size += self.message_settings.byte_len();
        size
    }
    #[allow(unused_variables)]
    fn encode<S: std::io::Write>(&self, stream: &mut S) -> crate::types::EncodingResult<usize> {
        let mut size = 0usize;
        size += self.name.encode(stream)?;
        size += self.enabled.encode(stream)?;
        size += self.data_set_writer_id.encode(stream)?;
        size += self.data_set_field_content_mask.encode(stream)?;
        size += self.key_frame_count.encode(stream)?;
        size += self.data_set_name.encode(stream)?;
        size += self.data_set_writer_properties.encode(stream)?;
        size += self.transport_settings.encode(stream)?;
        size += self.message_settings.encode(stream)?;
        Ok(size)
    }
    #[allow(unused_variables)]
    fn decode<S: std::io::Read>(
        stream: &mut S,
        decoding_options: &crate::types::DecodingOptions,
    ) -> crate::types::EncodingResult<Self> {
        let name = <crate::types::string::UAString as crate::types::BinaryEncoder<
            crate::types::string::UAString,
        >>::decode(stream, decoding_options)?;
        let enabled =
            <bool as crate::types::BinaryEncoder<bool>>::decode(stream, decoding_options)?;
        let data_set_writer_id =
            <u16 as crate::types::BinaryEncoder<u16>>::decode(stream, decoding_options)?;
        let data_set_field_content_mask =
            <super::enums::DataSetFieldContentMask as crate::types::BinaryEncoder<
                super::enums::DataSetFieldContentMask,
            >>::decode(stream, decoding_options)?;
        let key_frame_count =
            <u32 as crate::types::BinaryEncoder<u32>>::decode(stream, decoding_options)?;
        let data_set_name = <crate::types::string::UAString as crate::types::BinaryEncoder<
            crate::types::string::UAString,
        >>::decode(stream, decoding_options)?;
        let data_set_writer_properties =
            <Option<Vec<super::key_value_pair::KeyValuePair>> as crate::types::BinaryEncoder<
                Option<Vec<super::key_value_pair::KeyValuePair>>,
            >>::decode(stream, decoding_options)?;
        let transport_settings =
            <crate::types::extension_object::ExtensionObject as crate::types::BinaryEncoder<
                crate::types::extension_object::ExtensionObject,
            >>::decode(stream, decoding_options)?;
        let message_settings =
            <crate::types::extension_object::ExtensionObject as crate::types::BinaryEncoder<
                crate::types::extension_object::ExtensionObject,
            >>::decode(stream, decoding_options)?;
        Ok(Self {
            name,
            enabled,
            data_set_writer_id,
            data_set_field_content_mask,
            key_frame_count,
            data_set_name,
            data_set_writer_properties,
            transport_settings,
            message_settings,
        })
    }
}
