// OPCUA for Rust
// SPDX-License-Identifier: MPL-2.0
// Copyright (C) 2017-2024 Adam Lock, Einar Omang
//
// This file was autogenerated from tools/schema/schemas/1.0.4/Opc.Ua.Types.bsd by opcua-codegen
//
// DO NOT EDIT THIS FILE
#[derive(Debug, Clone, PartialEq)]
pub struct RegisteredServer {
    pub server_uri: crate::types::string::UAString,
    pub product_uri: crate::types::string::UAString,
    pub server_names: Option<Vec<crate::types::localized_text::LocalizedText>>,
    pub server_type: super::enums::ApplicationType,
    pub gateway_server_uri: crate::types::string::UAString,
    pub discovery_urls: Option<Vec<crate::types::string::UAString>>,
    pub semaphore_file_path: crate::types::string::UAString,
    pub is_online: bool,
}
impl crate::types::MessageInfo for RegisteredServer {
    fn object_id(&self) -> crate::types::ObjectId {
        crate::types::ObjectId::RegisteredServer_Encoding_DefaultBinary
    }
}
impl crate::types::BinaryEncoder for RegisteredServer {
    fn byte_len(&self) -> usize {
        let mut size = 0usize;
        size += self.server_uri.byte_len();
        size += self.product_uri.byte_len();
        size += self.server_names.byte_len();
        size += self.server_type.byte_len();
        size += self.gateway_server_uri.byte_len();
        size += self.discovery_urls.byte_len();
        size += self.semaphore_file_path.byte_len();
        size += self.is_online.byte_len();
        size
    }
    #[allow(unused_variables)]
    fn encode<S: std::io::Write>(
        &self,
        stream: &mut S,
    ) -> crate::types::EncodingResult<usize> {
        let mut size = 0usize;
        size += self.server_uri.encode(stream)?;
        size += self.product_uri.encode(stream)?;
        size += self.server_names.encode(stream)?;
        size += self.server_type.encode(stream)?;
        size += self.gateway_server_uri.encode(stream)?;
        size += self.discovery_urls.encode(stream)?;
        size += self.semaphore_file_path.encode(stream)?;
        size += self.is_online.encode(stream)?;
        Ok(size)
    }
    #[allow(unused_variables)]
    fn decode<S: std::io::Read>(
        stream: &mut S,
        decoding_options: &crate::types::DecodingOptions,
    ) -> crate::types::EncodingResult<Self> {
        let server_uri = <crate::types::string::UAString as crate::types::BinaryEncoder>::decode(
            stream,
            decoding_options,
        )?;
        let product_uri = <crate::types::string::UAString as crate::types::BinaryEncoder>::decode(
            stream,
            decoding_options,
        )?;
        let server_names = <Option<
            Vec<crate::types::localized_text::LocalizedText>,
        > as crate::types::BinaryEncoder>::decode(stream, decoding_options)?;
        let server_type = <super::enums::ApplicationType as crate::types::BinaryEncoder>::decode(
            stream,
            decoding_options,
        )?;
        let gateway_server_uri = <crate::types::string::UAString as crate::types::BinaryEncoder>::decode(
            stream,
            decoding_options,
        )?;
        let discovery_urls = <Option<
            Vec<crate::types::string::UAString>,
        > as crate::types::BinaryEncoder>::decode(stream, decoding_options)?;
        let semaphore_file_path = <crate::types::string::UAString as crate::types::BinaryEncoder>::decode(
            stream,
            decoding_options,
        )?;
        let is_online = <bool as crate::types::BinaryEncoder>::decode(
            stream,
            decoding_options,
        )?;
        Ok(Self {
            server_uri,
            product_uri,
            server_names,
            server_type,
            gateway_server_uri,
            discovery_urls,
            semaphore_file_path,
            is_online,
        })
    }
}
