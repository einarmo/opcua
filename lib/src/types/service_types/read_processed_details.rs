// OPCUA for Rust
// SPDX-License-Identifier: MPL-2.0
// Copyright (C) 2017-2024 Adam Lock, Einar Omang
//
// This file was autogenerated from tools/schema/schemas/1.0.4/Opc.Ua.Types.bsd by opcua-codegen
//
// DO NOT EDIT THIS FILE
#[derive(Debug, Clone, PartialEq)]
#[derive(Default)]
pub struct ReadProcessedDetails {
    pub start_time: crate::types::date_time::DateTime,
    pub end_time: crate::types::date_time::DateTime,
    pub processing_interval: f64,
    pub aggregate_type: Option<Vec<crate::types::node_id::NodeId>>,
    pub aggregate_configuration: super::aggregate_configuration::AggregateConfiguration,
}
impl crate::types::BinaryEncoder<ReadProcessedDetails> for ReadProcessedDetails {
    fn byte_len(&self) -> usize {
        let mut size = 0usize;
        size += self.start_time.byte_len();
        size += self.end_time.byte_len();
        size += self.processing_interval.byte_len();
        size += self.aggregate_type.byte_len();
        size += self.aggregate_configuration.byte_len();
        size
    }
    #[allow(unused_variables)]
    fn encode<S: std::io::Write>(
        &self,
        stream: &mut S,
    ) -> crate::types::EncodingResult<usize> {
        let mut size = 0usize;
        size += self.start_time.encode(stream)?;
        size += self.end_time.encode(stream)?;
        size += self.processing_interval.encode(stream)?;
        size += self.aggregate_type.encode(stream)?;
        size += self.aggregate_configuration.encode(stream)?;
        Ok(size)
    }
    #[allow(unused_variables)]
    fn decode<S: std::io::Read>(
        stream: &mut S,
        decoding_options: &crate::types::DecodingOptions,
    ) -> crate::types::EncodingResult<Self> {
        let start_time = <crate::types::date_time::DateTime as crate::types::BinaryEncoder<
            crate::types::date_time::DateTime,
        >>::decode(stream, decoding_options)?;
        let end_time = <crate::types::date_time::DateTime as crate::types::BinaryEncoder<
            crate::types::date_time::DateTime,
        >>::decode(stream, decoding_options)?;
        let processing_interval = <f64 as crate::types::BinaryEncoder<
            f64,
        >>::decode(stream, decoding_options)?;
        let aggregate_type = <Option<
            Vec<crate::types::node_id::NodeId>,
        > as crate::types::BinaryEncoder<
            Option<Vec<crate::types::node_id::NodeId>>,
        >>::decode(stream, decoding_options)?;
        let aggregate_configuration = <super::aggregate_configuration::AggregateConfiguration as crate::types::BinaryEncoder<
            super::aggregate_configuration::AggregateConfiguration,
        >>::decode(stream, decoding_options)?;
        Ok(Self {
            start_time,
            end_time,
            processing_interval,
            aggregate_type,
            aggregate_configuration,
        })
    }
}
