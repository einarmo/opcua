// OPCUA for Rust
// SPDX-License-Identifier: MPL-2.0
// Copyright (C) 2017-2024 Adam Lock, Einar Omang
//
// This file was autogenerated from tools/schema/schemas/1.0.4/Opc.Ua.Types.bsd by opcua-codegen
//
// DO NOT EDIT THIS FILE
#[derive(Debug, Clone, PartialEq, Default)]
pub struct EnumValueType {
    pub value: i64,
    pub display_name: crate::types::localized_text::LocalizedText,
    pub description: crate::types::localized_text::LocalizedText,
}
impl crate::types::MessageInfo for EnumValueType {
    fn object_id(&self) -> crate::types::ObjectId {
        crate::types::ObjectId::EnumValueType_Encoding_DefaultBinary
    }
}
impl crate::types::BinaryEncoder<EnumValueType> for EnumValueType {
    fn byte_len(&self) -> usize {
        let mut size = 0usize;
        size += self.value.byte_len();
        size += self.display_name.byte_len();
        size += self.description.byte_len();
        size
    }
    #[allow(unused_variables)]
    fn encode<S: std::io::Write>(&self, stream: &mut S) -> crate::types::EncodingResult<usize> {
        let mut size = 0usize;
        size += self.value.encode(stream)?;
        size += self.display_name.encode(stream)?;
        size += self.description.encode(stream)?;
        Ok(size)
    }
    #[allow(unused_variables)]
    fn decode<S: std::io::Read>(
        stream: &mut S,
        decoding_options: &crate::types::DecodingOptions,
    ) -> crate::types::EncodingResult<Self> {
        let value = <i64 as crate::types::BinaryEncoder<i64>>::decode(stream, decoding_options)?;
        let display_name =
            <crate::types::localized_text::LocalizedText as crate::types::BinaryEncoder<
                crate::types::localized_text::LocalizedText,
            >>::decode(stream, decoding_options)?;
        let description =
            <crate::types::localized_text::LocalizedText as crate::types::BinaryEncoder<
                crate::types::localized_text::LocalizedText,
            >>::decode(stream, decoding_options)?;
        Ok(Self {
            value,
            display_name,
            description,
        })
    }
}
