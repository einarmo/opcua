// OPCUA for Rust
// SPDX-License-Identifier: MPL-2.0
// Copyright (C) 2017-2024 Adam Lock, Einar Omang
//
// This file was autogenerated from tools/schema/schemas/1.0.4/Opc.Ua.Types.bsd by opcua-codegen
//
// DO NOT EDIT THIS FILE
#[derive(Debug, Clone, PartialEq)]
#[derive(Default)]
pub struct VariableAttributes {
    pub specified_attributes: u32,
    pub display_name: crate::types::localized_text::LocalizedText,
    pub description: crate::types::localized_text::LocalizedText,
    pub write_mask: u32,
    pub user_write_mask: u32,
    pub value: crate::types::variant::Variant,
    pub data_type: crate::types::node_id::NodeId,
    pub value_rank: i32,
    pub array_dimensions: Option<Vec<u32>>,
    pub access_level: u8,
    pub user_access_level: u8,
    pub minimum_sampling_interval: f64,
    pub historizing: bool,
}
impl crate::types::BinaryEncoder<VariableAttributes> for VariableAttributes {
    fn byte_len(&self) -> usize {
        let mut size = 0usize;
        size += self.specified_attributes.byte_len();
        size += self.display_name.byte_len();
        size += self.description.byte_len();
        size += self.write_mask.byte_len();
        size += self.user_write_mask.byte_len();
        size += self.value.byte_len();
        size += self.data_type.byte_len();
        size += self.value_rank.byte_len();
        size += self.array_dimensions.byte_len();
        size += self.access_level.byte_len();
        size += self.user_access_level.byte_len();
        size += self.minimum_sampling_interval.byte_len();
        size += self.historizing.byte_len();
        size
    }
    #[allow(unused_variables)]
    fn encode<S: std::io::Write>(
        &self,
        stream: &mut S,
    ) -> crate::types::EncodingResult<usize> {
        let mut size = 0usize;
        size += self.specified_attributes.encode(stream)?;
        size += self.display_name.encode(stream)?;
        size += self.description.encode(stream)?;
        size += self.write_mask.encode(stream)?;
        size += self.user_write_mask.encode(stream)?;
        size += self.value.encode(stream)?;
        size += self.data_type.encode(stream)?;
        size += self.value_rank.encode(stream)?;
        size += self.array_dimensions.encode(stream)?;
        size += self.access_level.encode(stream)?;
        size += self.user_access_level.encode(stream)?;
        size += self.minimum_sampling_interval.encode(stream)?;
        size += self.historizing.encode(stream)?;
        Ok(size)
    }
    #[allow(unused_variables)]
    fn decode<S: std::io::Read>(
        stream: &mut S,
        decoding_options: &crate::types::DecodingOptions,
    ) -> crate::types::EncodingResult<Self> {
        let specified_attributes = <u32 as crate::types::BinaryEncoder<
            u32,
        >>::decode(stream, decoding_options)?;
        let display_name = <crate::types::localized_text::LocalizedText as crate::types::BinaryEncoder<
            crate::types::localized_text::LocalizedText,
        >>::decode(stream, decoding_options)?;
        let description = <crate::types::localized_text::LocalizedText as crate::types::BinaryEncoder<
            crate::types::localized_text::LocalizedText,
        >>::decode(stream, decoding_options)?;
        let write_mask = <u32 as crate::types::BinaryEncoder<
            u32,
        >>::decode(stream, decoding_options)?;
        let user_write_mask = <u32 as crate::types::BinaryEncoder<
            u32,
        >>::decode(stream, decoding_options)?;
        let value = <crate::types::variant::Variant as crate::types::BinaryEncoder<
            crate::types::variant::Variant,
        >>::decode(stream, decoding_options)?;
        let data_type = <crate::types::node_id::NodeId as crate::types::BinaryEncoder<
            crate::types::node_id::NodeId,
        >>::decode(stream, decoding_options)?;
        let value_rank = <i32 as crate::types::BinaryEncoder<
            i32,
        >>::decode(stream, decoding_options)?;
        let array_dimensions = <Option<
            Vec<u32>,
        > as crate::types::BinaryEncoder<
            Option<Vec<u32>>,
        >>::decode(stream, decoding_options)?;
        let access_level = <u8 as crate::types::BinaryEncoder<
            u8,
        >>::decode(stream, decoding_options)?;
        let user_access_level = <u8 as crate::types::BinaryEncoder<
            u8,
        >>::decode(stream, decoding_options)?;
        let minimum_sampling_interval = <f64 as crate::types::BinaryEncoder<
            f64,
        >>::decode(stream, decoding_options)?;
        let historizing = <bool as crate::types::BinaryEncoder<
            bool,
        >>::decode(stream, decoding_options)?;
        Ok(Self {
            specified_attributes,
            display_name,
            description,
            write_mask,
            user_write_mask,
            value,
            data_type,
            value_rank,
            array_dimensions,
            access_level,
            user_access_level,
            minimum_sampling_interval,
            historizing,
        })
    }
}
