// OPCUA for Rust
// SPDX-License-Identifier: MPL-2.0
// Copyright (C) 2017-2024 Adam Lock, Einar Omang
//
// This file was autogenerated from tools/schema/schemas/1.0.4/Opc.Ua.Types.bsd by opcua-codegen
//
// DO NOT EDIT THIS FILE
#[derive(Debug, Clone, PartialEq)]
#[derive(Default)]
pub struct ThreeDOrientation {
    pub a: f64,
    pub b: f64,
    pub c: f64,
}
impl crate::types::BinaryEncoder for ThreeDOrientation {
    fn byte_len(&self) -> usize {
        let mut size = 0usize;
        size += self.a.byte_len();
        size += self.b.byte_len();
        size += self.c.byte_len();
        size
    }
    #[allow(unused_variables)]
    fn encode<S: std::io::Write>(
        &self,
        stream: &mut S,
    ) -> crate::types::EncodingResult<usize> {
        let mut size = 0usize;
        size += self.a.encode(stream)?;
        size += self.b.encode(stream)?;
        size += self.c.encode(stream)?;
        Ok(size)
    }
    #[allow(unused_variables)]
    fn decode<S: std::io::Read>(
        stream: &mut S,
        decoding_options: &crate::types::DecodingOptions,
    ) -> crate::types::EncodingResult<Self> {
        let a = <f64 as crate::types::BinaryEncoder>::decode(stream, decoding_options)?;
        let b = <f64 as crate::types::BinaryEncoder>::decode(stream, decoding_options)?;
        let c = <f64 as crate::types::BinaryEncoder>::decode(stream, decoding_options)?;
        Ok(Self { a, b, c })
    }
}
