// OPCUA for Rust
// SPDX-License-Identifier: MPL-2.0
// Copyright (C) 2017-2024 Adam Lock, Einar Omang
//
// This file was autogenerated from tools/schema/schemas/1.0.4/Opc.Ua.Types.bsd by opcua-codegen
//
// DO NOT EDIT THIS FILE
#[derive(Debug, Clone, PartialEq, serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "PascalCase")]
pub struct ContentFilterElement {
    pub filter_operator: super::enums::FilterOperator,
    pub filter_operands: Option<Vec<crate::types::extension_object::ExtensionObject>>,
}
impl crate::types::MessageInfo for ContentFilterElement {
    fn object_id(&self) -> crate::types::ObjectId {
        crate::types::ObjectId::ContentFilterElement_Encoding_DefaultBinary
    }
}
impl crate::types::BinaryEncoder<ContentFilterElement> for ContentFilterElement {
    fn byte_len(&self) -> usize {
        let mut size = 0usize;
        size += self.filter_operator.byte_len();
        size += self.filter_operands.byte_len();
        size
    }
    #[allow(unused_variables)]
    fn encode<S: std::io::Write>(&self, stream: &mut S) -> crate::types::EncodingResult<usize> {
        let mut size = 0usize;
        size += self.filter_operator.encode(stream)?;
        size += self.filter_operands.encode(stream)?;
        Ok(size)
    }
    #[allow(unused_variables)]
    fn decode<S: std::io::Read>(
        stream: &mut S,
        decoding_options: &crate::types::DecodingOptions,
    ) -> crate::types::EncodingResult<Self> {
        let filter_operator = <super::enums::FilterOperator as crate::types::BinaryEncoder<
            super::enums::FilterOperator,
        >>::decode(stream, decoding_options)?;
        let filter_operands = <Option<
            Vec<crate::types::extension_object::ExtensionObject>,
        > as crate::types::BinaryEncoder<
            Option<Vec<crate::types::extension_object::ExtensionObject>>,
        >>::decode(stream, decoding_options)?;
        Ok(Self {
            filter_operator,
            filter_operands,
        })
    }
}
