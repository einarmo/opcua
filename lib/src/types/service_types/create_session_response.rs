// OPCUA for Rust
// SPDX-License-Identifier: MPL-2.0
// Copyright (C) 2017-2024 Adam Lock, Einar Omang
//
// This file was autogenerated from tools/schema/schemas/1.0.4/Opc.Ua.Types.bsd by opcua-codegen
//
// DO NOT EDIT THIS FILE
#[derive(Debug, Clone, PartialEq, Default)]
pub struct CreateSessionResponse {
    pub response_header: crate::types::response_header::ResponseHeader,
    pub session_id: crate::types::node_id::NodeId,
    pub authentication_token: crate::types::node_id::NodeId,
    pub revised_session_timeout: f64,
    pub server_nonce: crate::types::byte_string::ByteString,
    pub server_certificate: crate::types::byte_string::ByteString,
    pub server_endpoints: Option<Vec<super::endpoint_description::EndpointDescription>>,
    pub server_software_certificates:
        Option<Vec<super::signed_software_certificate::SignedSoftwareCertificate>>,
    pub server_signature: super::signature_data::SignatureData,
    pub max_request_message_size: u32,
}
impl crate::types::MessageInfo for CreateSessionResponse {
    fn object_id(&self) -> crate::types::ObjectId {
        crate::types::ObjectId::CreateSessionResponse_Encoding_DefaultBinary
    }
}
impl crate::types::BinaryEncoder<CreateSessionResponse> for CreateSessionResponse {
    fn byte_len(&self) -> usize {
        let mut size = 0usize;
        size += self.response_header.byte_len();
        size += self.session_id.byte_len();
        size += self.authentication_token.byte_len();
        size += self.revised_session_timeout.byte_len();
        size += self.server_nonce.byte_len();
        size += self.server_certificate.byte_len();
        size += self.server_endpoints.byte_len();
        size += self.server_software_certificates.byte_len();
        size += self.server_signature.byte_len();
        size += self.max_request_message_size.byte_len();
        size
    }
    #[allow(unused_variables)]
    fn encode<S: std::io::Write>(&self, stream: &mut S) -> crate::types::EncodingResult<usize> {
        let mut size = 0usize;
        size += self.response_header.encode(stream)?;
        size += self.session_id.encode(stream)?;
        size += self.authentication_token.encode(stream)?;
        size += self.revised_session_timeout.encode(stream)?;
        size += self.server_nonce.encode(stream)?;
        size += self.server_certificate.encode(stream)?;
        size += self.server_endpoints.encode(stream)?;
        size += self.server_software_certificates.encode(stream)?;
        size += self.server_signature.encode(stream)?;
        size += self.max_request_message_size.encode(stream)?;
        Ok(size)
    }
    #[allow(unused_variables)]
    fn decode<S: std::io::Read>(
        stream: &mut S,
        decoding_options: &crate::types::DecodingOptions,
    ) -> crate::types::EncodingResult<Self> {
        let response_header =
            <crate::types::response_header::ResponseHeader as crate::types::BinaryEncoder<
                crate::types::response_header::ResponseHeader,
            >>::decode(stream, decoding_options)?;
        let session_id = <crate::types::node_id::NodeId as crate::types::BinaryEncoder<
            crate::types::node_id::NodeId,
        >>::decode(stream, decoding_options)?;
        let authentication_token =
            <crate::types::node_id::NodeId as crate::types::BinaryEncoder<
                crate::types::node_id::NodeId,
            >>::decode(stream, decoding_options)?;
        let revised_session_timeout =
            <f64 as crate::types::BinaryEncoder<f64>>::decode(stream, decoding_options)?;
        let server_nonce =
            <crate::types::byte_string::ByteString as crate::types::BinaryEncoder<
                crate::types::byte_string::ByteString,
            >>::decode(stream, decoding_options)?;
        let server_certificate =
            <crate::types::byte_string::ByteString as crate::types::BinaryEncoder<
                crate::types::byte_string::ByteString,
            >>::decode(stream, decoding_options)?;
        let server_endpoints = <Option<
            Vec<super::endpoint_description::EndpointDescription>,
        > as crate::types::BinaryEncoder<
            Option<Vec<super::endpoint_description::EndpointDescription>>,
        >>::decode(stream, decoding_options)?;
        let server_software_certificates = <Option<
            Vec<super::signed_software_certificate::SignedSoftwareCertificate>,
        > as crate::types::BinaryEncoder<
            Option<Vec<super::signed_software_certificate::SignedSoftwareCertificate>>,
        >>::decode(stream, decoding_options)?;
        let server_signature =
            <super::signature_data::SignatureData as crate::types::BinaryEncoder<
                super::signature_data::SignatureData,
            >>::decode(stream, decoding_options)?;
        let max_request_message_size =
            <u32 as crate::types::BinaryEncoder<u32>>::decode(stream, decoding_options)?;
        Ok(Self {
            response_header,
            session_id,
            authentication_token,
            revised_session_timeout,
            server_nonce,
            server_certificate,
            server_endpoints,
            server_software_certificates,
            server_signature,
            max_request_message_size,
        })
    }
}
