// OPCUA for Rust
// SPDX-License-Identifier: MPL-2.0
// Copyright (C) 2017-2024 Adam Lock, Einar Omang
//
// This file was autogenerated from tools/schema/schemas/1.0.4/Opc.Ua.Types.bsd by opcua-codegen
//
// DO NOT EDIT THIS FILE
#[derive(Debug, Clone, PartialEq)]
pub struct EndpointDescription {
    pub endpoint_url: crate::types::string::UAString,
    pub server: super::application_description::ApplicationDescription,
    pub server_certificate: crate::types::byte_string::ByteString,
    pub security_mode: super::enums::MessageSecurityMode,
    pub security_policy_uri: crate::types::string::UAString,
    pub user_identity_tokens: Option<Vec<super::user_token_policy::UserTokenPolicy>>,
    pub transport_profile_uri: crate::types::string::UAString,
    pub security_level: u8,
}
impl crate::types::MessageInfo for EndpointDescription {
    fn object_id(&self) -> crate::types::ObjectId {
        crate::types::ObjectId::EndpointDescription_Encoding_DefaultBinary
    }
}
impl crate::types::BinaryEncoder for EndpointDescription {
    fn byte_len(&self) -> usize {
        let mut size = 0usize;
        size += self.endpoint_url.byte_len();
        size += self.server.byte_len();
        size += self.server_certificate.byte_len();
        size += self.security_mode.byte_len();
        size += self.security_policy_uri.byte_len();
        size += self.user_identity_tokens.byte_len();
        size += self.transport_profile_uri.byte_len();
        size += self.security_level.byte_len();
        size
    }
    #[allow(unused_variables)]
    fn encode<S: std::io::Write>(
        &self,
        stream: &mut S,
    ) -> crate::types::EncodingResult<usize> {
        let mut size = 0usize;
        size += self.endpoint_url.encode(stream)?;
        size += self.server.encode(stream)?;
        size += self.server_certificate.encode(stream)?;
        size += self.security_mode.encode(stream)?;
        size += self.security_policy_uri.encode(stream)?;
        size += self.user_identity_tokens.encode(stream)?;
        size += self.transport_profile_uri.encode(stream)?;
        size += self.security_level.encode(stream)?;
        Ok(size)
    }
    #[allow(unused_variables)]
    fn decode<S: std::io::Read>(
        stream: &mut S,
        decoding_options: &crate::types::DecodingOptions,
    ) -> crate::types::EncodingResult<Self> {
        let endpoint_url = <crate::types::string::UAString as crate::types::BinaryEncoder>::decode(
            stream,
            decoding_options,
        )?;
        let server = <super::application_description::ApplicationDescription as crate::types::BinaryEncoder>::decode(
            stream,
            decoding_options,
        )?;
        let server_certificate = <crate::types::byte_string::ByteString as crate::types::BinaryEncoder>::decode(
            stream,
            decoding_options,
        )?;
        let security_mode = <super::enums::MessageSecurityMode as crate::types::BinaryEncoder>::decode(
            stream,
            decoding_options,
        )?;
        let security_policy_uri = <crate::types::string::UAString as crate::types::BinaryEncoder>::decode(
            stream,
            decoding_options,
        )?;
        let user_identity_tokens = <Option<
            Vec<super::user_token_policy::UserTokenPolicy>,
        > as crate::types::BinaryEncoder>::decode(stream, decoding_options)?;
        let transport_profile_uri = <crate::types::string::UAString as crate::types::BinaryEncoder>::decode(
            stream,
            decoding_options,
        )?;
        let security_level = <u8 as crate::types::BinaryEncoder>::decode(
            stream,
            decoding_options,
        )?;
        Ok(Self {
            endpoint_url,
            server,
            server_certificate,
            security_mode,
            security_policy_uri,
            user_identity_tokens,
            transport_profile_uri,
            security_level,
        })
    }
}
