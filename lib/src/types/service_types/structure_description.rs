// OPCUA for Rust
// SPDX-License-Identifier: MPL-2.0
// Copyright (C) 2017-2024 Adam Lock, Einar Omang
//
// This file was autogenerated from tools/schema/schemas/1.0.4/Opc.Ua.Types.bsd by opcua-codegen
//
// DO NOT EDIT THIS FILE
#[derive(Debug, Clone, PartialEq, serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "PascalCase")]
pub struct StructureDescription {
    pub data_type_id: crate::types::node_id::NodeId,
    pub name: crate::types::qualified_name::QualifiedName,
    pub structure_definition: super::structure_definition::StructureDefinition,
}
impl crate::types::BinaryEncoder<StructureDescription> for StructureDescription {
    fn byte_len(&self) -> usize {
        let mut size = 0usize;
        size += self.data_type_id.byte_len();
        size += self.name.byte_len();
        size += self.structure_definition.byte_len();
        size
    }
    #[allow(unused_variables)]
    fn encode<S: std::io::Write>(&self, stream: &mut S) -> crate::types::EncodingResult<usize> {
        let mut size = 0usize;
        size += self.data_type_id.encode(stream)?;
        size += self.name.encode(stream)?;
        size += self.structure_definition.encode(stream)?;
        Ok(size)
    }
    #[allow(unused_variables)]
    fn decode<S: std::io::Read>(
        stream: &mut S,
        decoding_options: &crate::types::DecodingOptions,
    ) -> crate::types::EncodingResult<Self> {
        let data_type_id = <crate::types::node_id::NodeId as crate::types::BinaryEncoder<
            crate::types::node_id::NodeId,
        >>::decode(stream, decoding_options)?;
        let name = <crate::types::qualified_name::QualifiedName as crate::types::BinaryEncoder<
            crate::types::qualified_name::QualifiedName,
        >>::decode(stream, decoding_options)?;
        let structure_definition =
            <super::structure_definition::StructureDefinition as crate::types::BinaryEncoder<
                super::structure_definition::StructureDefinition,
            >>::decode(stream, decoding_options)?;
        Ok(Self {
            data_type_id,
            name,
            structure_definition,
        })
    }
}
