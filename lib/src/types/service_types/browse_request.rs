// OPCUA for Rust
// SPDX-License-Identifier: MPL-2.0
// Copyright (C) 2017-2024 Adam Lock, Einar Omang
//
// This file was autogenerated from tools/schema/schemas/1.0.4/Opc.Ua.Types.bsd by opcua-codegen
//
// DO NOT EDIT THIS FILE
#[derive(Debug, Clone, PartialEq, Default)]
pub struct BrowseRequest {
    pub request_header: crate::types::request_header::RequestHeader,
    pub view: super::view_description::ViewDescription,
    pub requested_max_references_per_node: u32,
    pub nodes_to_browse: Option<Vec<super::browse_description::BrowseDescription>>,
}
impl crate::types::MessageInfo for BrowseRequest {
    fn object_id(&self) -> crate::types::ObjectId {
        crate::types::ObjectId::BrowseRequest_Encoding_DefaultBinary
    }
}
impl crate::types::BinaryEncoder<BrowseRequest> for BrowseRequest {
    fn byte_len(&self) -> usize {
        let mut size = 0usize;
        size += self.request_header.byte_len();
        size += self.view.byte_len();
        size += self.requested_max_references_per_node.byte_len();
        size += self.nodes_to_browse.byte_len();
        size
    }
    #[allow(unused_variables)]
    fn encode<S: std::io::Write>(&self, stream: &mut S) -> crate::types::EncodingResult<usize> {
        let mut size = 0usize;
        size += self.request_header.encode(stream)?;
        size += self.view.encode(stream)?;
        size += self.requested_max_references_per_node.encode(stream)?;
        size += self.nodes_to_browse.encode(stream)?;
        Ok(size)
    }
    #[allow(unused_variables)]
    fn decode<S: std::io::Read>(
        stream: &mut S,
        decoding_options: &crate::types::DecodingOptions,
    ) -> crate::types::EncodingResult<Self> {
        let request_header =
            <crate::types::request_header::RequestHeader as crate::types::BinaryEncoder<
                crate::types::request_header::RequestHeader,
            >>::decode(stream, decoding_options)?;
        let view = <super::view_description::ViewDescription as crate::types::BinaryEncoder<
            super::view_description::ViewDescription,
        >>::decode(stream, decoding_options)?;
        let requested_max_references_per_node =
            <u32 as crate::types::BinaryEncoder<u32>>::decode(stream, decoding_options)?;
        let nodes_to_browse = <Option<
            Vec<super::browse_description::BrowseDescription>,
        > as crate::types::BinaryEncoder<
            Option<Vec<super::browse_description::BrowseDescription>>,
        >>::decode(stream, decoding_options)?;
        Ok(Self {
            request_header,
            view,
            requested_max_references_per_node,
            nodes_to_browse,
        })
    }
}
