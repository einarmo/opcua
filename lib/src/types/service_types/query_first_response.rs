// OPCUA for Rust
// SPDX-License-Identifier: MPL-2.0
// Copyright (C) 2017-2024 Adam Lock, Einar Omang
//
// This file was autogenerated from tools/schema/schemas/1.0.4/Opc.Ua.Types.bsd by opcua-codegen
//
// DO NOT EDIT THIS FILE
#[derive(Debug, Clone, PartialEq)]
#[derive(Default)]
pub struct QueryFirstResponse {
    pub response_header: crate::types::response_header::ResponseHeader,
    pub query_data_sets: Option<Vec<super::query_data_set::QueryDataSet>>,
    pub continuation_point: crate::types::byte_string::ByteString,
    pub parsing_results: Option<Vec<super::parsing_result::ParsingResult>>,
    pub diagnostic_infos: Option<Vec<crate::types::diagnostic_info::DiagnosticInfo>>,
    pub filter_result: super::content_filter_result::ContentFilterResult,
}
impl crate::types::MessageInfo for QueryFirstResponse {
    fn object_id(&self) -> crate::types::ObjectId {
        crate::types::ObjectId::QueryFirstResponse_Encoding_DefaultBinary
    }
}
impl crate::types::BinaryEncoder<QueryFirstResponse> for QueryFirstResponse {
    fn byte_len(&self) -> usize {
        let mut size = 0usize;
        size += self.response_header.byte_len();
        size += self.query_data_sets.byte_len();
        size += self.continuation_point.byte_len();
        size += self.parsing_results.byte_len();
        size += self.diagnostic_infos.byte_len();
        size += self.filter_result.byte_len();
        size
    }
    #[allow(unused_variables)]
    fn encode<S: std::io::Write>(
        &self,
        stream: &mut S,
    ) -> crate::types::EncodingResult<usize> {
        let mut size = 0usize;
        size += self.response_header.encode(stream)?;
        size += self.query_data_sets.encode(stream)?;
        size += self.continuation_point.encode(stream)?;
        size += self.parsing_results.encode(stream)?;
        size += self.diagnostic_infos.encode(stream)?;
        size += self.filter_result.encode(stream)?;
        Ok(size)
    }
    #[allow(unused_variables)]
    fn decode<S: std::io::Read>(
        stream: &mut S,
        decoding_options: &crate::types::DecodingOptions,
    ) -> crate::types::EncodingResult<Self> {
        let response_header = <crate::types::response_header::ResponseHeader as crate::types::BinaryEncoder<
            crate::types::response_header::ResponseHeader,
        >>::decode(stream, decoding_options)?;
        let query_data_sets = <Option<
            Vec<super::query_data_set::QueryDataSet>,
        > as crate::types::BinaryEncoder<
            Option<Vec<super::query_data_set::QueryDataSet>>,
        >>::decode(stream, decoding_options)?;
        let continuation_point = <crate::types::byte_string::ByteString as crate::types::BinaryEncoder<
            crate::types::byte_string::ByteString,
        >>::decode(stream, decoding_options)?;
        let parsing_results = <Option<
            Vec<super::parsing_result::ParsingResult>,
        > as crate::types::BinaryEncoder<
            Option<Vec<super::parsing_result::ParsingResult>>,
        >>::decode(stream, decoding_options)?;
        let diagnostic_infos = <Option<
            Vec<crate::types::diagnostic_info::DiagnosticInfo>,
        > as crate::types::BinaryEncoder<
            Option<Vec<crate::types::diagnostic_info::DiagnosticInfo>>,
        >>::decode(stream, decoding_options)?;
        let filter_result = <super::content_filter_result::ContentFilterResult as crate::types::BinaryEncoder<
            super::content_filter_result::ContentFilterResult,
        >>::decode(stream, decoding_options)?;
        Ok(Self {
            response_header,
            query_data_sets,
            continuation_point,
            parsing_results,
            diagnostic_infos,
            filter_result,
        })
    }
}
