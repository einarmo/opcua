// OPCUA for Rust
// SPDX-License-Identifier: MPL-2.0
// Copyright (C) 2017-2024 Adam Lock, Einar Omang
//
// This file was autogenerated from tools/schema/schemas/1.0.4/Opc.Ua.Types.bsd by opcua-codegen
//
// DO NOT EDIT THIS FILE
#[derive(Debug, Clone, PartialEq, Default)]
pub struct SetTriggeringRequest {
    pub request_header: crate::types::request_header::RequestHeader,
    pub subscription_id: u32,
    pub triggering_item_id: u32,
    pub links_to_add: Option<Vec<u32>>,
    pub links_to_remove: Option<Vec<u32>>,
}
impl crate::types::MessageInfo for SetTriggeringRequest {
    fn object_id(&self) -> crate::types::ObjectId {
        crate::types::ObjectId::SetTriggeringRequest_Encoding_DefaultBinary
    }
}
impl crate::types::BinaryEncoder<SetTriggeringRequest> for SetTriggeringRequest {
    fn byte_len(&self) -> usize {
        let mut size = 0usize;
        size += self.request_header.byte_len();
        size += self.subscription_id.byte_len();
        size += self.triggering_item_id.byte_len();
        size += self.links_to_add.byte_len();
        size += self.links_to_remove.byte_len();
        size
    }
    #[allow(unused_variables)]
    fn encode<S: std::io::Write>(&self, stream: &mut S) -> crate::types::EncodingResult<usize> {
        let mut size = 0usize;
        size += self.request_header.encode(stream)?;
        size += self.subscription_id.encode(stream)?;
        size += self.triggering_item_id.encode(stream)?;
        size += self.links_to_add.encode(stream)?;
        size += self.links_to_remove.encode(stream)?;
        Ok(size)
    }
    #[allow(unused_variables)]
    fn decode<S: std::io::Read>(
        stream: &mut S,
        decoding_options: &crate::types::DecodingOptions,
    ) -> crate::types::EncodingResult<Self> {
        let request_header =
            <crate::types::request_header::RequestHeader as crate::types::BinaryEncoder<
                crate::types::request_header::RequestHeader,
            >>::decode(stream, decoding_options)?;
        let subscription_id =
            <u32 as crate::types::BinaryEncoder<u32>>::decode(stream, decoding_options)?;
        let triggering_item_id =
            <u32 as crate::types::BinaryEncoder<u32>>::decode(stream, decoding_options)?;
        let links_to_add =
            <Option<Vec<u32>> as crate::types::BinaryEncoder<Option<Vec<u32>>>>::decode(
                stream,
                decoding_options,
            )?;
        let links_to_remove = <Option<Vec<u32>> as crate::types::BinaryEncoder<
            Option<Vec<u32>>,
        >>::decode(stream, decoding_options)?;
        Ok(Self {
            request_header,
            subscription_id,
            triggering_item_id,
            links_to_add,
            links_to_remove,
        })
    }
}
