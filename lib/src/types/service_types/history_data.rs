// OPCUA for Rust
// SPDX-License-Identifier: MPL-2.0
// Copyright (C) 2017-2024 Adam Lock, Einar Omang
//
// This file was autogenerated from tools/schema/schemas/1.0.4/Opc.Ua.Types.bsd by opcua-codegen
//
// DO NOT EDIT THIS FILE
#[derive(Debug, Clone, PartialEq)]
#[derive(Default)]
pub struct HistoryData {
    pub data_values: Option<Vec<crate::types::data_value::DataValue>>,
}
impl crate::types::MessageInfo for HistoryData {
    fn object_id(&self) -> crate::types::ObjectId {
        crate::types::ObjectId::HistoryData_Encoding_DefaultBinary
    }
}
impl crate::types::BinaryEncoder<HistoryData> for HistoryData {
    fn byte_len(&self) -> usize {
        let mut size = 0usize;
        size += self.data_values.byte_len();
        size
    }
    #[allow(unused_variables)]
    fn encode<S: std::io::Write>(
        &self,
        stream: &mut S,
    ) -> crate::types::EncodingResult<usize> {
        let mut size = 0usize;
        size += self.data_values.encode(stream)?;
        Ok(size)
    }
    #[allow(unused_variables)]
    fn decode<S: std::io::Read>(
        stream: &mut S,
        decoding_options: &crate::types::DecodingOptions,
    ) -> crate::types::EncodingResult<Self> {
        let data_values = <Option<
            Vec<crate::types::data_value::DataValue>,
        > as crate::types::BinaryEncoder<
            Option<Vec<crate::types::data_value::DataValue>>,
        >>::decode(stream, decoding_options)?;
        Ok(Self { data_values })
    }
}
