// OPCUA for Rust
// SPDX-License-Identifier: MPL-2.0
// Copyright (C) 2017-2024 Adam Lock, Einar Omang
//
// This file was autogenerated from tools/schema/schemas/1.0.4/Opc.Ua.Types.bsd by opcua-codegen
//
// DO NOT EDIT THIS FILE
#[derive(Debug, Clone, PartialEq)]
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "PascalCase")]
#[derive(Default)]
pub struct SimpleAttributeOperand {
    pub type_definition_id: crate::types::node_id::NodeId,
    pub browse_path: Option<Vec<crate::types::qualified_name::QualifiedName>>,
    pub attribute_id: u32,
    pub index_range: crate::types::string::UAString,
}
impl crate::types::BinaryEncoder<SimpleAttributeOperand> for SimpleAttributeOperand {
    fn byte_len(&self) -> usize {
        let mut size = 0usize;
        size += self.type_definition_id.byte_len();
        size += self.browse_path.byte_len();
        size += self.attribute_id.byte_len();
        size += self.index_range.byte_len();
        size
    }
    #[allow(unused_variables)]
    fn encode<S: std::io::Write>(
        &self,
        stream: &mut S,
    ) -> crate::types::EncodingResult<usize> {
        let mut size = 0usize;
        size += self.type_definition_id.encode(stream)?;
        size += self.browse_path.encode(stream)?;
        size += self.attribute_id.encode(stream)?;
        size += self.index_range.encode(stream)?;
        Ok(size)
    }
    #[allow(unused_variables)]
    fn decode<S: std::io::Read>(
        stream: &mut S,
        decoding_options: &crate::types::DecodingOptions,
    ) -> crate::types::EncodingResult<Self> {
        let type_definition_id = <crate::types::node_id::NodeId as crate::types::BinaryEncoder<
            crate::types::node_id::NodeId,
        >>::decode(stream, decoding_options)?;
        let browse_path = <Option<
            Vec<crate::types::qualified_name::QualifiedName>,
        > as crate::types::BinaryEncoder<
            Option<Vec<crate::types::qualified_name::QualifiedName>>,
        >>::decode(stream, decoding_options)?;
        let attribute_id = <u32 as crate::types::BinaryEncoder<
            u32,
        >>::decode(stream, decoding_options)?;
        let index_range = <crate::types::string::UAString as crate::types::BinaryEncoder<
            crate::types::string::UAString,
        >>::decode(stream, decoding_options)?;
        Ok(Self {
            type_definition_id,
            browse_path,
            attribute_id,
            index_range,
        })
    }
}
