// OPCUA for Rust
// SPDX-License-Identifier: MPL-2.0
// Copyright (C) 2017-2024 Adam Lock, Einar Omang
//
// This file was autogenerated from tools/schema/schemas/1.0.4/Opc.Ua.Types.bsd by opcua-codegen
//
// DO NOT EDIT THIS FILE
#[derive(Debug, Clone, PartialEq, Default)]
pub struct ActivateSessionRequest {
    pub request_header: crate::types::request_header::RequestHeader,
    pub client_signature: super::signature_data::SignatureData,
    pub client_software_certificates:
        Option<Vec<super::signed_software_certificate::SignedSoftwareCertificate>>,
    pub locale_ids: Option<Vec<crate::types::string::UAString>>,
    pub user_identity_token: crate::types::extension_object::ExtensionObject,
    pub user_token_signature: super::signature_data::SignatureData,
}
impl crate::types::MessageInfo for ActivateSessionRequest {
    fn object_id(&self) -> crate::types::ObjectId {
        crate::types::ObjectId::ActivateSessionRequest_Encoding_DefaultBinary
    }
}
impl crate::types::BinaryEncoder<ActivateSessionRequest> for ActivateSessionRequest {
    fn byte_len(&self) -> usize {
        let mut size = 0usize;
        size += self.request_header.byte_len();
        size += self.client_signature.byte_len();
        size += self.client_software_certificates.byte_len();
        size += self.locale_ids.byte_len();
        size += self.user_identity_token.byte_len();
        size += self.user_token_signature.byte_len();
        size
    }
    #[allow(unused_variables)]
    fn encode<S: std::io::Write>(&self, stream: &mut S) -> crate::types::EncodingResult<usize> {
        let mut size = 0usize;
        size += self.request_header.encode(stream)?;
        size += self.client_signature.encode(stream)?;
        size += self.client_software_certificates.encode(stream)?;
        size += self.locale_ids.encode(stream)?;
        size += self.user_identity_token.encode(stream)?;
        size += self.user_token_signature.encode(stream)?;
        Ok(size)
    }
    #[allow(unused_variables)]
    fn decode<S: std::io::Read>(
        stream: &mut S,
        decoding_options: &crate::types::DecodingOptions,
    ) -> crate::types::EncodingResult<Self> {
        let request_header =
            <crate::types::request_header::RequestHeader as crate::types::BinaryEncoder<
                crate::types::request_header::RequestHeader,
            >>::decode(stream, decoding_options)?;
        let client_signature =
            <super::signature_data::SignatureData as crate::types::BinaryEncoder<
                super::signature_data::SignatureData,
            >>::decode(stream, decoding_options)?;
        let client_software_certificates = <Option<
            Vec<super::signed_software_certificate::SignedSoftwareCertificate>,
        > as crate::types::BinaryEncoder<
            Option<Vec<super::signed_software_certificate::SignedSoftwareCertificate>>,
        >>::decode(stream, decoding_options)?;
        let locale_ids =
            <Option<Vec<crate::types::string::UAString>> as crate::types::BinaryEncoder<
                Option<Vec<crate::types::string::UAString>>,
            >>::decode(stream, decoding_options)?;
        let user_identity_token =
            <crate::types::extension_object::ExtensionObject as crate::types::BinaryEncoder<
                crate::types::extension_object::ExtensionObject,
            >>::decode(stream, decoding_options)?;
        let user_token_signature =
            <super::signature_data::SignatureData as crate::types::BinaryEncoder<
                super::signature_data::SignatureData,
            >>::decode(stream, decoding_options)?;
        Ok(Self {
            request_header,
            client_signature,
            client_software_certificates,
            locale_ids,
            user_identity_token,
            user_token_signature,
        })
    }
}
