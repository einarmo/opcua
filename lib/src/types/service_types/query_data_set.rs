// OPCUA for Rust
// SPDX-License-Identifier: MPL-2.0
// Copyright (C) 2017-2024 Adam Lock, Einar Omang
//
// This file was autogenerated from tools/schema/schemas/1.0.4/Opc.Ua.Types.bsd by opcua-codegen
//
// DO NOT EDIT THIS FILE
#[derive(Debug, Clone, PartialEq)]
#[derive(Default)]
pub struct QueryDataSet {
    pub node_id: crate::types::expanded_node_id::ExpandedNodeId,
    pub type_definition_node: crate::types::expanded_node_id::ExpandedNodeId,
    pub values: Option<Vec<crate::types::variant::Variant>>,
}
impl crate::types::MessageInfo for QueryDataSet {
    fn object_id(&self) -> crate::types::ObjectId {
        crate::types::ObjectId::QueryDataSet_Encoding_DefaultBinary
    }
}
impl crate::types::BinaryEncoder<QueryDataSet> for QueryDataSet {
    fn byte_len(&self) -> usize {
        let mut size = 0usize;
        size += self.node_id.byte_len();
        size += self.type_definition_node.byte_len();
        size += self.values.byte_len();
        size
    }
    #[allow(unused_variables)]
    fn encode<S: std::io::Write>(
        &self,
        stream: &mut S,
    ) -> crate::types::EncodingResult<usize> {
        let mut size = 0usize;
        size += self.node_id.encode(stream)?;
        size += self.type_definition_node.encode(stream)?;
        size += self.values.encode(stream)?;
        Ok(size)
    }
    #[allow(unused_variables)]
    fn decode<S: std::io::Read>(
        stream: &mut S,
        decoding_options: &crate::types::DecodingOptions,
    ) -> crate::types::EncodingResult<Self> {
        let node_id = <crate::types::expanded_node_id::ExpandedNodeId as crate::types::BinaryEncoder<
            crate::types::expanded_node_id::ExpandedNodeId,
        >>::decode(stream, decoding_options)?;
        let type_definition_node = <crate::types::expanded_node_id::ExpandedNodeId as crate::types::BinaryEncoder<
            crate::types::expanded_node_id::ExpandedNodeId,
        >>::decode(stream, decoding_options)?;
        let values = <Option<
            Vec<crate::types::variant::Variant>,
        > as crate::types::BinaryEncoder<
            Option<Vec<crate::types::variant::Variant>>,
        >>::decode(stream, decoding_options)?;
        Ok(Self {
            node_id,
            type_definition_node,
            values,
        })
    }
}
