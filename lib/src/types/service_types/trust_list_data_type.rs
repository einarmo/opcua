// OPCUA for Rust
// SPDX-License-Identifier: MPL-2.0
// Copyright (C) 2017-2024 Adam Lock, Einar Omang
//
// This file was autogenerated from tools/schema/schemas/1.0.4/Opc.Ua.Types.bsd by opcua-codegen
//
// DO NOT EDIT THIS FILE
#[derive(Debug, Clone, PartialEq, Default)]
pub struct TrustListDataType {
    pub specified_lists: u32,
    pub trusted_certificates: Option<Vec<crate::types::byte_string::ByteString>>,
    pub trusted_crls: Option<Vec<crate::types::byte_string::ByteString>>,
    pub issuer_certificates: Option<Vec<crate::types::byte_string::ByteString>>,
    pub issuer_crls: Option<Vec<crate::types::byte_string::ByteString>>,
}
impl crate::types::MessageInfo for TrustListDataType {
    fn object_id(&self) -> crate::types::ObjectId {
        crate::types::ObjectId::TrustListDataType_Encoding_DefaultBinary
    }
}
impl crate::types::BinaryEncoder<TrustListDataType> for TrustListDataType {
    fn byte_len(&self) -> usize {
        let mut size = 0usize;
        size += self.specified_lists.byte_len();
        size += self.trusted_certificates.byte_len();
        size += self.trusted_crls.byte_len();
        size += self.issuer_certificates.byte_len();
        size += self.issuer_crls.byte_len();
        size
    }
    #[allow(unused_variables)]
    fn encode<S: std::io::Write>(&self, stream: &mut S) -> crate::types::EncodingResult<usize> {
        let mut size = 0usize;
        size += self.specified_lists.encode(stream)?;
        size += self.trusted_certificates.encode(stream)?;
        size += self.trusted_crls.encode(stream)?;
        size += self.issuer_certificates.encode(stream)?;
        size += self.issuer_crls.encode(stream)?;
        Ok(size)
    }
    #[allow(unused_variables)]
    fn decode<S: std::io::Read>(
        stream: &mut S,
        decoding_options: &crate::types::DecodingOptions,
    ) -> crate::types::EncodingResult<Self> {
        let specified_lists =
            <u32 as crate::types::BinaryEncoder<u32>>::decode(stream, decoding_options)?;
        let trusted_certificates =
            <Option<Vec<crate::types::byte_string::ByteString>> as crate::types::BinaryEncoder<
                Option<Vec<crate::types::byte_string::ByteString>>,
            >>::decode(stream, decoding_options)?;
        let trusted_crls =
            <Option<Vec<crate::types::byte_string::ByteString>> as crate::types::BinaryEncoder<
                Option<Vec<crate::types::byte_string::ByteString>>,
            >>::decode(stream, decoding_options)?;
        let issuer_certificates =
            <Option<Vec<crate::types::byte_string::ByteString>> as crate::types::BinaryEncoder<
                Option<Vec<crate::types::byte_string::ByteString>>,
            >>::decode(stream, decoding_options)?;
        let issuer_crls =
            <Option<Vec<crate::types::byte_string::ByteString>> as crate::types::BinaryEncoder<
                Option<Vec<crate::types::byte_string::ByteString>>,
            >>::decode(stream, decoding_options)?;
        Ok(Self {
            specified_lists,
            trusted_certificates,
            trusted_crls,
            issuer_certificates,
            issuer_crls,
        })
    }
}
