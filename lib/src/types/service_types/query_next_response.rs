// OPCUA for Rust
// SPDX-License-Identifier: MPL-2.0
// Copyright (C) 2017-2024 Adam Lock, Einar Omang
//
// This file was autogenerated from tools/schema/schemas/1.0.4/Opc.Ua.Types.bsd by opcua-codegen
//
// DO NOT EDIT THIS FILE
#[derive(Debug, Clone, PartialEq, Default)]
pub struct QueryNextResponse {
    pub response_header: crate::types::response_header::ResponseHeader,
    pub query_data_sets: Option<Vec<super::query_data_set::QueryDataSet>>,
    pub revised_continuation_point: crate::types::byte_string::ByteString,
}
impl crate::types::MessageInfo for QueryNextResponse {
    fn object_id(&self) -> crate::types::ObjectId {
        crate::types::ObjectId::QueryNextResponse_Encoding_DefaultBinary
    }
}
impl crate::types::BinaryEncoder<QueryNextResponse> for QueryNextResponse {
    fn byte_len(&self) -> usize {
        let mut size = 0usize;
        size += self.response_header.byte_len();
        size += self.query_data_sets.byte_len();
        size += self.revised_continuation_point.byte_len();
        size
    }
    #[allow(unused_variables)]
    fn encode<S: std::io::Write>(&self, stream: &mut S) -> crate::types::EncodingResult<usize> {
        let mut size = 0usize;
        size += self.response_header.encode(stream)?;
        size += self.query_data_sets.encode(stream)?;
        size += self.revised_continuation_point.encode(stream)?;
        Ok(size)
    }
    #[allow(unused_variables)]
    fn decode<S: std::io::Read>(
        stream: &mut S,
        decoding_options: &crate::types::DecodingOptions,
    ) -> crate::types::EncodingResult<Self> {
        let response_header =
            <crate::types::response_header::ResponseHeader as crate::types::BinaryEncoder<
                crate::types::response_header::ResponseHeader,
            >>::decode(stream, decoding_options)?;
        let query_data_sets =
            <Option<Vec<super::query_data_set::QueryDataSet>> as crate::types::BinaryEncoder<
                Option<Vec<super::query_data_set::QueryDataSet>>,
            >>::decode(stream, decoding_options)?;
        let revised_continuation_point =
            <crate::types::byte_string::ByteString as crate::types::BinaryEncoder<
                crate::types::byte_string::ByteString,
            >>::decode(stream, decoding_options)?;
        Ok(Self {
            response_header,
            query_data_sets,
            revised_continuation_point,
        })
    }
}
