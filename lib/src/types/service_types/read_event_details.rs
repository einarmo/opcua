// OPCUA for Rust
// SPDX-License-Identifier: MPL-2.0
// Copyright (C) 2017-2024 Adam Lock, Einar Omang
//
// This file was autogenerated from tools/schema/schemas/1.0.4/Opc.Ua.Types.bsd by opcua-codegen
//
// DO NOT EDIT THIS FILE
#[derive(Debug, Clone, PartialEq)]
#[derive(Default)]
pub struct ReadEventDetails {
    pub num_values_per_node: u32,
    pub start_time: crate::types::date_time::DateTime,
    pub end_time: crate::types::date_time::DateTime,
    pub filter: super::event_filter::EventFilter,
}
impl crate::types::BinaryEncoder for ReadEventDetails {
    fn byte_len(&self) -> usize {
        let mut size = 0usize;
        size += self.num_values_per_node.byte_len();
        size += self.start_time.byte_len();
        size += self.end_time.byte_len();
        size += self.filter.byte_len();
        size
    }
    #[allow(unused_variables)]
    fn encode<S: std::io::Write>(
        &self,
        stream: &mut S,
    ) -> crate::types::EncodingResult<usize> {
        let mut size = 0usize;
        size += self.num_values_per_node.encode(stream)?;
        size += self.start_time.encode(stream)?;
        size += self.end_time.encode(stream)?;
        size += self.filter.encode(stream)?;
        Ok(size)
    }
    #[allow(unused_variables)]
    fn decode<S: std::io::Read>(
        stream: &mut S,
        decoding_options: &crate::types::DecodingOptions,
    ) -> crate::types::EncodingResult<Self> {
        let num_values_per_node = <u32 as crate::types::BinaryEncoder>::decode(
            stream,
            decoding_options,
        )?;
        let start_time = <crate::types::date_time::DateTime as crate::types::BinaryEncoder>::decode(
            stream,
            decoding_options,
        )?;
        let end_time = <crate::types::date_time::DateTime as crate::types::BinaryEncoder>::decode(
            stream,
            decoding_options,
        )?;
        let filter = <super::event_filter::EventFilter as crate::types::BinaryEncoder>::decode(
            stream,
            decoding_options,
        )?;
        Ok(Self {
            num_values_per_node,
            start_time,
            end_time,
            filter,
        })
    }
}
