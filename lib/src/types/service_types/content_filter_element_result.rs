// OPCUA for Rust
// SPDX-License-Identifier: MPL-2.0
// Copyright (C) 2017-2024 Adam Lock, Einar Omang
//
// This file was autogenerated from tools/schema/schemas/1.0.4/Opc.Ua.Types.bsd by opcua-codegen
//
// DO NOT EDIT THIS FILE
#[derive(Debug, Clone, PartialEq, Default)]
pub struct ContentFilterElementResult {
    pub status_code: crate::types::status_code::StatusCode,
    pub operand_status_codes: Option<Vec<crate::types::status_code::StatusCode>>,
    pub operand_diagnostic_infos: Option<Vec<crate::types::diagnostic_info::DiagnosticInfo>>,
}
impl crate::types::MessageInfo for ContentFilterElementResult {
    fn object_id(&self) -> crate::types::ObjectId {
        crate::types::ObjectId::ContentFilterElementResult_Encoding_DefaultBinary
    }
}
impl crate::types::BinaryEncoder<ContentFilterElementResult> for ContentFilterElementResult {
    fn byte_len(&self) -> usize {
        let mut size = 0usize;
        size += self.status_code.byte_len();
        size += self.operand_status_codes.byte_len();
        size += self.operand_diagnostic_infos.byte_len();
        size
    }
    #[allow(unused_variables)]
    fn encode<S: std::io::Write>(&self, stream: &mut S) -> crate::types::EncodingResult<usize> {
        let mut size = 0usize;
        size += self.status_code.encode(stream)?;
        size += self.operand_status_codes.encode(stream)?;
        size += self.operand_diagnostic_infos.encode(stream)?;
        Ok(size)
    }
    #[allow(unused_variables)]
    fn decode<S: std::io::Read>(
        stream: &mut S,
        decoding_options: &crate::types::DecodingOptions,
    ) -> crate::types::EncodingResult<Self> {
        let status_code = <crate::types::status_code::StatusCode as crate::types::BinaryEncoder<
            crate::types::status_code::StatusCode,
        >>::decode(stream, decoding_options)?;
        let operand_status_codes =
            <Option<Vec<crate::types::status_code::StatusCode>> as crate::types::BinaryEncoder<
                Option<Vec<crate::types::status_code::StatusCode>>,
            >>::decode(stream, decoding_options)?;
        let operand_diagnostic_infos = <Option<
            Vec<crate::types::diagnostic_info::DiagnosticInfo>,
        > as crate::types::BinaryEncoder<
            Option<Vec<crate::types::diagnostic_info::DiagnosticInfo>>,
        >>::decode(stream, decoding_options)?;
        Ok(Self {
            status_code,
            operand_status_codes,
            operand_diagnostic_infos,
        })
    }
}
