// OPCUA for Rust
// SPDX-License-Identifier: MPL-2.0
// Copyright (C) 2017-2024 Adam Lock, Einar Omang
//
// This file was autogenerated from tools/schema/schemas/1.0.4/Opc.Ua.Types.bsd by opcua-codegen
//
// DO NOT EDIT THIS FILE
#[derive(Debug, Clone, PartialEq)]
#[derive(Default)]
pub struct AggregateFilterResult {
    pub revised_start_time: crate::types::date_time::DateTime,
    pub revised_processing_interval: f64,
    pub revised_aggregate_configuration: super::aggregate_configuration::AggregateConfiguration,
}
impl crate::types::BinaryEncoder for AggregateFilterResult {
    fn byte_len(&self) -> usize {
        let mut size = 0usize;
        size += self.revised_start_time.byte_len();
        size += self.revised_processing_interval.byte_len();
        size += self.revised_aggregate_configuration.byte_len();
        size
    }
    #[allow(unused_variables)]
    fn encode<S: std::io::Write>(
        &self,
        stream: &mut S,
    ) -> crate::types::EncodingResult<usize> {
        let mut size = 0usize;
        size += self.revised_start_time.encode(stream)?;
        size += self.revised_processing_interval.encode(stream)?;
        size += self.revised_aggregate_configuration.encode(stream)?;
        Ok(size)
    }
    #[allow(unused_variables)]
    fn decode<S: std::io::Read>(
        stream: &mut S,
        decoding_options: &crate::types::DecodingOptions,
    ) -> crate::types::EncodingResult<Self> {
        let revised_start_time = <crate::types::date_time::DateTime as crate::types::BinaryEncoder>::decode(
            stream,
            decoding_options,
        )?;
        let revised_processing_interval = <f64 as crate::types::BinaryEncoder>::decode(
            stream,
            decoding_options,
        )?;
        let revised_aggregate_configuration = <super::aggregate_configuration::AggregateConfiguration as crate::types::BinaryEncoder>::decode(
            stream,
            decoding_options,
        )?;
        Ok(Self {
            revised_start_time,
            revised_processing_interval,
            revised_aggregate_configuration,
        })
    }
}
