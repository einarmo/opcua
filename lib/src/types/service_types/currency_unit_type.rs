// OPCUA for Rust
// SPDX-License-Identifier: MPL-2.0
// Copyright (C) 2017-2024 Adam Lock, Einar Omang
//
// This file was autogenerated from tools/schema/schemas/1.0.4/Opc.Ua.Types.bsd by opcua-codegen
//
// DO NOT EDIT THIS FILE
#[derive(Debug, Clone, PartialEq)]
#[derive(Default)]
pub struct CurrencyUnitType {
    pub numeric_code: i16,
    pub exponent: i8,
    pub alphabetic_code: crate::types::string::UAString,
    pub currency: crate::types::localized_text::LocalizedText,
}
impl crate::types::MessageInfo for CurrencyUnitType {
    fn object_id(&self) -> crate::types::ObjectId {
        crate::types::ObjectId::CurrencyUnitType_Encoding_DefaultBinary
    }
}
impl crate::types::BinaryEncoder<CurrencyUnitType> for CurrencyUnitType {
    fn byte_len(&self) -> usize {
        let mut size = 0usize;
        size += self.numeric_code.byte_len();
        size += self.exponent.byte_len();
        size += self.alphabetic_code.byte_len();
        size += self.currency.byte_len();
        size
    }
    #[allow(unused_variables)]
    fn encode<S: std::io::Write>(
        &self,
        stream: &mut S,
    ) -> crate::types::EncodingResult<usize> {
        let mut size = 0usize;
        size += self.numeric_code.encode(stream)?;
        size += self.exponent.encode(stream)?;
        size += self.alphabetic_code.encode(stream)?;
        size += self.currency.encode(stream)?;
        Ok(size)
    }
    #[allow(unused_variables)]
    fn decode<S: std::io::Read>(
        stream: &mut S,
        decoding_options: &crate::types::DecodingOptions,
    ) -> crate::types::EncodingResult<Self> {
        let numeric_code = <i16 as crate::types::BinaryEncoder<
            i16,
        >>::decode(stream, decoding_options)?;
        let exponent = <i8 as crate::types::BinaryEncoder<
            i8,
        >>::decode(stream, decoding_options)?;
        let alphabetic_code = <crate::types::string::UAString as crate::types::BinaryEncoder<
            crate::types::string::UAString,
        >>::decode(stream, decoding_options)?;
        let currency = <crate::types::localized_text::LocalizedText as crate::types::BinaryEncoder<
            crate::types::localized_text::LocalizedText,
        >>::decode(stream, decoding_options)?;
        Ok(Self {
            numeric_code,
            exponent,
            alphabetic_code,
            currency,
        })
    }
}
