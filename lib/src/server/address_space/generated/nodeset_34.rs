// OPCUA for Rust
// SPDX-License-Identifier: MPL-2.0
// Copyright (C) 2017-2024 Adam Lock, Einar Omang
//
// This file was autogenerated from tools/schema/schemas/1.0.4/Opc.Ua.NodeSet2.xml by opcua-codegen
//
// DO NOT EDIT THIS FILE
pub(super) fn imported_nodes<'a>(
    ns_map: &'a crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> Box<dyn Iterator<Item = crate::server::address_space::ImportedItem> + 'a> {
    Box::new(
        [
            &make_variable_3725
                as &dyn Fn(_) -> crate::server::address_space::ImportedItem,
            &make_variable_3726,
            &make_variable_3727,
            &make_variable_3728,
            &make_variable_3729,
            &make_variable_3730,
            &make_variable_3731,
            &make_variable_3732,
            &make_variable_3733,
            &make_variable_3734,
            &make_variable_3735,
            &make_variable_3736,
            &make_variable_3737,
            &make_variable_3738,
            &make_variable_3739,
            &make_variable_374,
            &make_variable_3740,
            &make_variable_3741,
            &make_variable_3742,
            &make_variable_3743,
            &make_variable_3744,
            &make_variable_3745,
            &make_variable_3746,
            &make_variable_3747,
            &make_variable_3748,
            &make_variable_3749,
            &make_variable_375,
            &make_variable_3750,
            &make_variable_3751,
            &make_variable_3752,
            &make_variable_3753,
            &make_variable_3754,
            &make_variable_3755,
            &make_variable_3756,
            &make_variable_3757,
            &make_variable_3758,
            &make_variable_3759,
            &make_variable_376,
            &make_variable_3760,
            &make_variable_3761,
            &make_variable_3762,
            &make_variable_3763,
            &make_variable_3764,
            &make_variable_3765,
            &make_variable_3766,
            &make_variable_3767,
            &make_variable_3768,
            &make_variable_3769,
            &make_variable_377,
            &make_variable_3770,
            &make_variable_3771,
            &make_variable_3772,
            &make_variable_3773,
            &make_variable_3774,
            &make_variable_3775,
            &make_variable_3776,
            &make_variable_3777,
            &make_variable_3778,
            &make_variable_3779,
            &make_variable_378,
            &make_variable_3780,
            &make_variable_3781,
            &make_variable_3782,
            &make_variable_3783,
            &make_variable_3784,
            &make_variable_3785,
            &make_variable_3786,
            &make_variable_3787,
            &make_variable_3788,
            &make_variable_3789,
            &make_variable_3790,
            &make_variable_3791,
            &make_variable_3792,
            &make_variable_3793,
            &make_variable_3794,
            &make_variable_3795,
            &make_variable_3796,
            &make_variable_3797,
            &make_variable_3798,
            &make_variable_3799,
            &make_variable_380,
            &make_variable_3800,
            &make_variable_3801,
            &make_variable_3802,
            &make_variable_3803,
            &make_variable_3804,
            &make_variable_3805,
            &make_variable_3806,
            &make_variable_3807,
            &make_variable_3808,
            &make_variable_3809,
            &make_variable_381,
            &make_variable_3810,
            &make_variable_3811,
            &make_variable_3812,
            &make_variable_3813,
            &make_variable_3814,
            &make_variable_3815,
            &make_variable_3816,
            &make_variable_3817,
        ]
            .into_iter()
            .map(|f| f(ns_map)),
    )
}
#[allow(unused)]
fn make_variable_3725(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 14829u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "KeyValuePair"),
                    crate::types::LocalizedText::new("", "KeyValuePair"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from("//xs:element[@name='KeyValuePair']"),
                ),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 69u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8252u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_3726(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17542u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "AdditionalParametersType"),
                    crate::types::LocalizedText::new("", "AdditionalParametersType"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        "//xs:element[@name='AdditionalParametersType']",
                    ),
                ),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 69u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8252u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_3727(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17554u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "EphemeralKeyType"),
                    crate::types::LocalizedText::new("", "EphemeralKeyType"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from("//xs:element[@name='EphemeralKeyType']"),
                ),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 69u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8252u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_3728(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 16024u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "EndpointType"),
                    crate::types::LocalizedText::new("", "EndpointType"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from("//xs:element[@name='EndpointType']"),
                ),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 69u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8252u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_3729(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 18860u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "RationalNumber"),
                    crate::types::LocalizedText::new("", "RationalNumber"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from("//xs:element[@name='RationalNumber']"),
                ),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 69u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8252u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_3730(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 18863u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "Vector"),
                    crate::types::LocalizedText::new("", "Vector"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from("//xs:element[@name='Vector']"),
                ),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 69u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8252u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_3731(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 18866u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "3DVector"),
                    crate::types::LocalizedText::new("", "3DVector"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from("//xs:element[@name='ThreeDVector']"),
                ),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 69u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8252u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_3732(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 18869u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "CartesianCoordinates"),
                    crate::types::LocalizedText::new("", "CartesianCoordinates"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        "//xs:element[@name='CartesianCoordinates']",
                    ),
                ),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 69u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8252u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_3733(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 19049u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "3DCartesianCoordinates"),
                    crate::types::LocalizedText::new("", "3DCartesianCoordinates"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        "//xs:element[@name='ThreeDCartesianCoordinates']",
                    ),
                ),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 69u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8252u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_3734(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 19052u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "Orientation"),
                    crate::types::LocalizedText::new("", "Orientation"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from("//xs:element[@name='Orientation']"),
                ),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 69u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8252u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_3735(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 19055u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "3DOrientation"),
                    crate::types::LocalizedText::new("", "3DOrientation"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        "//xs:element[@name='ThreeDOrientation']",
                    ),
                ),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 69u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8252u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_3736(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 19058u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "Frame"),
                    crate::types::LocalizedText::new("", "Frame"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from("//xs:element[@name='Frame']"),
                ),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 69u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8252u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_3737(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 19061u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "3DFrame"),
                    crate::types::LocalizedText::new("", "3DFrame"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from("//xs:element[@name='ThreeDFrame']"),
                ),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 69u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8252u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_3738(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 15730u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "IdentityMappingRuleType"),
                    crate::types::LocalizedText::new("", "IdentityMappingRuleType"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        "//xs:element[@name='IdentityMappingRuleType']",
                    ),
                ),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 69u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8252u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_3739(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 23522u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "CurrencyUnitType"),
                    crate::types::LocalizedText::new("", "CurrencyUnitType"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from("//xs:element[@name='CurrencyUnitType']"),
                ),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 69u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8252u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_374(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 11576u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "Size"),
                    crate::types::LocalizedText::new("", "Size"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 9u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 11575u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_3740(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 12677u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "TrustListDataType"),
                    crate::types::LocalizedText::new("", "TrustListDataType"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        "//xs:element[@name='TrustListDataType']",
                    ),
                ),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 69u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8252u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_3741(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 16027u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "DataTypeSchemaHeader"),
                    crate::types::LocalizedText::new("", "DataTypeSchemaHeader"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        "//xs:element[@name='DataTypeSchemaHeader']",
                    ),
                ),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 69u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8252u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_3742(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 14811u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "DataTypeDescription"),
                    crate::types::LocalizedText::new("", "DataTypeDescription"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        "//xs:element[@name='DataTypeDescription']",
                    ),
                ),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 69u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8252u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_3743(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 15591u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "StructureDescription"),
                    crate::types::LocalizedText::new("", "StructureDescription"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        "//xs:element[@name='StructureDescription']",
                    ),
                ),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 69u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8252u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_3744(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 15594u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "EnumDescription"),
                    crate::types::LocalizedText::new("", "EnumDescription"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from("//xs:element[@name='EnumDescription']"),
                ),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 69u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8252u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_3745(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 15585u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "SimpleTypeDescription"),
                    crate::types::LocalizedText::new("", "SimpleTypeDescription"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        "//xs:element[@name='SimpleTypeDescription']",
                    ),
                ),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 69u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8252u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_3746(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 15588u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "UABinaryFileDataType"),
                    crate::types::LocalizedText::new("", "UABinaryFileDataType"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        "//xs:element[@name='UABinaryFileDataType']",
                    ),
                ),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 69u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8252u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_3747(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 14805u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "DataSetMetaDataType"),
                    crate::types::LocalizedText::new("", "DataSetMetaDataType"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        "//xs:element[@name='DataSetMetaDataType']",
                    ),
                ),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 69u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8252u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_3748(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 14808u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "FieldMetaData"),
                    crate::types::LocalizedText::new("", "FieldMetaData"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from("//xs:element[@name='FieldMetaData']"),
                ),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 69u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8252u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_3749(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 14832u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(
                        0u16,
                        "ConfigurationVersionDataType",
                    ),
                    crate::types::LocalizedText::new("", "ConfigurationVersionDataType"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        "//xs:element[@name='ConfigurationVersionDataType']",
                    ),
                ),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 69u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8252u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_375(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 12686u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "Writable"),
                    crate::types::LocalizedText::new("", "Writable"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 1u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 11575u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_3750(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 16030u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "PublishedDataSetDataType"),
                    crate::types::LocalizedText::new("", "PublishedDataSetDataType"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        "//xs:element[@name='PublishedDataSetDataType']",
                    ),
                ),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 69u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8252u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_3751(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 16033u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(
                        0u16,
                        "PublishedDataSetSourceDataType",
                    ),
                    crate::types::LocalizedText::new(
                        "",
                        "PublishedDataSetSourceDataType",
                    ),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        "//xs:element[@name='PublishedDataSetSourceDataType']",
                    ),
                ),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 69u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8252u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_3752(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 14320u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "PublishedVariableDataType"),
                    crate::types::LocalizedText::new("", "PublishedVariableDataType"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        "//xs:element[@name='PublishedVariableDataType']",
                    ),
                ),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 69u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8252u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_3753(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 16037u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "PublishedDataItemsDataType"),
                    crate::types::LocalizedText::new("", "PublishedDataItemsDataType"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        "//xs:element[@name='PublishedDataItemsDataType']",
                    ),
                ),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 69u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8252u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_3754(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 16040u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "PublishedEventsDataType"),
                    crate::types::LocalizedText::new("", "PublishedEventsDataType"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        "//xs:element[@name='PublishedEventsDataType']",
                    ),
                ),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 69u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8252u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_3755(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 16047u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "DataSetWriterDataType"),
                    crate::types::LocalizedText::new("", "DataSetWriterDataType"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        "//xs:element[@name='DataSetWriterDataType']",
                    ),
                ),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 69u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8252u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_3756(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 16050u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(
                        0u16,
                        "DataSetWriterTransportDataType",
                    ),
                    crate::types::LocalizedText::new(
                        "",
                        "DataSetWriterTransportDataType",
                    ),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        "//xs:element[@name='DataSetWriterTransportDataType']",
                    ),
                ),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 69u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8252u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_3757(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 16053u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(
                        0u16,
                        "DataSetWriterMessageDataType",
                    ),
                    crate::types::LocalizedText::new("", "DataSetWriterMessageDataType"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        "//xs:element[@name='DataSetWriterMessageDataType']",
                    ),
                ),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 69u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8252u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_3758(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 16056u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "PubSubGroupDataType"),
                    crate::types::LocalizedText::new("", "PubSubGroupDataType"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        "//xs:element[@name='PubSubGroupDataType']",
                    ),
                ),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 69u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8252u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_3759(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 21180u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "WriterGroupDataType"),
                    crate::types::LocalizedText::new("", "WriterGroupDataType"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        "//xs:element[@name='WriterGroupDataType']",
                    ),
                ),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 69u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8252u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_376(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 12687u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "UserWritable"),
                    crate::types::LocalizedText::new("", "UserWritable"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 1u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 11575u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_3760(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 16062u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(
                        0u16,
                        "WriterGroupTransportDataType",
                    ),
                    crate::types::LocalizedText::new("", "WriterGroupTransportDataType"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        "//xs:element[@name='WriterGroupTransportDataType']",
                    ),
                ),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 69u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8252u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_3761(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 16065u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "WriterGroupMessageDataType"),
                    crate::types::LocalizedText::new("", "WriterGroupMessageDataType"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        "//xs:element[@name='WriterGroupMessageDataType']",
                    ),
                ),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 69u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8252u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_3762(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 16068u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "PubSubConnectionDataType"),
                    crate::types::LocalizedText::new("", "PubSubConnectionDataType"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        "//xs:element[@name='PubSubConnectionDataType']",
                    ),
                ),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 69u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8252u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_3763(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 16071u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(
                        0u16,
                        "ConnectionTransportDataType",
                    ),
                    crate::types::LocalizedText::new("", "ConnectionTransportDataType"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        "//xs:element[@name='ConnectionTransportDataType']",
                    ),
                ),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 69u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8252u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_3764(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 21183u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "NetworkAddressDataType"),
                    crate::types::LocalizedText::new("", "NetworkAddressDataType"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        "//xs:element[@name='NetworkAddressDataType']",
                    ),
                ),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 69u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8252u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_3765(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 21186u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "NetworkAddressUrlDataType"),
                    crate::types::LocalizedText::new("", "NetworkAddressUrlDataType"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        "//xs:element[@name='NetworkAddressUrlDataType']",
                    ),
                ),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 69u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8252u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_3766(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 21189u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "ReaderGroupDataType"),
                    crate::types::LocalizedText::new("", "ReaderGroupDataType"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        "//xs:element[@name='ReaderGroupDataType']",
                    ),
                ),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 69u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8252u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_3767(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 16077u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(
                        0u16,
                        "ReaderGroupTransportDataType",
                    ),
                    crate::types::LocalizedText::new("", "ReaderGroupTransportDataType"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        "//xs:element[@name='ReaderGroupTransportDataType']",
                    ),
                ),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 69u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8252u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_3768(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 16080u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "ReaderGroupMessageDataType"),
                    crate::types::LocalizedText::new("", "ReaderGroupMessageDataType"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        "//xs:element[@name='ReaderGroupMessageDataType']",
                    ),
                ),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 69u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8252u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_3769(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 16083u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "DataSetReaderDataType"),
                    crate::types::LocalizedText::new("", "DataSetReaderDataType"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        "//xs:element[@name='DataSetReaderDataType']",
                    ),
                ),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 69u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8252u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_377(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 11579u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "OpenCount"),
                    crate::types::LocalizedText::new("", "OpenCount"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 5u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 11575u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_3770(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 16086u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(
                        0u16,
                        "DataSetReaderTransportDataType",
                    ),
                    crate::types::LocalizedText::new(
                        "",
                        "DataSetReaderTransportDataType",
                    ),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        "//xs:element[@name='DataSetReaderTransportDataType']",
                    ),
                ),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 69u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8252u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_3771(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 16089u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(
                        0u16,
                        "DataSetReaderMessageDataType",
                    ),
                    crate::types::LocalizedText::new("", "DataSetReaderMessageDataType"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        "//xs:element[@name='DataSetReaderMessageDataType']",
                    ),
                ),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 69u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8252u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_3772(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 16092u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "SubscribedDataSetDataType"),
                    crate::types::LocalizedText::new("", "SubscribedDataSetDataType"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        "//xs:element[@name='SubscribedDataSetDataType']",
                    ),
                ),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 69u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8252u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_3773(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 16095u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "TargetVariablesDataType"),
                    crate::types::LocalizedText::new("", "TargetVariablesDataType"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        "//xs:element[@name='TargetVariablesDataType']",
                    ),
                ),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 69u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8252u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_3774(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 14835u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "FieldTargetDataType"),
                    crate::types::LocalizedText::new("", "FieldTargetDataType"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        "//xs:element[@name='FieldTargetDataType']",
                    ),
                ),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 69u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8252u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_3775(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 16098u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(
                        0u16,
                        "SubscribedDataSetMirrorDataType",
                    ),
                    crate::types::LocalizedText::new(
                        "",
                        "SubscribedDataSetMirrorDataType",
                    ),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        "//xs:element[@name='SubscribedDataSetMirrorDataType']",
                    ),
                ),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 69u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8252u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_3776(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 21192u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(
                        0u16,
                        "PubSubConfigurationDataType",
                    ),
                    crate::types::LocalizedText::new("", "PubSubConfigurationDataType"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        "//xs:element[@name='PubSubConfigurationDataType']",
                    ),
                ),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 69u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8252u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_3777(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 16104u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(
                        0u16,
                        "UadpWriterGroupMessageDataType",
                    ),
                    crate::types::LocalizedText::new(
                        "",
                        "UadpWriterGroupMessageDataType",
                    ),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        "//xs:element[@name='UadpWriterGroupMessageDataType']",
                    ),
                ),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 69u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8252u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_3778(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 16107u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(
                        0u16,
                        "UadpDataSetWriterMessageDataType",
                    ),
                    crate::types::LocalizedText::new(
                        "",
                        "UadpDataSetWriterMessageDataType",
                    ),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        "//xs:element[@name='UadpDataSetWriterMessageDataType']",
                    ),
                ),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 69u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8252u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_3779(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 16110u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(
                        0u16,
                        "UadpDataSetReaderMessageDataType",
                    ),
                    crate::types::LocalizedText::new(
                        "",
                        "UadpDataSetReaderMessageDataType",
                    ),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        "//xs:element[@name='UadpDataSetReaderMessageDataType']",
                    ),
                ),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 69u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8252u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_378(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 13341u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "MimeType"),
                    crate::types::LocalizedText::new("", "MimeType"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 80u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 11575u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_3780(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 16113u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(
                        0u16,
                        "JsonWriterGroupMessageDataType",
                    ),
                    crate::types::LocalizedText::new(
                        "",
                        "JsonWriterGroupMessageDataType",
                    ),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        "//xs:element[@name='JsonWriterGroupMessageDataType']",
                    ),
                ),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 69u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8252u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_3781(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 16116u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(
                        0u16,
                        "JsonDataSetWriterMessageDataType",
                    ),
                    crate::types::LocalizedText::new(
                        "",
                        "JsonDataSetWriterMessageDataType",
                    ),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        "//xs:element[@name='JsonDataSetWriterMessageDataType']",
                    ),
                ),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 69u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8252u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_3782(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 16119u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(
                        0u16,
                        "JsonDataSetReaderMessageDataType",
                    ),
                    crate::types::LocalizedText::new(
                        "",
                        "JsonDataSetReaderMessageDataType",
                    ),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        "//xs:element[@name='JsonDataSetReaderMessageDataType']",
                    ),
                ),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 69u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8252u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_3783(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17473u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(
                        0u16,
                        "DatagramConnectionTransportDataType",
                    ),
                    crate::types::LocalizedText::new(
                        "",
                        "DatagramConnectionTransportDataType",
                    ),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        "//xs:element[@name='DatagramConnectionTransportDataType']",
                    ),
                ),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 69u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8252u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_3784(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 21195u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(
                        0u16,
                        "DatagramWriterGroupTransportDataType",
                    ),
                    crate::types::LocalizedText::new(
                        "",
                        "DatagramWriterGroupTransportDataType",
                    ),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        "//xs:element[@name='DatagramWriterGroupTransportDataType']",
                    ),
                ),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 69u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8252u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_3785(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 15640u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(
                        0u16,
                        "BrokerConnectionTransportDataType",
                    ),
                    crate::types::LocalizedText::new(
                        "",
                        "BrokerConnectionTransportDataType",
                    ),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        "//xs:element[@name='BrokerConnectionTransportDataType']",
                    ),
                ),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 69u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8252u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_3786(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 16125u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(
                        0u16,
                        "BrokerWriterGroupTransportDataType",
                    ),
                    crate::types::LocalizedText::new(
                        "",
                        "BrokerWriterGroupTransportDataType",
                    ),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        "//xs:element[@name='BrokerWriterGroupTransportDataType']",
                    ),
                ),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 69u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8252u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_3787(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 16144u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(
                        0u16,
                        "BrokerDataSetWriterTransportDataType",
                    ),
                    crate::types::LocalizedText::new(
                        "",
                        "BrokerDataSetWriterTransportDataType",
                    ),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        "//xs:element[@name='BrokerDataSetWriterTransportDataType']",
                    ),
                ),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 69u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8252u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_3788(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 16147u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(
                        0u16,
                        "BrokerDataSetReaderTransportDataType",
                    ),
                    crate::types::LocalizedText::new(
                        "",
                        "BrokerDataSetReaderTransportDataType",
                    ),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        "//xs:element[@name='BrokerDataSetReaderTransportDataType']",
                    ),
                ),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 69u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8252u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_3789(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 23508u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "AliasNameDataType"),
                    crate::types::LocalizedText::new("", "AliasNameDataType"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        "//xs:element[@name='AliasNameDataType']",
                    ),
                ),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 69u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8252u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_3790(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 16127u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "RolePermissionType"),
                    crate::types::LocalizedText::new("", "RolePermissionType"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        "//xs:element[@name='RolePermissionType']",
                    ),
                ),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 69u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8252u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_3791(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 18166u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "DataTypeDefinition"),
                    crate::types::LocalizedText::new("", "DataTypeDefinition"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        "//xs:element[@name='DataTypeDefinition']",
                    ),
                ),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 69u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8252u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_3792(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 18169u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "StructureField"),
                    crate::types::LocalizedText::new("", "StructureField"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from("//xs:element[@name='StructureField']"),
                ),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 69u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8252u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_3793(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 18172u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "StructureDefinition"),
                    crate::types::LocalizedText::new("", "StructureDefinition"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        "//xs:element[@name='StructureDefinition']",
                    ),
                ),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 69u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8252u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_3794(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 18175u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "EnumDefinition"),
                    crate::types::LocalizedText::new("", "EnumDefinition"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from("//xs:element[@name='EnumDefinition']"),
                ),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 69u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8252u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_3795(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 8285u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "Argument"),
                    crate::types::LocalizedText::new("", "Argument"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from("//xs:element[@name='Argument']"),
                ),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 69u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8252u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_3796(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 8291u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "EnumValueType"),
                    crate::types::LocalizedText::new("", "EnumValueType"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from("//xs:element[@name='EnumValueType']"),
                ),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 69u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8252u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_3797(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 14826u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "EnumField"),
                    crate::types::LocalizedText::new("", "EnumField"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from("//xs:element[@name='EnumField']"),
                ),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 69u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8252u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_3798(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 12759u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "OptionSet"),
                    crate::types::LocalizedText::new("", "OptionSet"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from("//xs:element[@name='OptionSet']"),
                ),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 69u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8252u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_3799(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 12762u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "Union"),
                    crate::types::LocalizedText::new("", "Union"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from("//xs:element[@name='Union']"),
                ),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 69u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8252u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_380(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 11581u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "InputArguments"),
                    crate::types::LocalizedText::new("", "InputArguments"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 296u32),
                false,
                1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        vec![
                            crate ::types::ExtensionObject::from_message(& crate
                            ::types::Argument { array_dimensions : None, data_type :
                            crate ::types::NodeId::new(0u16, 3u32), description :
                            Default::default(), name : "Mode".into(), value_rank : -
                            1i32, }),
                        ],
                    ),
                ),
                1u8,
                1u8,
                Some(vec![0u32]),
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 11580u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_3800(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 8918u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "TimeZoneDataType"),
                    crate::types::LocalizedText::new("", "TimeZoneDataType"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from("//xs:element[@name='TimeZoneDataType']"),
                ),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 69u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8252u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_3801(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 8300u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "ApplicationDescription"),
                    crate::types::LocalizedText::new("", "ApplicationDescription"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        "//xs:element[@name='ApplicationDescription']",
                    ),
                ),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 69u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8252u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_3802(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 12201u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "ServerOnNetwork"),
                    crate::types::LocalizedText::new("", "ServerOnNetwork"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from("//xs:element[@name='ServerOnNetwork']"),
                ),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 69u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8252u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_3803(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 8297u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "UserTokenPolicy"),
                    crate::types::LocalizedText::new("", "UserTokenPolicy"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from("//xs:element[@name='UserTokenPolicy']"),
                ),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 69u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8252u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_3804(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 8303u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "EndpointDescription"),
                    crate::types::LocalizedText::new("", "EndpointDescription"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        "//xs:element[@name='EndpointDescription']",
                    ),
                ),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 69u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8252u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_3805(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 8417u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "RegisteredServer"),
                    crate::types::LocalizedText::new("", "RegisteredServer"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from("//xs:element[@name='RegisteredServer']"),
                ),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 69u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8252u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_3806(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 12894u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "DiscoveryConfiguration"),
                    crate::types::LocalizedText::new("", "DiscoveryConfiguration"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        "//xs:element[@name='DiscoveryConfiguration']",
                    ),
                ),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 69u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8252u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_3807(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 12897u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "MdnsDiscoveryConfiguration"),
                    crate::types::LocalizedText::new("", "MdnsDiscoveryConfiguration"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        "//xs:element[@name='MdnsDiscoveryConfiguration']",
                    ),
                ),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 69u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8252u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_3808(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 8333u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "SignedSoftwareCertificate"),
                    crate::types::LocalizedText::new("", "SignedSoftwareCertificate"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        "//xs:element[@name='SignedSoftwareCertificate']",
                    ),
                ),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 69u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8252u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_3809(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 8306u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "UserIdentityToken"),
                    crate::types::LocalizedText::new("", "UserIdentityToken"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        "//xs:element[@name='UserIdentityToken']",
                    ),
                ),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 69u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8252u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_381(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 11582u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "OutputArguments"),
                    crate::types::LocalizedText::new("", "OutputArguments"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 296u32),
                false,
                1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        vec![
                            crate ::types::ExtensionObject::from_message(& crate
                            ::types::Argument { array_dimensions : None, data_type :
                            crate ::types::NodeId::new(0u16, 7u32), description :
                            Default::default(), name : "FileHandle".into(), value_rank :
                            - 1i32, }),
                        ],
                    ),
                ),
                1u8,
                1u8,
                Some(vec![0u32]),
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 11580u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_3810(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 8309u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "AnonymousIdentityToken"),
                    crate::types::LocalizedText::new("", "AnonymousIdentityToken"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        "//xs:element[@name='AnonymousIdentityToken']",
                    ),
                ),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 69u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8252u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_3811(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 8312u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "UserNameIdentityToken"),
                    crate::types::LocalizedText::new("", "UserNameIdentityToken"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        "//xs:element[@name='UserNameIdentityToken']",
                    ),
                ),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 69u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8252u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_3812(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 8315u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "X509IdentityToken"),
                    crate::types::LocalizedText::new("", "X509IdentityToken"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        "//xs:element[@name='X509IdentityToken']",
                    ),
                ),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 69u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8252u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_3813(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 8318u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "IssuedIdentityToken"),
                    crate::types::LocalizedText::new("", "IssuedIdentityToken"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        "//xs:element[@name='IssuedIdentityToken']",
                    ),
                ),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 69u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8252u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_3814(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 8363u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "AddNodesItem"),
                    crate::types::LocalizedText::new("", "AddNodesItem"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from("//xs:element[@name='AddNodesItem']"),
                ),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 69u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8252u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_3815(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 8366u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "AddReferencesItem"),
                    crate::types::LocalizedText::new("", "AddReferencesItem"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        "//xs:element[@name='AddReferencesItem']",
                    ),
                ),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 69u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8252u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_3816(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 8369u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "DeleteNodesItem"),
                    crate::types::LocalizedText::new("", "DeleteNodesItem"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from("//xs:element[@name='DeleteNodesItem']"),
                ),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 69u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8252u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_3817(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 8372u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "DeleteReferencesItem"),
                    crate::types::LocalizedText::new("", "DeleteReferencesItem"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        "//xs:element[@name='DeleteReferencesItem']",
                    ),
                ),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 69u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8252u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
