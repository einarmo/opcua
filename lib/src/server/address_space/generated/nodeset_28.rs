// OPCUA for Rust
// SPDX-License-Identifier: MPL-2.0
// Copyright (C) 2017-2024 Adam Lock, Einar Omang
//
// This file was autogenerated from tools/schema/schemas/1.0.4/Opc.Ua.NodeSet2.xml by opcua-codegen
//
// DO NOT EDIT THIS FILE
pub(super) fn imported_nodes<'a>(
    ns_map: &'a crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> Box<dyn Iterator<Item = crate::server::address_space::ImportedItem> + 'a> {
    Box::new(
        [
            &make_variable_2740
                as &dyn Fn(_) -> crate::server::address_space::ImportedItem,
            &make_variable_2741,
            &make_variable_2743,
            &make_variable_2744,
            &make_variable_2745,
            &make_variable_2746,
            &make_variable_2748,
            &make_variable_2749,
            &make_variable_275,
            &make_variable_2751,
            &make_variable_2758,
            &make_variable_2759,
            &make_variable_276,
            &make_variable_2760,
            &make_variable_2761,
            &make_variable_2762,
            &make_variable_2763,
            &make_variable_2764,
            &make_variable_2765,
            &make_variable_2766,
            &make_variable_2768,
            &make_variable_277,
            &make_variable_2771,
            &make_variable_2772,
            &make_variable_2773,
            &make_variable_2774,
            &make_variable_2775,
            &make_variable_2776,
            &make_variable_2777,
            &make_variable_2778,
            &make_variable_2779,
            &make_variable_278,
            &make_variable_2781,
            &make_variable_2783,
            &make_variable_2784,
            &make_variable_2785,
            &make_variable_2786,
            &make_variable_2787,
            &make_variable_2788,
            &make_variable_2789,
            &make_variable_279,
            &make_variable_2790,
            &make_variable_2791,
            &make_variable_2792,
            &make_variable_2793,
            &make_variable_2794,
            &make_variable_2795,
            &make_variable_2796,
            &make_variable_2797,
            &make_variable_2798,
            &make_variable_2799,
            &make_variable_280,
            &make_variable_2800,
            &make_variable_2801,
            &make_variable_2802,
            &make_variable_2803,
            &make_variable_2804,
            &make_variable_2805,
            &make_variable_2806,
            &make_variable_2807,
            &make_variable_2808,
            &make_variable_2809,
            &make_variable_281,
            &make_variable_2810,
            &make_variable_2812,
            &make_variable_2813,
            &make_variable_2814,
            &make_variable_2815,
            &make_variable_2819,
            &make_variable_282,
            &make_variable_2820,
            &make_variable_2822,
            &make_variable_2828,
            &make_variable_2829,
            &make_variable_283,
            &make_variable_2830,
            &make_variable_2831,
            &make_variable_2835,
            &make_variable_2837,
            &make_variable_2838,
            &make_variable_2839,
            &make_variable_284,
            &make_variable_2840,
            &make_variable_2841,
            &make_variable_2842,
            &make_variable_2843,
            &make_variable_2844,
            &make_variable_2845,
            &make_variable_2847,
            &make_variable_2849,
            &make_variable_285,
            &make_variable_2850,
            &make_variable_2851,
            &make_variable_2852,
            &make_variable_2853,
            &make_variable_2854,
            &make_variable_2855,
            &make_variable_2856,
            &make_variable_2857,
            &make_variable_2858,
        ]
            .into_iter()
            .map(|f| f(ns_map)),
    )
}
#[allow(unused)]
fn make_variable_2740(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17902u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "Classification"),
                    crate::types::LocalizedText::new("", "Classification"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 19730u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(crate::types::Variant::from(1i32)),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17900u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2741(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17903u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "DiagnosticsLevel"),
                    crate::types::LocalizedText::new("", "DiagnosticsLevel"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 19723u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(crate::types::Variant::from(1i32)),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17900u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2743(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17913u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "ConfiguredDataSetWriters"),
                    crate::types::LocalizedText::new("", "ConfiguredDataSetWriters"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 5u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17920u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 63u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17858u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2744(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17920u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "DiagnosticsLevel"),
                    crate::types::LocalizedText::new("", "DiagnosticsLevel"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 19723u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(crate::types::Variant::from(0i32)),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17913u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2745(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17927u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "OperationalDataSetWriters"),
                    crate::types::LocalizedText::new("", "OperationalDataSetWriters"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 5u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17934u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 63u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17858u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2746(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17934u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "DiagnosticsLevel"),
                    crate::types::LocalizedText::new("", "DiagnosticsLevel"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 19723u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(crate::types::Variant::from(0i32)),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17927u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2748(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17976u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "InputArguments"),
                    crate::types::LocalizedText::new("", "InputArguments"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 296u32),
                false,
                1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        vec![
                            crate ::types::ExtensionObject::from_message(& crate
                            ::types::Argument { array_dimensions : None, data_type :
                            crate ::types::NodeId::new(0u16, 15597u32), description :
                            Default::default(), name : "Configuration".into(), value_rank
                            : - 1i32, }),
                        ],
                    ),
                ),
                1u8,
                1u8,
                Some(vec![0u32]),
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17969u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2749(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17987u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "OutputArguments"),
                    crate::types::LocalizedText::new("", "OutputArguments"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 296u32),
                false,
                1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        vec![
                            crate ::types::ExtensionObject::from_message(& crate
                            ::types::Argument { array_dimensions : None, data_type :
                            crate ::types::NodeId::new(0u16, 17u32), description :
                            Default::default(), name : "DataSetWriterNodeId".into(),
                            value_rank : - 1i32, }),
                        ],
                    ),
                ),
                1u8,
                1u8,
                Some(vec![0u32]),
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17969u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_275(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 12134u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "DeleteReferencesCount"),
                    crate::types::LocalizedText::new("", "DeleteReferencesCount"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 871u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 63u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12098u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2751(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17993u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "InputArguments"),
                    crate::types::LocalizedText::new("", "InputArguments"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 296u32),
                false,
                1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        vec![
                            crate ::types::ExtensionObject::from_message(& crate
                            ::types::Argument { array_dimensions : None, data_type :
                            crate ::types::NodeId::new(0u16, 17u32), description :
                            Default::default(), name : "DataSetWriterNodeId".into(),
                            value_rank : - 1i32, }),
                        ],
                    ),
                ),
                1u8,
                1u8,
                Some(vec![0u32]),
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17992u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2758(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 18077u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "PublisherId"),
                    crate::types::LocalizedText::new("", "PublisherId"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 24u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 18076u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2759(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 18078u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "WriterGroupId"),
                    crate::types::LocalizedText::new("", "WriterGroupId"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 5u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 18076u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_276(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 12135u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "BrowseCount"),
                    crate::types::LocalizedText::new("", "BrowseCount"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 871u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 63u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12098u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2760(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 18079u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "DataSetWriterId"),
                    crate::types::LocalizedText::new("", "DataSetWriterId"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 5u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 18076u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2761(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 18080u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "DataSetMetaData"),
                    crate::types::LocalizedText::new("", "DataSetMetaData"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 14523u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 18076u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2762(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 18081u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "DataSetFieldContentMask"),
                    crate::types::LocalizedText::new("", "DataSetFieldContentMask"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 15583u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 18076u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2763(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 18082u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "MessageReceiveTimeout"),
                    crate::types::LocalizedText::new("", "MessageReceiveTimeout"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 290u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 18076u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2764(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17560u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "KeyFrameCount"),
                    crate::types::LocalizedText::new("", "KeyFrameCount"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 7u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 18076u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2765(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17562u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "HeaderLayoutUri"),
                    crate::types::LocalizedText::new("", "HeaderLayoutUri"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 18076u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2766(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17492u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "DataSetReaderProperties"),
                    crate::types::LocalizedText::new("", "DataSetReaderProperties"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 14533u32),
                false,
                1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                Some(vec![0u32]),
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 18076u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2768(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 18089u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "State"),
                    crate::types::LocalizedText::new("", "State"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 14647u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 63u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 18088u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_277(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 12136u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "BrowseNextCount"),
                    crate::types::LocalizedText::new("", "BrowseNextCount"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 871u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 63u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12098u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2771(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 21016u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "DiagnosticsLevel"),
                    crate::types::LocalizedText::new("", "DiagnosticsLevel"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 19723u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 63u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21015u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2772(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 21017u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "TotalInformation"),
                    crate::types::LocalizedText::new("", "TotalInformation"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 7u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21018u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21019u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21020u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19725u32), type_id : crate
            ::types::NodeId::new(0u16, 40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21015u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2773(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 21018u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "Active"),
                    crate::types::LocalizedText::new("", "Active"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 1u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21017u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2774(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 21019u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "Classification"),
                    crate::types::LocalizedText::new("", "Classification"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 19730u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21017u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2775(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 21020u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "DiagnosticsLevel"),
                    crate::types::LocalizedText::new("", "DiagnosticsLevel"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 19723u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21017u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2776(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 21022u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "TotalError"),
                    crate::types::LocalizedText::new("", "TotalError"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 7u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21023u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21024u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21025u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19725u32), type_id : crate
            ::types::NodeId::new(0u16, 40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21015u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2777(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 21023u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "Active"),
                    crate::types::LocalizedText::new("", "Active"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 1u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21022u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2778(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 21024u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "Classification"),
                    crate::types::LocalizedText::new("", "Classification"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 19730u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21022u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2779(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 21025u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "DiagnosticsLevel"),
                    crate::types::LocalizedText::new("", "DiagnosticsLevel"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 19723u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21022u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_278(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 12137u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(
                        0u16,
                        "TranslateBrowsePathsToNodeIdsCount",
                    ),
                    crate::types::LocalizedText::new(
                        "",
                        "TranslateBrowsePathsToNodeIdsCount",
                    ),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 871u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 63u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12098u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2781(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 21028u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "SubError"),
                    crate::types::LocalizedText::new("", "SubError"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 1u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 63u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21015u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2783(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 21030u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "StateError"),
                    crate::types::LocalizedText::new("", "StateError"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 7u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21031u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21032u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21033u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19725u32), type_id : crate
            ::types::NodeId::new(0u16, 40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21029u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2784(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 21031u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "Active"),
                    crate::types::LocalizedText::new("", "Active"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 1u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21030u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2785(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 21032u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "Classification"),
                    crate::types::LocalizedText::new("", "Classification"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 19730u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(crate::types::Variant::from(1i32)),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21030u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2786(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 21033u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "DiagnosticsLevel"),
                    crate::types::LocalizedText::new("", "DiagnosticsLevel"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 19723u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(crate::types::Variant::from(0i32)),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21030u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2787(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 21035u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "StateOperationalByMethod"),
                    crate::types::LocalizedText::new("", "StateOperationalByMethod"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 7u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21036u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21037u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21038u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19725u32), type_id : crate
            ::types::NodeId::new(0u16, 40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21029u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2788(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 21036u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "Active"),
                    crate::types::LocalizedText::new("", "Active"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 1u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21035u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2789(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 21037u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "Classification"),
                    crate::types::LocalizedText::new("", "Classification"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 19730u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(crate::types::Variant::from(0i32)),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21035u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_279(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 12138u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "QueryFirstCount"),
                    crate::types::LocalizedText::new("", "QueryFirstCount"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 871u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 63u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12098u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2790(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 21038u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "DiagnosticsLevel"),
                    crate::types::LocalizedText::new("", "DiagnosticsLevel"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 19723u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(crate::types::Variant::from(0i32)),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21035u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2791(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 21040u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "StateOperationalByParent"),
                    crate::types::LocalizedText::new("", "StateOperationalByParent"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 7u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21041u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21042u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21043u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19725u32), type_id : crate
            ::types::NodeId::new(0u16, 40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21029u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2792(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 21041u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "Active"),
                    crate::types::LocalizedText::new("", "Active"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 1u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21040u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2793(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 21042u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "Classification"),
                    crate::types::LocalizedText::new("", "Classification"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 19730u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(crate::types::Variant::from(0i32)),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21040u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2794(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 21043u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "DiagnosticsLevel"),
                    crate::types::LocalizedText::new("", "DiagnosticsLevel"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 19723u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(crate::types::Variant::from(0i32)),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21040u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2795(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 21045u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "StateOperationalFromError"),
                    crate::types::LocalizedText::new("", "StateOperationalFromError"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 7u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21046u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21047u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21048u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19725u32), type_id : crate
            ::types::NodeId::new(0u16, 40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21029u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2796(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 21046u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "Active"),
                    crate::types::LocalizedText::new("", "Active"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 1u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21045u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2797(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 21047u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "Classification"),
                    crate::types::LocalizedText::new("", "Classification"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 19730u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(crate::types::Variant::from(0i32)),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21045u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2798(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 21048u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "DiagnosticsLevel"),
                    crate::types::LocalizedText::new("", "DiagnosticsLevel"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 19723u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(crate::types::Variant::from(0i32)),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21045u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2799(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 21050u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "StatePausedByParent"),
                    crate::types::LocalizedText::new("", "StatePausedByParent"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 7u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21051u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21052u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21053u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19725u32), type_id : crate
            ::types::NodeId::new(0u16, 40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21029u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_280(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 12139u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "QueryNextCount"),
                    crate::types::LocalizedText::new("", "QueryNextCount"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 871u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 63u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12098u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2800(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 21051u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "Active"),
                    crate::types::LocalizedText::new("", "Active"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 1u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21050u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2801(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 21052u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "Classification"),
                    crate::types::LocalizedText::new("", "Classification"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 19730u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(crate::types::Variant::from(0i32)),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21050u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2802(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 21053u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "DiagnosticsLevel"),
                    crate::types::LocalizedText::new("", "DiagnosticsLevel"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 19723u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(crate::types::Variant::from(0i32)),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21050u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2803(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 21055u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "StateDisabledByMethod"),
                    crate::types::LocalizedText::new("", "StateDisabledByMethod"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 7u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21056u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21057u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21058u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19725u32), type_id : crate
            ::types::NodeId::new(0u16, 40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21029u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2804(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 21056u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "Active"),
                    crate::types::LocalizedText::new("", "Active"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 1u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21055u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2805(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 21057u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "Classification"),
                    crate::types::LocalizedText::new("", "Classification"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 19730u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(crate::types::Variant::from(0i32)),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21055u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2806(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 21058u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "DiagnosticsLevel"),
                    crate::types::LocalizedText::new("", "DiagnosticsLevel"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 19723u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(crate::types::Variant::from(0i32)),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21055u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2807(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 21061u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "ReceivedNetworkMessages"),
                    crate::types::LocalizedText::new("", "ReceivedNetworkMessages"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 7u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21062u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21063u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21064u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19725u32), type_id : crate
            ::types::NodeId::new(0u16, 40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21029u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2808(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 21062u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "Active"),
                    crate::types::LocalizedText::new("", "Active"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 1u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21061u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2809(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 21063u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "Classification"),
                    crate::types::LocalizedText::new("", "Classification"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 19730u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(crate::types::Variant::from(0i32)),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21061u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_281(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 12140u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "RegisterNodesCount"),
                    crate::types::LocalizedText::new("", "RegisterNodesCount"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 871u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 63u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12098u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2810(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 21064u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "DiagnosticsLevel"),
                    crate::types::LocalizedText::new("", "DiagnosticsLevel"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 19723u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(crate::types::Variant::from(0i32)),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21061u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2812(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 21076u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "ConfiguredDataSetReaders"),
                    crate::types::LocalizedText::new("", "ConfiguredDataSetReaders"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 5u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21077u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 63u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21060u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2813(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 21077u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "DiagnosticsLevel"),
                    crate::types::LocalizedText::new("", "DiagnosticsLevel"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 19723u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(crate::types::Variant::from(0i32)),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21076u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2814(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 21078u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "OperationalDataSetReaders"),
                    crate::types::LocalizedText::new("", "OperationalDataSetReaders"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 5u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21079u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 63u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21060u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2815(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 21079u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "DiagnosticsLevel"),
                    crate::types::LocalizedText::new("", "DiagnosticsLevel"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 19723u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(crate::types::Variant::from(0i32)),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21078u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2819(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 21083u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "InputArguments"),
                    crate::types::LocalizedText::new("", "InputArguments"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 296u32),
                false,
                1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        vec![
                            crate ::types::ExtensionObject::from_message(& crate
                            ::types::Argument { array_dimensions : None, data_type :
                            crate ::types::NodeId::new(0u16, 15623u32), description :
                            Default::default(), name : "Configuration".into(), value_rank
                            : - 1i32, }),
                        ],
                    ),
                ),
                1u8,
                1u8,
                Some(vec![0u32]),
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21082u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_282(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 12141u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "UnregisterNodesCount"),
                    crate::types::LocalizedText::new("", "UnregisterNodesCount"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 871u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 63u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12098u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2820(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 21084u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "OutputArguments"),
                    crate::types::LocalizedText::new("", "OutputArguments"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 296u32),
                false,
                1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        vec![
                            crate ::types::ExtensionObject::from_message(& crate
                            ::types::Argument { array_dimensions : None, data_type :
                            crate ::types::NodeId::new(0u16, 17u32), description :
                            Default::default(), name : "DataSetReaderNodeId".into(),
                            value_rank : - 1i32, }),
                        ],
                    ),
                ),
                1u8,
                1u8,
                Some(vec![0u32]),
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21082u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2822(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 21086u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "InputArguments"),
                    crate::types::LocalizedText::new("", "InputArguments"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 296u32),
                false,
                1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        vec![
                            crate ::types::ExtensionObject::from_message(& crate
                            ::types::Argument { array_dimensions : None, data_type :
                            crate ::types::NodeId::new(0u16, 17u32), description :
                            Default::default(), name : "DataSetReaderNodeId".into(),
                            value_rank : - 1i32, }),
                        ],
                    ),
                ),
                1u8,
                1u8,
                Some(vec![0u32]),
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21085u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2828(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 21092u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "DataSetWriterId"),
                    crate::types::LocalizedText::new("", "DataSetWriterId"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 5u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15298u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2829(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 21093u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "DataSetFieldContentMask"),
                    crate::types::LocalizedText::new("", "DataSetFieldContentMask"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 15583u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15298u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_283(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 12142u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "SessionSecurityDiagnostics"),
                    crate::types::LocalizedText::new("", "SessionSecurityDiagnostics"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 868u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12143u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12144u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12145u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12146u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12147u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12148u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12149u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12150u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12151u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2244u32), type_id : crate
            ::types::NodeId::new(0u16, 40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12097u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2830(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 21094u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "KeyFrameCount"),
                    crate::types::LocalizedText::new("", "KeyFrameCount"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 7u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 80u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15298u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2831(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17493u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "DataSetWriterProperties"),
                    crate::types::LocalizedText::new("", "DataSetWriterProperties"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 14533u32),
                false,
                1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                Some(vec![0u32]),
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15298u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2835(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 15300u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "State"),
                    crate::types::LocalizedText::new("", "State"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 14647u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 63u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15299u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2837(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 19551u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "DiagnosticsLevel"),
                    crate::types::LocalizedText::new("", "DiagnosticsLevel"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 19723u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 63u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19550u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2838(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 19552u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "TotalInformation"),
                    crate::types::LocalizedText::new("", "TotalInformation"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 7u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19553u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19554u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19555u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19725u32), type_id : crate
            ::types::NodeId::new(0u16, 40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19550u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2839(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 19553u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "Active"),
                    crate::types::LocalizedText::new("", "Active"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 1u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19552u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_284(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 12143u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "SessionId"),
                    crate::types::LocalizedText::new("", "SessionId"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 17u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 63u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12142u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2840(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 19554u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "Classification"),
                    crate::types::LocalizedText::new("", "Classification"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 19730u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19552u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2841(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 19555u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "DiagnosticsLevel"),
                    crate::types::LocalizedText::new("", "DiagnosticsLevel"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 19723u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19552u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2842(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 19557u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "TotalError"),
                    crate::types::LocalizedText::new("", "TotalError"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 7u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19558u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19559u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19560u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19725u32), type_id : crate
            ::types::NodeId::new(0u16, 40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19550u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2843(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 19558u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "Active"),
                    crate::types::LocalizedText::new("", "Active"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 1u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19557u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2844(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 19559u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "Classification"),
                    crate::types::LocalizedText::new("", "Classification"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 19730u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19557u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2845(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 19560u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "DiagnosticsLevel"),
                    crate::types::LocalizedText::new("", "DiagnosticsLevel"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 19723u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19557u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2847(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 19563u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "SubError"),
                    crate::types::LocalizedText::new("", "SubError"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 1u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 63u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19550u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2849(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 19565u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "StateError"),
                    crate::types::LocalizedText::new("", "StateError"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 7u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19566u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19567u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19568u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19725u32), type_id : crate
            ::types::NodeId::new(0u16, 40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19564u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_285(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 12144u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "ClientUserIdOfSession"),
                    crate::types::LocalizedText::new("", "ClientUserIdOfSession"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 63u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12142u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2850(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 19566u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "Active"),
                    crate::types::LocalizedText::new("", "Active"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 1u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19565u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2851(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 19567u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "Classification"),
                    crate::types::LocalizedText::new("", "Classification"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 19730u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(crate::types::Variant::from(1i32)),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19565u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2852(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 19568u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "DiagnosticsLevel"),
                    crate::types::LocalizedText::new("", "DiagnosticsLevel"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 19723u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(crate::types::Variant::from(0i32)),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19565u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2853(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 19570u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "StateOperationalByMethod"),
                    crate::types::LocalizedText::new("", "StateOperationalByMethod"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 7u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19571u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19572u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19573u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19725u32), type_id : crate
            ::types::NodeId::new(0u16, 40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19564u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2854(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 19571u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "Active"),
                    crate::types::LocalizedText::new("", "Active"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 1u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19570u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2855(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 19572u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "Classification"),
                    crate::types::LocalizedText::new("", "Classification"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 19730u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(crate::types::Variant::from(0i32)),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19570u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2856(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 19573u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "DiagnosticsLevel"),
                    crate::types::LocalizedText::new("", "DiagnosticsLevel"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 19723u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(crate::types::Variant::from(0i32)),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19570u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2857(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 19575u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "StateOperationalByParent"),
                    crate::types::LocalizedText::new("", "StateOperationalByParent"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 7u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19576u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19577u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19578u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19725u32), type_id : crate
            ::types::NodeId::new(0u16, 40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19564u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2858(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 19576u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "Active"),
                    crate::types::LocalizedText::new("", "Active"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 1u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19575u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
