// OPCUA for Rust
// SPDX-License-Identifier: MPL-2.0
// Copyright (C) 2017-2024 Adam Lock, Einar Omang
//
// This file was autogenerated from tools/schema/schemas/1.0.4/Opc.Ua.NodeSet2.xml by opcua-codegen
//
// DO NOT EDIT THIS FILE
pub(super) fn imported_nodes<'a>(
    ns_map: &'a crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> Box<dyn Iterator<Item = crate::server::address_space::ImportedItem> + 'a> {
    Box::new(
        [
            &make_object_3947 as &dyn Fn(_) -> crate::server::address_space::ImportedItem,
            &make_object_3948,
            &make_object_3949,
            &make_object_3950,
            &make_object_3951,
            &make_object_3952,
            &make_object_3953,
            &make_object_3954,
            &make_object_3955,
            &make_object_3956,
            &make_object_3957,
            &make_object_3958,
            &make_object_3959,
            &make_object_3960,
            &make_object_3961,
            &make_object_3962,
            &make_object_3963,
            &make_object_3964,
            &make_object_3965,
            &make_object_3966,
            &make_object_3967,
            &make_object_3968,
            &make_object_3969,
            &make_object_3970,
            &make_object_3971,
            &make_object_3972,
            &make_object_3973,
            &make_object_3974,
            &make_object_3975,
            &make_object_3976,
            &make_object_3977,
            &make_object_3978,
            &make_object_3979,
            &make_object_3980,
            &make_object_3981,
            &make_object_3982,
            &make_object_3983,
            &make_object_3984,
            &make_object_3985,
            &make_object_3986,
            &make_object_404,
            &make_object_428,
            &make_object_75,
            &make_object_753,
            &make_object_754,
            &make_object_77,
            &make_object_774,
            &make_object_785,
            &make_object_79,
            &make_object_798,
            &make_object_799,
            &make_object_800,
            &make_object_806,
            &make_object_81,
            &make_object_822,
            &make_object_826,
            &make_object_827,
            &make_object_829,
            &make_object_83,
            &make_object_844,
            &make_object_85,
            &make_object_859,
            &make_object_86,
            &make_object_87,
            &make_object_88,
            &make_object_89,
            &make_object_90,
            &make_object_91,
            &make_object_92,
            &make_object_93,
            &make_object_94,
            &make_object_962,
            &make_object_97,
            &make_object_974,
            &make_object_type_1017,
            &make_object_type_1032,
            &make_object_type_1062,
            &make_object_type_1070,
            &make_object_type_1091,
            &make_object_type_1236,
            &make_object_type_1238,
            &make_object_type_1243,
            &make_object_type_1244,
            &make_object_type_1245,
            &make_object_type_1251,
            &make_object_type_1253,
            &make_object_type_130,
            &make_object_type_1310,
            &make_object_type_1340,
            &make_object_type_1356,
            &make_object_type_1373,
            &make_object_type_1432,
            &make_object_type_1468,
            &make_object_type_1492,
            &make_object_type_1501,
            &make_object_type_1518,
            &make_object_type_1527,
            &make_object_type_1550,
            &make_object_type_1551,
            &make_object_type_1552,
        ]
        .into_iter()
        .map(|f| f(ns_map)),
    )
}
#[allow(unused)]
fn make_object_3947(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15172u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "Default JSON"),
                crate::types::LocalizedText::new("", "Default JSON"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 382u32),
                type_id: crate::types::NodeId::new(0u16, 38u32),
                is_forward: false,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 76u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_3948(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15175u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "Default JSON"),
                crate::types::LocalizedText::new("", "Default JSON"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 385u32),
                type_id: crate::types::NodeId::new(0u16, 38u32),
                is_forward: false,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 76u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_3949(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15188u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "Default JSON"),
                crate::types::LocalizedText::new("", "Default JSON"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 537u32),
                type_id: crate::types::NodeId::new(0u16, 38u32),
                is_forward: false,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 76u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_3950(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15189u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "Default JSON"),
                crate::types::LocalizedText::new("", "Default JSON"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 540u32),
                type_id: crate::types::NodeId::new(0u16, 38u32),
                is_forward: false,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 76u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_3951(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15199u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "Default JSON"),
                crate::types::LocalizedText::new("", "Default JSON"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 331u32),
                type_id: crate::types::NodeId::new(0u16, 38u32),
                is_forward: false,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 76u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_3952(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15204u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "Default JSON"),
                crate::types::LocalizedText::new("", "Default JSON"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 583u32),
                type_id: crate::types::NodeId::new(0u16, 38u32),
                is_forward: false,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 76u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_3953(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15205u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "Default JSON"),
                crate::types::LocalizedText::new("", "Default JSON"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 586u32),
                type_id: crate::types::NodeId::new(0u16, 38u32),
                is_forward: false,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 76u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_3954(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15206u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "Default JSON"),
                crate::types::LocalizedText::new("", "Default JSON"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 589u32),
                type_id: crate::types::NodeId::new(0u16, 38u32),
                is_forward: false,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 76u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_3955(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15207u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "Default JSON"),
                crate::types::LocalizedText::new("", "Default JSON"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 592u32),
                type_id: crate::types::NodeId::new(0u16, 38u32),
                is_forward: false,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 76u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_3956(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15208u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "Default JSON"),
                crate::types::LocalizedText::new("", "Default JSON"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 595u32),
                type_id: crate::types::NodeId::new(0u16, 38u32),
                is_forward: false,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 76u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_3957(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15209u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "Default JSON"),
                crate::types::LocalizedText::new("", "Default JSON"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 598u32),
                type_id: crate::types::NodeId::new(0u16, 38u32),
                is_forward: false,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 76u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_3958(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15210u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "Default JSON"),
                crate::types::LocalizedText::new("", "Default JSON"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 601u32),
                type_id: crate::types::NodeId::new(0u16, 38u32),
                is_forward: false,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 76u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_3959(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15273u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "Default JSON"),
                crate::types::LocalizedText::new("", "Default JSON"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 659u32),
                type_id: crate::types::NodeId::new(0u16, 38u32),
                is_forward: false,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 76u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_3960(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15293u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "Default JSON"),
                crate::types::LocalizedText::new("", "Default JSON"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 719u32),
                type_id: crate::types::NodeId::new(0u16, 38u32),
                is_forward: false,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 76u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_3961(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15295u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "Default JSON"),
                crate::types::LocalizedText::new("", "Default JSON"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 725u32),
                type_id: crate::types::NodeId::new(0u16, 38u32),
                is_forward: false,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 76u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_3962(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15304u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "Default JSON"),
                crate::types::LocalizedText::new("", "Default JSON"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 948u32),
                type_id: crate::types::NodeId::new(0u16, 38u32),
                is_forward: false,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 76u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_3963(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15349u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "Default JSON"),
                crate::types::LocalizedText::new("", "Default JSON"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 920u32),
                type_id: crate::types::NodeId::new(0u16, 38u32),
                is_forward: false,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 76u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_3964(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15361u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "Default JSON"),
                crate::types::LocalizedText::new("", "Default JSON"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 338u32),
                type_id: crate::types::NodeId::new(0u16, 38u32),
                is_forward: false,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 76u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_3965(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15362u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "Default JSON"),
                crate::types::LocalizedText::new("", "Default JSON"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 853u32),
                type_id: crate::types::NodeId::new(0u16, 38u32),
                is_forward: false,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 76u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_3966(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15363u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "Default JSON"),
                crate::types::LocalizedText::new("", "Default JSON"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11943u32),
                type_id: crate::types::NodeId::new(0u16, 38u32),
                is_forward: false,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 76u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_3967(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15364u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "Default JSON"),
                crate::types::LocalizedText::new("", "Default JSON"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11944u32),
                type_id: crate::types::NodeId::new(0u16, 38u32),
                is_forward: false,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 76u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_3968(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15365u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "Default JSON"),
                crate::types::LocalizedText::new("", "Default JSON"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 856u32),
                type_id: crate::types::NodeId::new(0u16, 38u32),
                is_forward: false,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 76u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_3969(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15366u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "Default JSON"),
                crate::types::LocalizedText::new("", "Default JSON"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 859u32),
                type_id: crate::types::NodeId::new(0u16, 38u32),
                is_forward: false,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 76u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_3970(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15367u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "Default JSON"),
                crate::types::LocalizedText::new("", "Default JSON"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 862u32),
                type_id: crate::types::NodeId::new(0u16, 38u32),
                is_forward: false,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 76u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_3971(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15368u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "Default JSON"),
                crate::types::LocalizedText::new("", "Default JSON"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 865u32),
                type_id: crate::types::NodeId::new(0u16, 38u32),
                is_forward: false,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 76u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_3972(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15369u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "Default JSON"),
                crate::types::LocalizedText::new("", "Default JSON"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 868u32),
                type_id: crate::types::NodeId::new(0u16, 38u32),
                is_forward: false,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 76u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_3973(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15370u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "Default JSON"),
                crate::types::LocalizedText::new("", "Default JSON"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 871u32),
                type_id: crate::types::NodeId::new(0u16, 38u32),
                is_forward: false,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 76u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_3974(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15371u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "Default JSON"),
                crate::types::LocalizedText::new("", "Default JSON"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 299u32),
                type_id: crate::types::NodeId::new(0u16, 38u32),
                is_forward: false,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 76u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_3975(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15372u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "Default JSON"),
                crate::types::LocalizedText::new("", "Default JSON"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 874u32),
                type_id: crate::types::NodeId::new(0u16, 38u32),
                is_forward: false,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 76u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_3976(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15373u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "Default JSON"),
                crate::types::LocalizedText::new("", "Default JSON"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 877u32),
                type_id: crate::types::NodeId::new(0u16, 38u32),
                is_forward: false,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 76u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_3977(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15374u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "Default JSON"),
                crate::types::LocalizedText::new("", "Default JSON"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 897u32),
                type_id: crate::types::NodeId::new(0u16, 38u32),
                is_forward: false,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 76u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_3978(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15375u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "Default JSON"),
                crate::types::LocalizedText::new("", "Default JSON"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 884u32),
                type_id: crate::types::NodeId::new(0u16, 38u32),
                is_forward: false,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 76u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_3979(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15376u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "Default JSON"),
                crate::types::LocalizedText::new("", "Default JSON"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 887u32),
                type_id: crate::types::NodeId::new(0u16, 38u32),
                is_forward: false,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 76u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_3980(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15377u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "Default JSON"),
                crate::types::LocalizedText::new("", "Default JSON"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 12171u32),
                type_id: crate::types::NodeId::new(0u16, 38u32),
                is_forward: false,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 76u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_3981(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15378u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "Default JSON"),
                crate::types::LocalizedText::new("", "Default JSON"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 12172u32),
                type_id: crate::types::NodeId::new(0u16, 38u32),
                is_forward: false,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 76u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_3982(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15379u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "Default JSON"),
                crate::types::LocalizedText::new("", "Default JSON"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 12079u32),
                type_id: crate::types::NodeId::new(0u16, 38u32),
                is_forward: false,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 76u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_3983(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15380u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "Default JSON"),
                crate::types::LocalizedText::new("", "Default JSON"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 12080u32),
                type_id: crate::types::NodeId::new(0u16, 38u32),
                is_forward: false,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 76u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_3984(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15381u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "Default JSON"),
                crate::types::LocalizedText::new("", "Default JSON"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 894u32),
                type_id: crate::types::NodeId::new(0u16, 38u32),
                is_forward: false,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 76u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_3985(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15405u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "Default JSON"),
                crate::types::LocalizedText::new("", "Default JSON"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15396u32),
                type_id: crate::types::NodeId::new(0u16, 38u32),
                is_forward: false,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 76u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_3986(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15382u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "Default JSON"),
                crate::types::LocalizedText::new("", "Default JSON"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 891u32),
                type_id: crate::types::NodeId::new(0u16, 38u32),
                is_forward: false,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 76u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_404(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 11624u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "NamespaceFile"),
                crate::types::LocalizedText::new("", "NamespaceFile"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11625u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 12690u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 12691u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11628u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11629u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11632u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11634u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11637u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11639u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11642u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11595u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 80u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11616u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_428(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 11646u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "<NamespaceIdentifier>"),
                crate::types::LocalizedText::new("", "<NamespaceIdentifier>"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11647u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11648u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11649u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11650u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11651u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11652u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11653u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11616u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11508u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11645u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_75(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 78u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "Mandatory"),
                crate::types::LocalizedText::new("", "Mandatory"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 112u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 77u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_753(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 3048u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "EventTypes"),
                crate::types::LocalizedText::new("", "EventTypes"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 86u32),
                type_id: crate::types::NodeId::new(0u16, 35u32),
                is_forward: false,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2041u32),
                type_id: crate::types::NodeId::new(0u16, 35u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 61u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_754(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2253u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "Server"),
                crate::types::LocalizedText::new("", "Server"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(1u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2254u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2255u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2256u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2267u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2994u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 12885u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 17634u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2268u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2274u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2295u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2296u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11715u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11492u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 12873u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 12749u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 12886u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 85u32),
                type_id: crate::types::NodeId::new(0u16, 35u32),
                is_forward: false,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2004u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_77(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 80u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "Optional"),
                crate::types::LocalizedText::new("", "Optional"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 113u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 77u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_774(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2268u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "ServerCapabilities"),
                crate::types::LocalizedText::new("", "ServerCapabilities"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2269u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2271u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2272u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2735u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2736u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2737u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 3704u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11702u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11703u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 12911u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11704u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2996u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2997u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15606u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2013u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2253u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_785(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 11704u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "OperationLimits"),
                crate::types::LocalizedText::new("", "OperationLimits"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11705u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 12165u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 12166u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11707u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 12167u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 12168u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11709u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11710u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11711u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11712u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11713u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11714u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11564u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2268u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_79(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 83u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "ExposesItsArray"),
                crate::types::LocalizedText::new("", "ExposesItsArray"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 114u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 77u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_798(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2996u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "ModellingRules"),
                crate::types::LocalizedText::new("", "ModellingRules"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 61u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2268u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_799(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2997u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "AggregateFunctions"),
                crate::types::LocalizedText::new("", "AggregateFunctions"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 61u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2268u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_800(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15606u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "RoleSet"),
                crate::types::LocalizedText::new("", "RoleSet"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 16301u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 16304u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15607u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2268u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_806(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2274u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "ServerDiagnostics"),
                crate::types::LocalizedText::new("", "ServerDiagnostics"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2275u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2289u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2290u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 3706u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2294u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2020u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2253u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_81(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 11508u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "OptionalPlaceholder"),
                crate::types::LocalizedText::new("", "OptionalPlaceholder"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11509u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 77u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_822(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 3706u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "SessionsDiagnosticsSummary"),
                crate::types::LocalizedText::new("", "SessionsDiagnosticsSummary"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 3707u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 3708u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2026u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2274u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_826(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2295u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "VendorServerInfo"),
                crate::types::LocalizedText::new("", "VendorServerInfo"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2033u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2253u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_827(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2296u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "ServerRedundancy"),
                crate::types::LocalizedText::new("", "ServerRedundancy"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 3709u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2034u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2253u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_829(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 11715u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "Namespaces"),
                crate::types::LocalizedText::new("", "Namespaces"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11645u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2253u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_83(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 11510u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "MandatoryPlaceholder"),
                crate::types::LocalizedText::new("", "MandatoryPlaceholder"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11511u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 77u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_844(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 11192u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "HistoryServerCapabilities"),
                crate::types::LocalizedText::new("", "HistoryServerCapabilities"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11193u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11242u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11273u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11274u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11196u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11197u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11198u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11199u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11200u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11281u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11282u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11283u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11502u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11275u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11201u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 19091u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2268u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2330u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_85(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 84u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "Root"),
                crate::types::LocalizedText::new("", "Root"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![crate::server::address_space::ImportedReference {
            target_id: crate::types::NodeId::new(0u16, 61u32),
            type_id: crate::types::NodeId::new(0u16, 40u32),
            is_forward: true,
        }],
    }
}
#[allow(unused)]
fn make_object_859(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 11201u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "AggregateFunctions"),
                crate::types::LocalizedText::new("", "AggregateFunctions"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 61u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11192u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_86(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 85u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "Objects"),
                crate::types::LocalizedText::new("", "Objects"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 84u32),
                type_id: crate::types::NodeId::new(0u16, 35u32),
                is_forward: false,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 61u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_87(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 86u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "Types"),
                crate::types::LocalizedText::new("", "Types"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 84u32),
                type_id: crate::types::NodeId::new(0u16, 35u32),
                is_forward: false,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 61u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_88(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 87u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "Views"),
                crate::types::LocalizedText::new("", "Views"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 84u32),
                type_id: crate::types::NodeId::new(0u16, 35u32),
                is_forward: false,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 61u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_89(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 88u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "ObjectTypes"),
                crate::types::LocalizedText::new("", "ObjectTypes"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 86u32),
                type_id: crate::types::NodeId::new(0u16, 35u32),
                is_forward: false,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 58u32),
                type_id: crate::types::NodeId::new(0u16, 35u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 61u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_90(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 89u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "VariableTypes"),
                crate::types::LocalizedText::new("", "VariableTypes"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 86u32),
                type_id: crate::types::NodeId::new(0u16, 35u32),
                is_forward: false,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 62u32),
                type_id: crate::types::NodeId::new(0u16, 35u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 61u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_91(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 90u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "DataTypes"),
                crate::types::LocalizedText::new("", "DataTypes"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 86u32),
                type_id: crate::types::NodeId::new(0u16, 35u32),
                is_forward: false,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 24u32),
                type_id: crate::types::NodeId::new(0u16, 35u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 61u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_92(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 91u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "ReferenceTypes"),
                crate::types::LocalizedText::new("", "ReferenceTypes"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 86u32),
                type_id: crate::types::NodeId::new(0u16, 35u32),
                is_forward: false,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 31u32),
                type_id: crate::types::NodeId::new(0u16, 35u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 61u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_93(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 92u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "XML Schema"),
                crate::types::LocalizedText::new("", "XML Schema"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 90u32),
                type_id: crate::types::NodeId::new(0u16, 35u32),
                is_forward: false,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 75u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_94(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 93u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "OPC Binary"),
                crate::types::LocalizedText::new("", "OPC Binary"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 90u32),
                type_id: crate::types::NodeId::new(0u16, 35u32),
                is_forward: false,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 75u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_962(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 13354u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "<FileDirectoryName>"),
                crate::types::LocalizedText::new("", "<FileDirectoryName>"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13355u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13358u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 17718u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13363u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13353u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11508u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13353u32),
                type_id: crate::types::NodeId::new(0u16, 35u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_97(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15957u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "http://opcfoundation.org/UA/"),
                crate::types::LocalizedText::new("", "http://opcfoundation.org/UA/"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15958u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15959u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15960u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15961u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15962u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15963u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15964u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 16134u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 16135u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 16136u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11715u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11616u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_974(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 13366u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "<FileName>"),
                crate::types::LocalizedText::new("", "<FileName>"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13367u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13368u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13369u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13370u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13372u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13375u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13377u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13380u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13382u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13385u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11575u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11508u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13353u32),
                type_id: crate::types::NodeId::new(0u16, 35u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_type_1017(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15744u32),
                crate::types::NodeClass::ObjectType,
                crate::types::QualifiedName::new(0u16, "TemporaryFileTransferType"),
                crate::types::LocalizedText::new("", "TemporaryFileTransferType"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            false,
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15745u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15746u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15749u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15751u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15754u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 58u32),
                type_id: crate::types::NodeId::new(0u16, 45u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_type_1032(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15803u32),
                crate::types::NodeClass::ObjectType,
                crate::types::QualifiedName::new(0u16, "FileTransferStateMachineType"),
                crate::types::LocalizedText::new("", "FileTransferStateMachineType"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            false,
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15815u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15817u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15819u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15821u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15823u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15825u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15827u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15829u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15831u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15833u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15835u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15837u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15839u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15841u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15843u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2771u32),
                type_id: crate::types::NodeId::new(0u16, 45u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_type_1062(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15607u32),
                crate::types::NodeClass::ObjectType,
                crate::types::QualifiedName::new(0u16, "RoleSetType"),
                crate::types::LocalizedText::new("", "RoleSetType"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            false,
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15608u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15997u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 16000u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 58u32),
                type_id: crate::types::NodeId::new(0u16, 45u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_type_1070(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15620u32),
                crate::types::NodeClass::ObjectType,
                crate::types::QualifiedName::new(0u16, "RoleType"),
                crate::types::LocalizedText::new("", "RoleType"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            false,
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 16173u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 16174u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15410u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 16175u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15411u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15624u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15626u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 16176u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 16178u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 16180u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 16182u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 58u32),
                type_id: crate::types::NodeId::new(0u16, 45u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_type_1091(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 17641u32),
                crate::types::NodeClass::ObjectType,
                crate::types::QualifiedName::new(0u16, "RoleMappingRuleChangedAuditEventType"),
                crate::types::LocalizedText::new("", "RoleMappingRuleChangedAuditEventType"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            true,
        )
        .into(),
        references: vec![crate::server::address_space::ImportedReference {
            target_id: crate::types::NodeId::new(0u16, 2127u32),
            type_id: crate::types::NodeId::new(0u16, 45u32),
            is_forward: false,
        }],
    }
}
#[allow(unused)]
fn make_object_type_1236(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 17589u32),
                crate::types::NodeClass::ObjectType,
                crate::types::QualifiedName::new(0u16, "DictionaryEntryType"),
                crate::types::LocalizedText::new("", "DictionaryEntryType"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            true,
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 17590u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 58u32),
                type_id: crate::types::NodeId::new(0u16, 45u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_type_1238(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 17591u32),
                crate::types::NodeClass::ObjectType,
                crate::types::QualifiedName::new(0u16, "DictionaryFolderType"),
                crate::types::LocalizedText::new("", "DictionaryFolderType"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            false,
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 17592u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 17593u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 61u32),
                type_id: crate::types::NodeId::new(0u16, 45u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_type_1243(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 17598u32),
                crate::types::NodeClass::ObjectType,
                crate::types::QualifiedName::new(0u16, "IrdiDictionaryEntryType"),
                crate::types::LocalizedText::new("", "IrdiDictionaryEntryType"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            false,
        )
        .into(),
        references: vec![crate::server::address_space::ImportedReference {
            target_id: crate::types::NodeId::new(0u16, 17589u32),
            type_id: crate::types::NodeId::new(0u16, 45u32),
            is_forward: false,
        }],
    }
}
#[allow(unused)]
fn make_object_type_1244(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 17600u32),
                crate::types::NodeClass::ObjectType,
                crate::types::QualifiedName::new(0u16, "UriDictionaryEntryType"),
                crate::types::LocalizedText::new("", "UriDictionaryEntryType"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            false,
        )
        .into(),
        references: vec![crate::server::address_space::ImportedReference {
            target_id: crate::types::NodeId::new(0u16, 17589u32),
            type_id: crate::types::NodeId::new(0u16, 45u32),
            is_forward: false,
        }],
    }
}
#[allow(unused)]
fn make_object_type_1245(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 17602u32),
                crate::types::NodeClass::ObjectType,
                crate::types::QualifiedName::new(0u16, "BaseInterfaceType"),
                crate::types::LocalizedText::new("", "BaseInterfaceType"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            true,
        )
        .into(),
        references: vec![crate::server::address_space::ImportedReference {
            target_id: crate::types::NodeId::new(0u16, 58u32),
            type_id: crate::types::NodeId::new(0u16, 45u32),
            is_forward: false,
        }],
    }
}
#[allow(unused)]
fn make_object_type_1251(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 23513u32),
                crate::types::NodeClass::ObjectType,
                crate::types::QualifiedName::new(0u16, "IOrderedObjectType"),
                crate::types::LocalizedText::new("", "IOrderedObjectType"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            true,
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 23517u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 17602u32),
                type_id: crate::types::NodeId::new(0u16, 45u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_type_1253(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 23518u32),
                crate::types::NodeClass::ObjectType,
                crate::types::QualifiedName::new(0u16, "OrderedListType"),
                crate::types::LocalizedText::new("", "OrderedListType"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            false,
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 23519u32),
                type_id: crate::types::NodeId::new(0u16, 49u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 23525u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2133u32),
                type_id: crate::types::NodeId::new(0u16, 41u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 58u32),
                type_id: crate::types::NodeId::new(0u16, 45u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_type_130(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2004u32),
                crate::types::NodeClass::ObjectType,
                crate::types::QualifiedName::new(0u16, "ServerType"),
                crate::types::LocalizedText::new("", "ServerType"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            false,
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2005u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2006u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15003u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2007u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2008u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2742u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 12882u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 17612u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2009u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2010u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2011u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2012u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11527u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11489u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 12871u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 12746u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 12883u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 58u32),
                type_id: crate::types::NodeId::new(0u16, 45u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_type_1310(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2782u32),
                crate::types::NodeClass::ObjectType,
                crate::types::QualifiedName::new(0u16, "ConditionType"),
                crate::types::LocalizedText::new("", "ConditionType"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            true,
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11112u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11113u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 16363u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 16364u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 9009u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 9010u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 3874u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 9011u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 9020u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 9022u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 9024u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 9026u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 9028u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 9027u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 9029u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 3875u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 12912u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2041u32),
                type_id: crate::types::NodeId::new(0u16, 45u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_type_1340(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2830u32),
                crate::types::NodeClass::ObjectType,
                crate::types::QualifiedName::new(0u16, "DialogConditionType"),
                crate::types::LocalizedText::new("", "DialogConditionType"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            false,
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 9035u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 9055u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2831u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 9064u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 9065u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 9066u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 9067u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 9068u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 9069u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2782u32),
                type_id: crate::types::NodeId::new(0u16, 45u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_type_1356(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2881u32),
                crate::types::NodeClass::ObjectType,
                crate::types::QualifiedName::new(0u16, "AcknowledgeableConditionType"),
                crate::types::LocalizedText::new("", "AcknowledgeableConditionType"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            false,
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 9073u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 9093u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 9102u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 9111u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 9113u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2782u32),
                type_id: crate::types::NodeId::new(0u16, 45u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_type_1373(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2915u32),
                crate::types::NodeClass::ObjectType,
                crate::types::QualifiedName::new(0u16, "AlarmConditionType"),
                crate::types::LocalizedText::new("", "AlarmConditionType"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            false,
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 9118u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 9160u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11120u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 9169u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 16371u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 9178u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 9215u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 9216u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 16389u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 16390u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 16380u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 16395u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 16396u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 16397u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 16398u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 18190u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 16399u32),
                type_id: crate::types::NodeId::new(0u16, 16361u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 16400u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 16401u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 16402u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 16403u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 17868u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 17869u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 17870u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 18199u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2881u32),
                type_id: crate::types::NodeId::new(0u16, 45u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_type_1432(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 16405u32),
                crate::types::NodeClass::ObjectType,
                crate::types::QualifiedName::new(0u16, "AlarmGroupType"),
                crate::types::LocalizedText::new("", "AlarmGroupType"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            false,
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 16406u32),
                type_id: crate::types::NodeId::new(0u16, 16362u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 61u32),
                type_id: crate::types::NodeId::new(0u16, 45u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_type_1468(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2929u32),
                crate::types::NodeClass::ObjectType,
                crate::types::QualifiedName::new(0u16, "ShelvedStateMachineType"),
                crate::types::LocalizedText::new("", "ShelvedStateMachineType"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            false,
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 9115u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2930u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2932u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2933u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2935u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2936u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2940u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2942u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2943u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2945u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2949u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2947u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2948u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2771u32),
                type_id: crate::types::NodeId::new(0u16, 45u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_type_1492(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2955u32),
                crate::types::NodeClass::ObjectType,
                crate::types::QualifiedName::new(0u16, "LimitAlarmType"),
                crate::types::LocalizedText::new("", "LimitAlarmType"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            false,
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11124u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11125u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11126u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11127u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 16572u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 16573u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 16574u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 16575u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2915u32),
                type_id: crate::types::NodeId::new(0u16, 45u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_type_1501(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 9318u32),
                crate::types::NodeClass::ObjectType,
                crate::types::QualifiedName::new(0u16, "ExclusiveLimitStateMachineType"),
                crate::types::LocalizedText::new("", "ExclusiveLimitStateMachineType"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            false,
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 9329u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 9331u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 9333u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 9335u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 9337u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 9338u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 9339u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 9340u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2771u32),
                type_id: crate::types::NodeId::new(0u16, 45u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_type_1518(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 9341u32),
                crate::types::NodeClass::ObjectType,
                crate::types::QualifiedName::new(0u16, "ExclusiveLimitAlarmType"),
                crate::types::LocalizedText::new("", "ExclusiveLimitAlarmType"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            false,
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 9398u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 9455u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2955u32),
                type_id: crate::types::NodeId::new(0u16, 45u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_type_1527(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 9906u32),
                crate::types::NodeClass::ObjectType,
                crate::types::QualifiedName::new(0u16, "NonExclusiveLimitAlarmType"),
                crate::types::LocalizedText::new("", "NonExclusiveLimitAlarmType"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            false,
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 9963u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 10020u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 10029u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 10038u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 10047u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2955u32),
                type_id: crate::types::NodeId::new(0u16, 45u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_type_1550(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 10060u32),
                crate::types::NodeClass::ObjectType,
                crate::types::QualifiedName::new(0u16, "NonExclusiveLevelAlarmType"),
                crate::types::LocalizedText::new("", "NonExclusiveLevelAlarmType"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            false,
        )
        .into(),
        references: vec![crate::server::address_space::ImportedReference {
            target_id: crate::types::NodeId::new(0u16, 9906u32),
            type_id: crate::types::NodeId::new(0u16, 45u32),
            is_forward: false,
        }],
    }
}
#[allow(unused)]
fn make_object_type_1551(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 9482u32),
                crate::types::NodeClass::ObjectType,
                crate::types::QualifiedName::new(0u16, "ExclusiveLevelAlarmType"),
                crate::types::LocalizedText::new("", "ExclusiveLevelAlarmType"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            false,
        )
        .into(),
        references: vec![crate::server::address_space::ImportedReference {
            target_id: crate::types::NodeId::new(0u16, 9341u32),
            type_id: crate::types::NodeId::new(0u16, 45u32),
            is_forward: false,
        }],
    }
}
#[allow(unused)]
fn make_object_type_1552(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 10368u32),
                crate::types::NodeClass::ObjectType,
                crate::types::QualifiedName::new(0u16, "NonExclusiveDeviationAlarmType"),
                crate::types::LocalizedText::new("", "NonExclusiveDeviationAlarmType"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            false,
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 10522u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 16776u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 9906u32),
                type_id: crate::types::NodeId::new(0u16, 45u32),
                is_forward: false,
            },
        ],
    }
}
