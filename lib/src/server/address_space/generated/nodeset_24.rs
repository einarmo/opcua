// OPCUA for Rust
// SPDX-License-Identifier: MPL-2.0
// Copyright (C) 2017-2024 Adam Lock, Einar Omang
//
// This file was autogenerated from tools/schema/schemas/1.0.4/Opc.Ua.NodeSet2.xml by opcua-codegen
//
// DO NOT EDIT THIS FILE
pub(super) fn imported_nodes<'a>(
    ns_map: &'a crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> Box<dyn Iterator<Item = crate::server::address_space::ImportedItem> + 'a> {
    Box::new(
        [
            &make_variable_2179
                as &dyn Fn(_) -> crate::server::address_space::ImportedItem,
            &make_variable_218,
            &make_variable_2180,
            &make_variable_2181,
            &make_variable_2182,
            &make_variable_2183,
            &make_variable_2185,
            &make_variable_2186,
            &make_variable_2189,
            &make_variable_219,
            &make_variable_2190,
            &make_variable_2192,
            &make_variable_2195,
            &make_variable_2196,
            &make_variable_2198,
            &make_variable_2199,
            &make_variable_220,
            &make_variable_2202,
            &make_variable_2203,
            &make_variable_2204,
            &make_variable_2205,
            &make_variable_2207,
            &make_variable_2208,
            &make_variable_221,
            &make_variable_2210,
            &make_variable_2213,
            &make_variable_2218,
            &make_variable_2219,
            &make_variable_222,
            &make_variable_2220,
            &make_variable_2223,
            &make_variable_2224,
            &make_variable_2225,
            &make_variable_2227,
            &make_variable_2228,
            &make_variable_2229,
            &make_variable_223,
            &make_variable_2230,
            &make_variable_224,
            &make_variable_225,
            &make_variable_226,
            &make_variable_227,
            &make_variable_2275,
            &make_variable_2279,
            &make_variable_228,
            &make_variable_2287,
            &make_variable_229,
            &make_variable_230,
            &make_variable_2309,
            &make_variable_2313,
            &make_variable_2315,
            &make_variable_2318,
            &make_variable_232,
            &make_variable_2322,
            &make_variable_2325,
            &make_variable_233,
            &make_variable_2332,
            &make_variable_2338,
            &make_variable_2339,
            &make_variable_234,
            &make_variable_2341,
            &make_variable_2342,
            &make_variable_2345,
            &make_variable_2346,
            &make_variable_2348,
            &make_variable_2352,
            &make_variable_2353,
            &make_variable_2355,
            &make_variable_2357,
            &make_variable_2358,
            &make_variable_2359,
            &make_variable_236,
            &make_variable_2360,
            &make_variable_2361,
            &make_variable_2363,
            &make_variable_2364,
            &make_variable_2366,
            &make_variable_2368,
            &make_variable_2369,
            &make_variable_237,
            &make_variable_2370,
            &make_variable_2371,
            &make_variable_2372,
            &make_variable_2375,
            &make_variable_2376,
            &make_variable_2377,
            &make_variable_2378,
            &make_variable_2380,
            &make_variable_2381,
            &make_variable_2383,
            &make_variable_2385,
            &make_variable_2387,
            &make_variable_2388,
            &make_variable_239,
            &make_variable_2390,
            &make_variable_2393,
            &make_variable_2395,
            &make_variable_2396,
            &make_variable_2397,
            &make_variable_2398,
        ]
            .into_iter()
            .map(|f| f(ns_map)),
    )
}
#[allow(unused)]
fn make_variable_2179(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 14155u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "CertificateTypes"),
                    crate::types::LocalizedText::new("", "CertificateTypes"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 17u32),
                false,
                1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                Some(vec![0u32]),
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 14122u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_218(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 3117u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "CurrentSessionCount"),
                    crate::types::LocalizedText::new("", "CurrentSessionCount"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 7u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 63u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2021u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2180(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 12710u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "ServerCapabilities"),
                    crate::types::LocalizedText::new("", "ServerCapabilities"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                Some(vec![0u32]),
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12637u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2181(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 12639u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "SupportedPrivateKeyFormats"),
                    crate::types::LocalizedText::new("", "SupportedPrivateKeyFormats"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                Some(vec![0u32]),
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12637u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2182(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 12640u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "MaxTrustListSize"),
                    crate::types::LocalizedText::new("", "MaxTrustListSize"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 7u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12637u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2183(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 12641u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "MulticastDnsEnabled"),
                    crate::types::LocalizedText::new("", "MulticastDnsEnabled"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 1u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12637u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2185(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 13738u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "InputArguments"),
                    crate::types::LocalizedText::new("", "InputArguments"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 296u32),
                false,
                1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        vec![
                            crate ::types::ExtensionObject::from_message(& crate
                            ::types::Argument { array_dimensions : None, data_type :
                            crate ::types::NodeId::new(0u16, 17u32), description :
                            Default::default(), name : "CertificateGroupId".into(),
                            value_rank : - 1i32, }), crate
                            ::types::ExtensionObject::from_message(& crate
                            ::types::Argument { array_dimensions : None, data_type :
                            crate ::types::NodeId::new(0u16, 17u32), description :
                            Default::default(), name : "CertificateTypeId".into(),
                            value_rank : - 1i32, }), crate
                            ::types::ExtensionObject::from_message(& crate
                            ::types::Argument { array_dimensions : None, data_type :
                            crate ::types::NodeId::new(0u16, 15u32), description :
                            Default::default(), name : "Certificate".into(), value_rank :
                            - 1i32, }), crate ::types::ExtensionObject::from_message(&
                            crate ::types::Argument { array_dimensions :
                            Some(vec![0u32,]), data_type : crate
                            ::types::NodeId::new(0u16, 15u32), description :
                            Default::default(), name : "IssuerCertificates".into(),
                            value_rank : 1i32, }), crate
                            ::types::ExtensionObject::from_message(& crate
                            ::types::Argument { array_dimensions : None, data_type :
                            crate ::types::NodeId::new(0u16, 12u32), description :
                            Default::default(), name : "PrivateKeyFormat".into(),
                            value_rank : - 1i32, }), crate
                            ::types::ExtensionObject::from_message(& crate
                            ::types::Argument { array_dimensions : None, data_type :
                            crate ::types::NodeId::new(0u16, 15u32), description :
                            Default::default(), name : "PrivateKey".into(), value_rank :
                            - 1i32, }),
                        ],
                    ),
                ),
                1u8,
                1u8,
                Some(vec![0u32]),
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 13737u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2186(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 13739u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "OutputArguments"),
                    crate::types::LocalizedText::new("", "OutputArguments"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 296u32),
                false,
                1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        vec![
                            crate ::types::ExtensionObject::from_message(& crate
                            ::types::Argument { array_dimensions : None, data_type :
                            crate ::types::NodeId::new(0u16, 1u32), description :
                            Default::default(), name : "ApplyChangesRequired".into(),
                            value_rank : - 1i32, }),
                        ],
                    ),
                ),
                1u8,
                1u8,
                Some(vec![0u32]),
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 13737u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2189(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 12738u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "InputArguments"),
                    crate::types::LocalizedText::new("", "InputArguments"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 296u32),
                false,
                1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        vec![
                            crate ::types::ExtensionObject::from_message(& crate
                            ::types::Argument { array_dimensions : None, data_type :
                            crate ::types::NodeId::new(0u16, 17u32), description :
                            Default::default(), name : "CertificateGroupId".into(),
                            value_rank : - 1i32, }), crate
                            ::types::ExtensionObject::from_message(& crate
                            ::types::Argument { array_dimensions : None, data_type :
                            crate ::types::NodeId::new(0u16, 17u32), description :
                            Default::default(), name : "CertificateTypeId".into(),
                            value_rank : - 1i32, }), crate
                            ::types::ExtensionObject::from_message(& crate
                            ::types::Argument { array_dimensions : None, data_type :
                            crate ::types::NodeId::new(0u16, 12u32), description :
                            Default::default(), name : "SubjectName".into(), value_rank :
                            - 1i32, }), crate ::types::ExtensionObject::from_message(&
                            crate ::types::Argument { array_dimensions : None, data_type
                            : crate ::types::NodeId::new(0u16, 1u32), description :
                            Default::default(), name : "RegeneratePrivateKey".into(),
                            value_rank : - 1i32, }), crate
                            ::types::ExtensionObject::from_message(& crate
                            ::types::Argument { array_dimensions : None, data_type :
                            crate ::types::NodeId::new(0u16, 15u32), description :
                            Default::default(), name : "Nonce".into(), value_rank : -
                            1i32, }),
                        ],
                    ),
                ),
                1u8,
                1u8,
                Some(vec![0u32]),
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12737u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_219(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 3118u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "CumulatedSessionCount"),
                    crate::types::LocalizedText::new("", "CumulatedSessionCount"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 7u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 63u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2021u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2190(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 12739u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "OutputArguments"),
                    crate::types::LocalizedText::new("", "OutputArguments"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 296u32),
                false,
                1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        vec![
                            crate ::types::ExtensionObject::from_message(& crate
                            ::types::Argument { array_dimensions : None, data_type :
                            crate ::types::NodeId::new(0u16, 15u32), description :
                            Default::default(), name : "CertificateRequest".into(),
                            value_rank : - 1i32, }),
                        ],
                    ),
                ),
                1u8,
                1u8,
                Some(vec![0u32]),
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12737u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2192(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 12778u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "OutputArguments"),
                    crate::types::LocalizedText::new("", "OutputArguments"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 296u32),
                false,
                1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        vec![
                            crate ::types::ExtensionObject::from_message(& crate
                            ::types::Argument { array_dimensions : Some(vec![0u32,]),
                            data_type : crate ::types::NodeId::new(0u16, 15u32),
                            description : Default::default(), name : "Certificates"
                            .into(), value_rank : 1i32, }),
                        ],
                    ),
                ),
                1u8,
                1u8,
                Some(vec![0u32]),
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12777u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2195(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17512u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "ResourceUri"),
                    crate::types::LocalizedText::new("", "ResourceUri"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17511u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2196(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17513u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "ProfileUri"),
                    crate::types::LocalizedText::new("", "ProfileUri"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17511u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2198(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17523u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "InputArguments"),
                    crate::types::LocalizedText::new("", "InputArguments"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 296u32),
                false,
                1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        vec![
                            crate ::types::ExtensionObject::from_message(& crate
                            ::types::Argument { array_dimensions : None, data_type :
                            crate ::types::NodeId::new(0u16, 12u32), description :
                            Default::default(), name : "ResourceUri".into(), value_rank :
                            - 1i32, }), crate ::types::ExtensionObject::from_message(&
                            crate ::types::Argument { array_dimensions : None, data_type
                            : crate ::types::NodeId::new(0u16, 12u32), description :
                            Default::default(), name : "ProfileUri".into(), value_rank :
                            - 1i32, }), crate ::types::ExtensionObject::from_message(&
                            crate ::types::Argument { array_dimensions :
                            Some(vec![0u32,]), data_type : crate
                            ::types::NodeId::new(0u16, 12u32), description :
                            Default::default(), name : "EndpointUrls".into(), value_rank
                            : 1i32, }),
                        ],
                    ),
                ),
                1u8,
                1u8,
                Some(vec![0u32]),
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17522u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2199(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17524u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "OutputArguments"),
                    crate::types::LocalizedText::new("", "OutputArguments"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 296u32),
                false,
                1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        vec![
                            crate ::types::ExtensionObject::from_message(& crate
                            ::types::Argument { array_dimensions : None, data_type :
                            crate ::types::NodeId::new(0u16, 17u32), description :
                            Default::default(), name : "CredentialNodeId".into(),
                            value_rank : - 1i32, }),
                        ],
                    ),
                ),
                1u8,
                1u8,
                Some(vec![0u32]),
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17522u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_220(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 3119u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(
                        0u16,
                        "SecurityRejectedSessionCount",
                    ),
                    crate::types::LocalizedText::new("", "SecurityRejectedSessionCount"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 7u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 63u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2021u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2202(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 18069u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "ResourceUri"),
                    crate::types::LocalizedText::new("", "ResourceUri"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 18001u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2203(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 18165u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "ProfileUri"),
                    crate::types::LocalizedText::new("", "ProfileUri"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 18001u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2204(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 18004u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "EndpointUrls"),
                    crate::types::LocalizedText::new("", "EndpointUrls"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                Some(vec![0u32]),
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 80u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 18001u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2205(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 18005u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "ServiceStatus"),
                    crate::types::LocalizedText::new("", "ServiceStatus"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 19u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 80u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 18001u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2207(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17535u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "InputArguments"),
                    crate::types::LocalizedText::new("", "InputArguments"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 296u32),
                false,
                1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        vec![
                            crate ::types::ExtensionObject::from_message(& crate
                            ::types::Argument { array_dimensions : None, data_type :
                            crate ::types::NodeId::new(0u16, 12u32), description :
                            Default::default(), name : "CredentialId".into(), value_rank
                            : - 1i32, }), crate ::types::ExtensionObject::from_message(&
                            crate ::types::Argument { array_dimensions : None, data_type
                            : crate ::types::NodeId::new(0u16, 12u32), description :
                            Default::default(), name : "RequestedSecurityPolicyUri"
                            .into(), value_rank : - 1i32, }),
                        ],
                    ),
                ),
                1u8,
                1u8,
                Some(vec![0u32]),
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17534u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2208(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17536u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "OutputArguments"),
                    crate::types::LocalizedText::new("", "OutputArguments"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 296u32),
                false,
                1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        vec![
                            crate ::types::ExtensionObject::from_message(& crate
                            ::types::Argument { array_dimensions : None, data_type :
                            crate ::types::NodeId::new(0u16, 15u32), description :
                            Default::default(), name : "PublicKey".into(), value_rank : -
                            1i32, }), crate ::types::ExtensionObject::from_message(&
                            crate ::types::Argument { array_dimensions : None, data_type
                            : crate ::types::NodeId::new(0u16, 17u32), description :
                            Default::default(), name : "RevisedSecurityPolicyUri".into(),
                            value_rank : - 1i32, }),
                        ],
                    ),
                ),
                1u8,
                1u8,
                Some(vec![0u32]),
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17534u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_221(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 3120u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "RejectedSessionCount"),
                    crate::types::LocalizedText::new("", "RejectedSessionCount"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 7u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 63u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2021u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2210(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 18007u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "InputArguments"),
                    crate::types::LocalizedText::new("", "InputArguments"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 296u32),
                false,
                1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        vec![
                            crate ::types::ExtensionObject::from_message(& crate
                            ::types::Argument { array_dimensions : None, data_type :
                            crate ::types::NodeId::new(0u16, 12u32), description :
                            Default::default(), name : "CredentialId".into(), value_rank
                            : - 1i32, }), crate ::types::ExtensionObject::from_message(&
                            crate ::types::Argument { array_dimensions : None, data_type
                            : crate ::types::NodeId::new(0u16, 15u32), description :
                            Default::default(), name : "CredentialSecret".into(),
                            value_rank : - 1i32, }), crate
                            ::types::ExtensionObject::from_message(& crate
                            ::types::Argument { array_dimensions : None, data_type :
                            crate ::types::NodeId::new(0u16, 12u32), description :
                            Default::default(), name : "CertificateThumbprint".into(),
                            value_rank : - 1i32, }), crate
                            ::types::ExtensionObject::from_message(& crate
                            ::types::Argument { array_dimensions : None, data_type :
                            crate ::types::NodeId::new(0u16, 12u32), description :
                            Default::default(), name : "SecurityPolicyUri".into(),
                            value_rank : - 1i32, }),
                        ],
                    ),
                ),
                1u8,
                1u8,
                Some(vec![0u32]),
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 18006u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2213(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 18028u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "ResourceUri"),
                    crate::types::LocalizedText::new("", "ResourceUri"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 18011u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2218(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 23558u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "ServiceUri"),
                    crate::types::LocalizedText::new("", "ServiceUri"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 23557u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2219(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 23559u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "ServiceCertificate"),
                    crate::types::LocalizedText::new("", "ServiceCertificate"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 15u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 23557u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_222(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 3121u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "SessionTimeoutCount"),
                    crate::types::LocalizedText::new("", "SessionTimeoutCount"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 7u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 63u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2021u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2220(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 23560u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "IssuerEndpointUrl"),
                    crate::types::LocalizedText::new("", "IssuerEndpointUrl"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 23557u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2223(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 18072u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "ServiceUri"),
                    crate::types::LocalizedText::new("", "ServiceUri"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17852u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2224(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17860u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "ServiceCertificate"),
                    crate::types::LocalizedText::new("", "ServiceCertificate"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 15u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17852u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2225(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 18073u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "IssuerEndpointUrl"),
                    crate::types::LocalizedText::new("", "IssuerEndpointUrl"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17852u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2227(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 11188u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "TreatUncertainAsBad"),
                    crate::types::LocalizedText::new("", "TreatUncertainAsBad"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 1u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 11187u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2228(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 11189u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "PercentDataBad"),
                    crate::types::LocalizedText::new("", "PercentDataBad"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 3u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 11187u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2229(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 11190u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "PercentDataGood"),
                    crate::types::LocalizedText::new("", "PercentDataGood"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 3u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 11187u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_223(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 3122u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "SessionAbortCount"),
                    crate::types::LocalizedText::new("", "SessionAbortCount"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 7u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 63u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2021u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2230(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 11191u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "UseSlopedExtrapolation"),
                    crate::types::LocalizedText::new("", "UseSlopedExtrapolation"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 1u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 11187u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_224(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 3124u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "PublishingIntervalCount"),
                    crate::types::LocalizedText::new("", "PublishingIntervalCount"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 7u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 63u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2021u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_225(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 3125u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "CurrentSubscriptionCount"),
                    crate::types::LocalizedText::new("", "CurrentSubscriptionCount"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 7u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 63u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2021u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_226(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 3126u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "CumulatedSubscriptionCount"),
                    crate::types::LocalizedText::new("", "CumulatedSubscriptionCount"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 7u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 63u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2021u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_227(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 3127u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(
                        0u16,
                        "SecurityRejectedRequestsCount",
                    ),
                    crate::types::LocalizedText::new(
                        "",
                        "SecurityRejectedRequestsCount",
                    ),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 7u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 63u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2021u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2275(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 14648u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "EnumStrings"),
                    crate::types::LocalizedText::new("", "EnumStrings"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 21u32),
                false,
                1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        vec![
                            crate ::types::LocalizedText::new("", "Disabled"), crate
                            ::types::LocalizedText::new("", "Paused"), crate
                            ::types::LocalizedText::new("", "Operational"), crate
                            ::types::LocalizedText::new("", "Error"),
                        ],
                    ),
                ),
                1u8,
                1u8,
                Some(vec![0u32]),
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 14647u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2279(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 15577u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "OptionSetValues"),
                    crate::types::LocalizedText::new("", "OptionSetValues"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 21u32),
                false,
                1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        vec![crate ::types::LocalizedText::new("", "PromotedField"),],
                    ),
                ),
                1u8,
                1u8,
                Some(vec![0u32]),
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15904u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_228(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 3128u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "RejectedRequestsCount"),
                    crate::types::LocalizedText::new("", "RejectedRequestsCount"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 7u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 63u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2021u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2287(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 15584u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "OptionSetValues"),
                    crate::types::LocalizedText::new("", "OptionSetValues"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 21u32),
                false,
                1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        vec![
                            crate ::types::LocalizedText::new("", "StatusCode"), crate
                            ::types::LocalizedText::new("", "SourceTimestamp"), crate
                            ::types::LocalizedText::new("", "ServerTimestamp"), crate
                            ::types::LocalizedText::new("", "SourcePicoSeconds"), crate
                            ::types::LocalizedText::new("", "ServerPicoSeconds"), crate
                            ::types::LocalizedText::new("", "RawData"),
                        ],
                    ),
                ),
                1u8,
                1u8,
                Some(vec![0u32]),
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15583u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_229(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 2022u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(
                        0u16,
                        "SamplingIntervalDiagnosticsArray",
                    ),
                    crate::types::LocalizedText::new(
                        "",
                        "SamplingIntervalDiagnosticsArray",
                    ),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 856u32),
                false,
                1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                Some(vec![0u32]),
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2164u32), type_id : crate
            ::types::NodeId::new(0u16, 40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 80u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2020u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_230(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 2023u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(
                        0u16,
                        "SubscriptionDiagnosticsArray",
                    ),
                    crate::types::LocalizedText::new("", "SubscriptionDiagnosticsArray"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 874u32),
                false,
                1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                Some(vec![0u32]),
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2171u32), type_id : crate
            ::types::NodeId::new(0u16, 40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2020u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2309(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 15875u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "EnumStrings"),
                    crate::types::LocalizedText::new("", "EnumStrings"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 21u32),
                false,
                1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        vec![
                            crate ::types::LocalizedText::new("", "Disabled"), crate
                            ::types::LocalizedText::new("", "LastUsableValue"), crate
                            ::types::LocalizedText::new("", "OverrideValue"),
                        ],
                    ),
                ),
                1u8,
                1u8,
                Some(vec![0u32]),
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15874u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2313(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 15641u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "EnumStrings"),
                    crate::types::LocalizedText::new("", "EnumStrings"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 21u32),
                false,
                1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        vec![
                            crate ::types::LocalizedText::new("", "Undefined"), crate
                            ::types::LocalizedText::new("", "AscendingWriterId"), crate
                            ::types::LocalizedText::new("", "AscendingWriterIdSingle"),
                        ],
                    ),
                ),
                1u8,
                1u8,
                Some(vec![0u32]),
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 20408u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2315(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 15643u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "OptionSetValues"),
                    crate::types::LocalizedText::new("", "OptionSetValues"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 21u32),
                false,
                1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        vec![
                            crate ::types::LocalizedText::new("", "PublisherId"), crate
                            ::types::LocalizedText::new("", "GroupHeader"), crate
                            ::types::LocalizedText::new("", "WriterGroupId"), crate
                            ::types::LocalizedText::new("", "GroupVersion"), crate
                            ::types::LocalizedText::new("", "NetworkMessageNumber"),
                            crate ::types::LocalizedText::new("", "SequenceNumber"),
                            crate ::types::LocalizedText::new("", "PayloadHeader"), crate
                            ::types::LocalizedText::new("", "Timestamp"), crate
                            ::types::LocalizedText::new("", "PicoSeconds"), crate
                            ::types::LocalizedText::new("", "DataSetClassId"), crate
                            ::types::LocalizedText::new("", "PromotedFields"),
                        ],
                    ),
                ),
                1u8,
                1u8,
                Some(vec![0u32]),
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15642u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2318(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 15647u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "OptionSetValues"),
                    crate::types::LocalizedText::new("", "OptionSetValues"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 21u32),
                false,
                1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        vec![
                            crate ::types::LocalizedText::new("", "Timestamp"), crate
                            ::types::LocalizedText::new("", "PicoSeconds"), crate
                            ::types::LocalizedText::new("", "Status"), crate
                            ::types::LocalizedText::new("", "MajorVersion"), crate
                            ::types::LocalizedText::new("", "MinorVersion"), crate
                            ::types::LocalizedText::new("", "SequenceNumber"),
                        ],
                    ),
                ),
                1u8,
                1u8,
                Some(vec![0u32]),
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15646u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_232(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 3129u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "SessionDiagnosticsArray"),
                    crate::types::LocalizedText::new("", "SessionDiagnosticsArray"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 865u32),
                false,
                1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                Some(vec![0u32]),
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2196u32), type_id : crate
            ::types::NodeId::new(0u16, 40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2744u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2322(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 15655u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "OptionSetValues"),
                    crate::types::LocalizedText::new("", "OptionSetValues"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 21u32),
                false,
                1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        vec![
                            crate ::types::LocalizedText::new("",
                            "NetworkMessageHeader"), crate
                            ::types::LocalizedText::new("", "DataSetMessageHeader"),
                            crate ::types::LocalizedText::new("",
                            "SingleDataSetMessage"), crate
                            ::types::LocalizedText::new("", "PublisherId"), crate
                            ::types::LocalizedText::new("", "DataSetClassId"), crate
                            ::types::LocalizedText::new("", "ReplyTo"),
                        ],
                    ),
                ),
                1u8,
                1u8,
                Some(vec![0u32]),
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15654u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2325(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 15659u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "OptionSetValues"),
                    crate::types::LocalizedText::new("", "OptionSetValues"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 21u32),
                false,
                1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        vec![
                            crate ::types::LocalizedText::new("", "DataSetWriterId"),
                            crate ::types::LocalizedText::new("", "MetaDataVersion"),
                            crate ::types::LocalizedText::new("", "SequenceNumber"),
                            crate ::types::LocalizedText::new("", "Timestamp"), crate
                            ::types::LocalizedText::new("", "Status"),
                        ],
                    ),
                ),
                1u8,
                1u8,
                Some(vec![0u32]),
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15658u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_233(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 3130u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(
                        0u16,
                        "SessionSecurityDiagnosticsArray",
                    ),
                    crate::types::LocalizedText::new(
                        "",
                        "SessionSecurityDiagnosticsArray",
                    ),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 868u32),
                false,
                1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                Some(vec![0u32]),
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2243u32), type_id : crate
            ::types::NodeId::new(0u16, 40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2744u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2332(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 15009u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "EnumStrings"),
                    crate::types::LocalizedText::new("", "EnumStrings"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 21u32),
                false,
                1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        vec![
                            crate ::types::LocalizedText::new("", "NotSpecified"), crate
                            ::types::LocalizedText::new("", "BestEffort"), crate
                            ::types::LocalizedText::new("", "AtLeastOnce"), crate
                            ::types::LocalizedText::new("", "AtMostOnce"), crate
                            ::types::LocalizedText::new("", "ExactlyOnce"),
                        ],
                    ),
                ),
                1u8,
                1u8,
                Some(vec![0u32]),
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15008u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2338(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 15908u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "InputArguments"),
                    crate::types::LocalizedText::new("", "InputArguments"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 296u32),
                false,
                1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        vec![
                            crate ::types::ExtensionObject::from_message(& crate
                            ::types::Argument { array_dimensions : None, data_type :
                            crate ::types::NodeId::new(0u16, 12u32), description :
                            Default::default(), name : "SecurityGroupId".into(),
                            value_rank : - 1i32, }), crate
                            ::types::ExtensionObject::from_message(& crate
                            ::types::Argument { array_dimensions : None, data_type :
                            crate ::types::NodeId::new(0u16, 288u32), description :
                            Default::default(), name : "StartingTokenId".into(),
                            value_rank : - 1i32, }), crate
                            ::types::ExtensionObject::from_message(& crate
                            ::types::Argument { array_dimensions : None, data_type :
                            crate ::types::NodeId::new(0u16, 7u32), description :
                            Default::default(), name : "RequestedKeyCount".into(),
                            value_rank : - 1i32, }),
                        ],
                    ),
                ),
                1u8,
                1u8,
                Some(vec![0u32]),
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15907u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2339(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 15909u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "OutputArguments"),
                    crate::types::LocalizedText::new("", "OutputArguments"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 296u32),
                false,
                1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        vec![
                            crate ::types::ExtensionObject::from_message(& crate
                            ::types::Argument { array_dimensions : None, data_type :
                            crate ::types::NodeId::new(0u16, 12u32), description :
                            Default::default(), name : "SecurityPolicyUri".into(),
                            value_rank : - 1i32, }), crate
                            ::types::ExtensionObject::from_message(& crate
                            ::types::Argument { array_dimensions : None, data_type :
                            crate ::types::NodeId::new(0u16, 288u32), description :
                            Default::default(), name : "FirstTokenId".into(), value_rank
                            : - 1i32, }), crate ::types::ExtensionObject::from_message(&
                            crate ::types::Argument { array_dimensions :
                            Some(vec![0u32,]), data_type : crate
                            ::types::NodeId::new(0u16, 15u32), description :
                            Default::default(), name : "Keys".into(), value_rank : 1i32,
                            }), crate ::types::ExtensionObject::from_message(& crate
                            ::types::Argument { array_dimensions : None, data_type :
                            crate ::types::NodeId::new(0u16, 290u32), description :
                            Default::default(), name : "TimeToNextKey".into(), value_rank
                            : - 1i32, }), crate ::types::ExtensionObject::from_message(&
                            crate ::types::Argument { array_dimensions : None, data_type
                            : crate ::types::NodeId::new(0u16, 290u32), description :
                            Default::default(), name : "KeyLifetime".into(), value_rank :
                            - 1i32, }),
                        ],
                    ),
                ),
                1u8,
                1u8,
                Some(vec![0u32]),
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15907u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_234(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 2025u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "EnabledFlag"),
                    crate::types::LocalizedText::new("", "EnabledFlag"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 1u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                3u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2020u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2341(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 15911u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "InputArguments"),
                    crate::types::LocalizedText::new("", "InputArguments"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 296u32),
                false,
                1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        vec![
                            crate ::types::ExtensionObject::from_message(& crate
                            ::types::Argument { array_dimensions : None, data_type :
                            crate ::types::NodeId::new(0u16, 12u32), description :
                            Default::default(), name : "SecurityGroupId".into(),
                            value_rank : - 1i32, }),
                        ],
                    ),
                ),
                1u8,
                1u8,
                Some(vec![0u32]),
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15910u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2342(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 15912u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "OutputArguments"),
                    crate::types::LocalizedText::new("", "OutputArguments"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 296u32),
                false,
                1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        vec![
                            crate ::types::ExtensionObject::from_message(& crate
                            ::types::Argument { array_dimensions : None, data_type :
                            crate ::types::NodeId::new(0u16, 17u32), description :
                            Default::default(), name : "SecurityGroupNodeId".into(),
                            value_rank : - 1i32, }),
                        ],
                    ),
                ),
                1u8,
                1u8,
                Some(vec![0u32]),
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15910u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2345(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 15915u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "InputArguments"),
                    crate::types::LocalizedText::new("", "InputArguments"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 296u32),
                false,
                1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        vec![
                            crate ::types::ExtensionObject::from_message(& crate
                            ::types::Argument { array_dimensions : None, data_type :
                            crate ::types::NodeId::new(0u16, 12u32), description :
                            Default::default(), name : "SecurityGroupName".into(),
                            value_rank : - 1i32, }), crate
                            ::types::ExtensionObject::from_message(& crate
                            ::types::Argument { array_dimensions : None, data_type :
                            crate ::types::NodeId::new(0u16, 290u32), description :
                            Default::default(), name : "KeyLifetime".into(), value_rank :
                            - 1i32, }), crate ::types::ExtensionObject::from_message(&
                            crate ::types::Argument { array_dimensions : None, data_type
                            : crate ::types::NodeId::new(0u16, 12u32), description :
                            Default::default(), name : "SecurityPolicyUri".into(),
                            value_rank : - 1i32, }), crate
                            ::types::ExtensionObject::from_message(& crate
                            ::types::Argument { array_dimensions : None, data_type :
                            crate ::types::NodeId::new(0u16, 7u32), description :
                            Default::default(), name : "MaxFutureKeyCount".into(),
                            value_rank : - 1i32, }), crate
                            ::types::ExtensionObject::from_message(& crate
                            ::types::Argument { array_dimensions : None, data_type :
                            crate ::types::NodeId::new(0u16, 7u32), description :
                            Default::default(), name : "MaxPastKeyCount".into(),
                            value_rank : - 1i32, }),
                        ],
                    ),
                ),
                1u8,
                1u8,
                Some(vec![0u32]),
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15914u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2346(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 15916u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "OutputArguments"),
                    crate::types::LocalizedText::new("", "OutputArguments"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 296u32),
                false,
                1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        vec![
                            crate ::types::ExtensionObject::from_message(& crate
                            ::types::Argument { array_dimensions : None, data_type :
                            crate ::types::NodeId::new(0u16, 12u32), description :
                            Default::default(), name : "SecurityGroupId".into(),
                            value_rank : - 1i32, }), crate
                            ::types::ExtensionObject::from_message(& crate
                            ::types::Argument { array_dimensions : None, data_type :
                            crate ::types::NodeId::new(0u16, 17u32), description :
                            Default::default(), name : "SecurityGroupNodeId".into(),
                            value_rank : - 1i32, }),
                        ],
                    ),
                ),
                1u8,
                1u8,
                Some(vec![0u32]),
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15914u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2348(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 15918u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "InputArguments"),
                    crate::types::LocalizedText::new("", "InputArguments"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 296u32),
                false,
                1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        vec![
                            crate ::types::ExtensionObject::from_message(& crate
                            ::types::Argument { array_dimensions : None, data_type :
                            crate ::types::NodeId::new(0u16, 17u32), description :
                            Default::default(), name : "SecurityGroupNodeId".into(),
                            value_rank : - 1i32, }),
                        ],
                    ),
                ),
                1u8,
                1u8,
                Some(vec![0u32]),
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15917u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2352(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 15455u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "InputArguments"),
                    crate::types::LocalizedText::new("", "InputArguments"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 296u32),
                false,
                1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        vec![
                            crate ::types::ExtensionObject::from_message(& crate
                            ::types::Argument { array_dimensions : None, data_type :
                            crate ::types::NodeId::new(0u16, 12u32), description :
                            Default::default(), name : "SecurityGroupName".into(),
                            value_rank : - 1i32, }), crate
                            ::types::ExtensionObject::from_message(& crate
                            ::types::Argument { array_dimensions : None, data_type :
                            crate ::types::NodeId::new(0u16, 290u32), description :
                            Default::default(), name : "KeyLifetime".into(), value_rank :
                            - 1i32, }), crate ::types::ExtensionObject::from_message(&
                            crate ::types::Argument { array_dimensions : None, data_type
                            : crate ::types::NodeId::new(0u16, 12u32), description :
                            Default::default(), name : "SecurityPolicyUri".into(),
                            value_rank : - 1i32, }), crate
                            ::types::ExtensionObject::from_message(& crate
                            ::types::Argument { array_dimensions : None, data_type :
                            crate ::types::NodeId::new(0u16, 7u32), description :
                            Default::default(), name : "MaxFutureKeyCount".into(),
                            value_rank : - 1i32, }), crate
                            ::types::ExtensionObject::from_message(& crate
                            ::types::Argument { array_dimensions : None, data_type :
                            crate ::types::NodeId::new(0u16, 7u32), description :
                            Default::default(), name : "MaxPastKeyCount".into(),
                            value_rank : - 1i32, }),
                        ],
                    ),
                ),
                1u8,
                1u8,
                Some(vec![0u32]),
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15454u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2353(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 15456u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "OutputArguments"),
                    crate::types::LocalizedText::new("", "OutputArguments"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 296u32),
                false,
                1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        vec![
                            crate ::types::ExtensionObject::from_message(& crate
                            ::types::Argument { array_dimensions : None, data_type :
                            crate ::types::NodeId::new(0u16, 12u32), description :
                            Default::default(), name : "SecurityGroupId".into(),
                            value_rank : - 1i32, }), crate
                            ::types::ExtensionObject::from_message(& crate
                            ::types::Argument { array_dimensions : None, data_type :
                            crate ::types::NodeId::new(0u16, 17u32), description :
                            Default::default(), name : "SecurityGroupNodeId".into(),
                            value_rank : - 1i32, }),
                        ],
                    ),
                ),
                1u8,
                1u8,
                Some(vec![0u32]),
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15454u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2355(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 15458u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "InputArguments"),
                    crate::types::LocalizedText::new("", "InputArguments"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 296u32),
                false,
                1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        vec![
                            crate ::types::ExtensionObject::from_message(& crate
                            ::types::Argument { array_dimensions : None, data_type :
                            crate ::types::NodeId::new(0u16, 17u32), description :
                            Default::default(), name : "SecurityGroupNodeId".into(),
                            value_rank : - 1i32, }),
                        ],
                    ),
                ),
                1u8,
                1u8,
                Some(vec![0u32]),
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15457u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2357(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 15460u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "SecurityGroupId"),
                    crate::types::LocalizedText::new("", "SecurityGroupId"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15459u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2358(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 15010u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "KeyLifetime"),
                    crate::types::LocalizedText::new("", "KeyLifetime"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 290u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15459u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2359(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 15011u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "SecurityPolicyUri"),
                    crate::types::LocalizedText::new("", "SecurityPolicyUri"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15459u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_236(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 2027u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "SessionDiagnosticsArray"),
                    crate::types::LocalizedText::new("", "SessionDiagnosticsArray"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 865u32),
                false,
                1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                Some(vec![0u32]),
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2196u32), type_id : crate
            ::types::NodeId::new(0u16, 40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2026u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2360(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 15012u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "MaxFutureKeyCount"),
                    crate::types::LocalizedText::new("", "MaxFutureKeyCount"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 7u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15459u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2361(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 15043u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "MaxPastKeyCount"),
                    crate::types::LocalizedText::new("", "MaxPastKeyCount"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 7u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15459u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2363(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 15462u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "InputArguments"),
                    crate::types::LocalizedText::new("", "InputArguments"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 296u32),
                false,
                1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        vec![
                            crate ::types::ExtensionObject::from_message(& crate
                            ::types::Argument { array_dimensions : None, data_type :
                            crate ::types::NodeId::new(0u16, 12u32), description :
                            Default::default(), name : "SecurityGroupName".into(),
                            value_rank : - 1i32, }), crate
                            ::types::ExtensionObject::from_message(& crate
                            ::types::Argument { array_dimensions : None, data_type :
                            crate ::types::NodeId::new(0u16, 290u32), description :
                            Default::default(), name : "KeyLifetime".into(), value_rank :
                            - 1i32, }), crate ::types::ExtensionObject::from_message(&
                            crate ::types::Argument { array_dimensions : None, data_type
                            : crate ::types::NodeId::new(0u16, 12u32), description :
                            Default::default(), name : "SecurityPolicyUri".into(),
                            value_rank : - 1i32, }), crate
                            ::types::ExtensionObject::from_message(& crate
                            ::types::Argument { array_dimensions : None, data_type :
                            crate ::types::NodeId::new(0u16, 7u32), description :
                            Default::default(), name : "MaxFutureKeyCount".into(),
                            value_rank : - 1i32, }), crate
                            ::types::ExtensionObject::from_message(& crate
                            ::types::Argument { array_dimensions : None, data_type :
                            crate ::types::NodeId::new(0u16, 7u32), description :
                            Default::default(), name : "MaxPastKeyCount".into(),
                            value_rank : - 1i32, }),
                        ],
                    ),
                ),
                1u8,
                1u8,
                Some(vec![0u32]),
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15461u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2364(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 15463u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "OutputArguments"),
                    crate::types::LocalizedText::new("", "OutputArguments"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 296u32),
                false,
                1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        vec![
                            crate ::types::ExtensionObject::from_message(& crate
                            ::types::Argument { array_dimensions : None, data_type :
                            crate ::types::NodeId::new(0u16, 12u32), description :
                            Default::default(), name : "SecurityGroupId".into(),
                            value_rank : - 1i32, }), crate
                            ::types::ExtensionObject::from_message(& crate
                            ::types::Argument { array_dimensions : None, data_type :
                            crate ::types::NodeId::new(0u16, 17u32), description :
                            Default::default(), name : "SecurityGroupNodeId".into(),
                            value_rank : - 1i32, }),
                        ],
                    ),
                ),
                1u8,
                1u8,
                Some(vec![0u32]),
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15461u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2366(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 15465u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "InputArguments"),
                    crate::types::LocalizedText::new("", "InputArguments"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 296u32),
                false,
                1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        vec![
                            crate ::types::ExtensionObject::from_message(& crate
                            ::types::Argument { array_dimensions : None, data_type :
                            crate ::types::NodeId::new(0u16, 17u32), description :
                            Default::default(), name : "SecurityGroupNodeId".into(),
                            value_rank : - 1i32, }),
                        ],
                    ),
                ),
                1u8,
                1u8,
                Some(vec![0u32]),
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15464u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2368(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 15472u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "SecurityGroupId"),
                    crate::types::LocalizedText::new("", "SecurityGroupId"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15471u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2369(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 15046u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "KeyLifetime"),
                    crate::types::LocalizedText::new("", "KeyLifetime"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 290u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15471u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_237(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 2028u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(
                        0u16,
                        "SessionSecurityDiagnosticsArray",
                    ),
                    crate::types::LocalizedText::new(
                        "",
                        "SessionSecurityDiagnosticsArray",
                    ),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 868u32),
                false,
                1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                Some(vec![0u32]),
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2243u32), type_id : crate
            ::types::NodeId::new(0u16, 40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2026u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2370(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 15047u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "SecurityPolicyUri"),
                    crate::types::LocalizedText::new("", "SecurityPolicyUri"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15471u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2371(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 15048u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "MaxFutureKeyCount"),
                    crate::types::LocalizedText::new("", "MaxFutureKeyCount"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 7u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15471u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2372(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 15056u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "MaxPastKeyCount"),
                    crate::types::LocalizedText::new("", "MaxPastKeyCount"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 7u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15471u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2375(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 14418u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "PublisherId"),
                    crate::types::LocalizedText::new("", "PublisherId"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 24u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 14417u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2376(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17292u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "TransportProfileUri"),
                    crate::types::LocalizedText::new("", "TransportProfileUri"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17706u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 16309u32), type_id : crate
            ::types::NodeId::new(0u16, 40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 14417u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2377(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17706u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "Selections"),
                    crate::types::LocalizedText::new("", "Selections"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 24u32),
                false,
                1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                Some(vec![0u32]),
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17292u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2378(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17478u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "ConnectionProperties"),
                    crate::types::LocalizedText::new("", "ConnectionProperties"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 14533u32),
                false,
                1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                Some(vec![0u32]),
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 14417u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2380(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 15533u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "NetworkInterface"),
                    crate::types::LocalizedText::new("", "NetworkInterface"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17503u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 16309u32), type_id : crate
            ::types::NodeId::new(0u16, 40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 14423u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2381(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17503u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "Selections"),
                    crate::types::LocalizedText::new("", "Selections"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 24u32),
                false,
                1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                Some(vec![0u32]),
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15533u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2383(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 14420u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "State"),
                    crate::types::LocalizedText::new("", "State"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 14647u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 63u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 14419u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2385(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17297u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "InputArguments"),
                    crate::types::LocalizedText::new("", "InputArguments"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 296u32),
                false,
                1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        vec![
                            crate ::types::ExtensionObject::from_message(& crate
                            ::types::Argument { array_dimensions : None, data_type :
                            crate ::types::NodeId::new(0u16, 12u32), description :
                            Default::default(), name : "SecurityGroupId".into(),
                            value_rank : - 1i32, }), crate
                            ::types::ExtensionObject::from_message(& crate
                            ::types::Argument { array_dimensions : None, data_type :
                            crate ::types::NodeId::new(0u16, 12u32), description :
                            Default::default(), name : "SecurityPolicyUri".into(),
                            value_rank : - 1i32, }), crate
                            ::types::ExtensionObject::from_message(& crate
                            ::types::Argument { array_dimensions : None, data_type :
                            crate ::types::NodeId::new(0u16, 288u32), description :
                            Default::default(), name : "CurrentTokenId".into(),
                            value_rank : - 1i32, }), crate
                            ::types::ExtensionObject::from_message(& crate
                            ::types::Argument { array_dimensions : None, data_type :
                            crate ::types::NodeId::new(0u16, 15u32), description :
                            Default::default(), name : "CurrentKey".into(), value_rank :
                            - 1i32, }), crate ::types::ExtensionObject::from_message(&
                            crate ::types::Argument { array_dimensions :
                            Some(vec![0u32,]), data_type : crate
                            ::types::NodeId::new(0u16, 15u32), description :
                            Default::default(), name : "FutureKeys".into(), value_rank :
                            1i32, }), crate ::types::ExtensionObject::from_message(&
                            crate ::types::Argument { array_dimensions : None, data_type
                            : crate ::types::NodeId::new(0u16, 290u32), description :
                            Default::default(), name : "TimeToNextKey".into(), value_rank
                            : - 1i32, }), crate ::types::ExtensionObject::from_message(&
                            crate ::types::Argument { array_dimensions : None, data_type
                            : crate ::types::NodeId::new(0u16, 290u32), description :
                            Default::default(), name : "KeyLifetime".into(), value_rank :
                            - 1i32, }),
                        ],
                    ),
                ),
                1u8,
                1u8,
                Some(vec![0u32]),
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17296u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2387(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 16599u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "InputArguments"),
                    crate::types::LocalizedText::new("", "InputArguments"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 296u32),
                false,
                1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        vec![
                            crate ::types::ExtensionObject::from_message(& crate
                            ::types::Argument { array_dimensions : None, data_type :
                            crate ::types::NodeId::new(0u16, 15617u32), description :
                            Default::default(), name : "Configuration".into(), value_rank
                            : - 1i32, }),
                        ],
                    ),
                ),
                1u8,
                1u8,
                Some(vec![0u32]),
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 16598u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2388(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 16600u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "OutputArguments"),
                    crate::types::LocalizedText::new("", "OutputArguments"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 296u32),
                false,
                1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        vec![
                            crate ::types::ExtensionObject::from_message(& crate
                            ::types::Argument { array_dimensions : None, data_type :
                            crate ::types::NodeId::new(0u16, 17u32), description :
                            Default::default(), name : "ConnectionId".into(), value_rank
                            : - 1i32, }),
                        ],
                    ),
                ),
                1u8,
                1u8,
                Some(vec![0u32]),
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 16598u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_239(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 12098u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "SessionDiagnostics"),
                    crate::types::LocalizedText::new("", "SessionDiagnostics"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 865u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12099u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12100u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12101u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12102u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12103u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12104u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12105u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12106u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12107u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12108u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12109u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12110u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12111u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12112u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12113u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12114u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12115u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12116u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12117u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12118u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12119u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12120u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12121u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12122u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12123u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12124u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12125u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12126u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12127u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12128u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12129u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12130u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12131u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12132u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12133u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12134u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12135u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12136u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12137u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12138u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12139u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12140u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12141u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2197u32), type_id : crate
            ::types::NodeId::new(0u16, 40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12097u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2390(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 14433u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "InputArguments"),
                    crate::types::LocalizedText::new("", "InputArguments"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 296u32),
                false,
                1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        vec![
                            crate ::types::ExtensionObject::from_message(& crate
                            ::types::Argument { array_dimensions : None, data_type :
                            crate ::types::NodeId::new(0u16, 17u32), description :
                            Default::default(), name : "ConnectionId".into(), value_rank
                            : - 1i32, }),
                        ],
                    ),
                ),
                1u8,
                1u8,
                Some(vec![0u32]),
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 14432u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2393(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 15845u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "State"),
                    crate::types::LocalizedText::new("", "State"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 14647u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 63u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15844u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2395(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 18716u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "DiagnosticsLevel"),
                    crate::types::LocalizedText::new("", "DiagnosticsLevel"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 19723u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 63u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 18715u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2396(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 18717u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "TotalInformation"),
                    crate::types::LocalizedText::new("", "TotalInformation"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 7u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 18718u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 18719u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 18720u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19725u32), type_id : crate
            ::types::NodeId::new(0u16, 40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 18715u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2397(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 18718u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "Active"),
                    crate::types::LocalizedText::new("", "Active"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 1u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 18717u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2398(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 18719u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "Classification"),
                    crate::types::LocalizedText::new("", "Classification"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 19730u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 18717u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
