// OPCUA for Rust
// SPDX-License-Identifier: MPL-2.0
// Copyright (C) 2017-2024 Adam Lock, Einar Omang
//
// This file was autogenerated from tools/schema/schemas/1.0.4/Opc.Ua.NodeSet2.xml by opcua-codegen
//
// DO NOT EDIT THIS FILE
pub(super) fn imported_nodes<'a>(
    ns_map: &'a crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> Box<dyn Iterator<Item = crate::server::address_space::ImportedItem> + 'a> {
    Box::new(
        [
            &make_object_1875 as &dyn Fn(_) -> crate::server::address_space::ImportedItem,
            &make_object_1917,
            &make_object_1918,
            &make_object_1943,
            &make_object_1944,
            &make_object_1969,
            &make_object_1970,
            &make_object_1995,
            &make_object_1996,
            &make_object_2036,
            &make_object_2037,
            &make_object_2038,
            &make_object_205,
            &make_object_206,
            &make_object_207,
            &make_object_2079,
            &make_object_2080,
            &make_object_2081,
            &make_object_2082,
            &make_object_209,
            &make_object_2114,
            &make_object_2115,
            &make_object_2147,
            &make_object_2148,
            &make_object_2194,
            &make_object_2200,
            &make_object_2217,
            &make_object_2221,
            &make_object_2231,
            &make_object_2232,
            &make_object_2233,
            &make_object_2234,
            &make_object_2235,
            &make_object_2236,
            &make_object_2237,
            &make_object_2238,
            &make_object_2239,
            &make_object_2240,
            &make_object_2241,
            &make_object_2242,
            &make_object_2243,
            &make_object_2244,
            &make_object_2245,
            &make_object_2246,
            &make_object_2247,
            &make_object_2248,
            &make_object_2249,
            &make_object_2250,
            &make_object_2251,
            &make_object_2252,
            &make_object_2253,
            &make_object_2254,
            &make_object_2255,
            &make_object_2256,
            &make_object_2257,
            &make_object_2258,
            &make_object_2259,
            &make_object_2260,
            &make_object_2261,
            &make_object_2262,
            &make_object_2263,
            &make_object_2264,
            &make_object_2265,
            &make_object_2266,
            &make_object_2267,
            &make_object_231,
            &make_object_2343,
            &make_object_2350,
            &make_object_2356,
            &make_object_2374,
            &make_object_2379,
            &make_object_238,
            &make_object_2382,
            &make_object_2391,
            &make_object_2392,
            &make_object_2394,
            &make_object_2406,
            &make_object_2431,
            &make_object_2441,
            &make_object_2448,
            &make_object_2459,
            &make_object_2460,
            &make_object_2462,
            &make_object_2474,
            &make_object_2499,
            &make_object_2511,
            &make_object_2515,
            &make_object_2520,
            &make_object_2550,
            &make_object_2570,
            &make_object_2597,
            &make_object_2600,
            &make_object_2601,
            &make_object_2605,
            &make_object_2613,
            &make_object_2617,
            &make_object_2619,
            &make_object_2621,
            &make_object_2633,
            &make_object_2658,
        ]
        .into_iter()
        .map(|f| f(ns_map)),
    )
}
#[allow(unused)]
fn make_object_1875(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 20143u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "TrustListOutOfDate"),
                crate::types::LocalizedText::new("", "TrustListOutOfDate"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 20144u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 20145u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 20146u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 20147u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 20148u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 20149u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 20151u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 20152u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 20153u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 20154u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 20157u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 20158u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 20159u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 20160u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 20169u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 20171u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 20173u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 20175u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 20176u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 20177u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 20178u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 20180u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 20198u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 20202u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 20211u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 20249u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 20286u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 20287u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 20288u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 20289u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 19297u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 80u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 12555u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_1917(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 13814u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "DefaultApplicationGroup"),
                crate::types::LocalizedText::new("", "DefaultApplicationGroup"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13815u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13847u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 12555u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13813u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_1918(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 13815u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "TrustList"),
                crate::types::LocalizedText::new("", "TrustList"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13816u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13817u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13818u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13819u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13821u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13824u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13826u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13829u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13831u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13834u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13836u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13837u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 12522u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13814u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_1943(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 13848u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "DefaultHttpsGroup"),
                crate::types::LocalizedText::new("", "DefaultHttpsGroup"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13849u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13881u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 12555u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 80u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13813u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_1944(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 13849u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "TrustList"),
                crate::types::LocalizedText::new("", "TrustList"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13850u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13851u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13852u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13853u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13855u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13858u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13860u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13863u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13865u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13868u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13870u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13871u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 12522u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13848u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_1969(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 13882u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "DefaultUserTokenGroup"),
                crate::types::LocalizedText::new("", "DefaultUserTokenGroup"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13883u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13915u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 12555u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 80u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13813u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_1970(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 13883u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "TrustList"),
                crate::types::LocalizedText::new("", "TrustList"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13884u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13885u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13886u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13887u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13889u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13892u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13894u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13897u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13899u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13902u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13904u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13905u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 12522u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13882u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_1995(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 13916u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "<AdditionalGroup>"),
                crate::types::LocalizedText::new("", "<AdditionalGroup>"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13917u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13949u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 12555u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11508u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13813u32),
                type_id: crate::types::NodeId::new(0u16, 35u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_1996(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 13917u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "TrustList"),
                crate::types::LocalizedText::new("", "TrustList"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13918u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13919u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13920u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13921u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13923u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13926u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13928u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13931u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13933u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13936u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13938u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13939u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 12522u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13916u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_2036(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 13950u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "CertificateGroups"),
                crate::types::LocalizedText::new("", "CertificateGroups"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13951u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13813u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 12581u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_2037(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 13951u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "DefaultApplicationGroup"),
                crate::types::LocalizedText::new("", "DefaultApplicationGroup"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13952u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13984u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 12555u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13950u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_2038(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 13952u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "TrustList"),
                crate::types::LocalizedText::new("", "TrustList"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13953u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13954u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13955u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13956u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13958u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13961u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13963u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13966u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13968u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13971u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13973u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13974u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 12522u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13951u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_205(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 11551u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "OperationLimits"),
                crate::types::LocalizedText::new("", "OperationLimits"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11564u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 80u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2013u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_206(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2019u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "ModellingRules"),
                crate::types::LocalizedText::new("", "ModellingRules"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 61u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2013u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_207(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2754u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "AggregateFunctions"),
                crate::types::LocalizedText::new("", "AggregateFunctions"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 61u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2013u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_2079(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 12637u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "ServerConfiguration"),
                crate::types::LocalizedText::new("", "ServerConfiguration"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 14053u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 12710u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 12639u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 12640u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 12641u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13737u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 12740u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 12737u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 12777u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2253u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 12581u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_2080(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 14053u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "CertificateGroups"),
                crate::types::LocalizedText::new("", "CertificateGroups"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 14156u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 14088u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 14122u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13813u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 12637u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_2081(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 14156u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "DefaultApplicationGroup"),
                crate::types::LocalizedText::new("", "DefaultApplicationGroup"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 12642u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 14161u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 12555u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 14053u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_2082(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 12642u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "TrustList"),
                crate::types::LocalizedText::new("", "TrustList"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 12643u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 14157u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 14158u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 12646u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 12647u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 12650u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 12652u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 12655u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 12657u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 12660u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 12662u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 12663u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 12666u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 12668u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 12670u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 12522u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 14156u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_209(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 16295u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "RoleSet"),
                crate::types::LocalizedText::new("", "RoleSet"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 16296u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 16299u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15607u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 80u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2013u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_2114(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 14088u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "DefaultHttpsGroup"),
                crate::types::LocalizedText::new("", "DefaultHttpsGroup"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 14089u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 14121u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 12555u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 14053u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_2115(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 14089u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "TrustList"),
                crate::types::LocalizedText::new("", "TrustList"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 14090u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 14091u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 14092u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 14093u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 14095u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 14098u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 14100u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 14103u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 14105u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 14108u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 14110u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 14111u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 14114u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 14117u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 14119u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 12522u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 14088u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_2147(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 14122u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "DefaultUserTokenGroup"),
                crate::types::LocalizedText::new("", "DefaultUserTokenGroup"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 14123u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 14155u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 12555u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 14053u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_2148(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 14123u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "TrustList"),
                crate::types::LocalizedText::new("", "TrustList"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 14124u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 14125u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 14126u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 14127u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 14129u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 14132u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 14134u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 14137u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 14139u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 14142u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 14144u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 14145u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 14148u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 14151u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 14153u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 12522u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 14122u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_2194(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 17511u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "<ServiceName>"),
                crate::types::LocalizedText::new("", "<ServiceName>"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 17512u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 17513u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 18001u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11508u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 17496u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_2200(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 18155u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "KeyCredentialConfiguration"),
                crate::types::LocalizedText::new("", "KeyCredentialConfiguration"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 12637u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 17496u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_2217(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 23557u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "<ServiceName>"),
                crate::types::LocalizedText::new("", "<ServiceName>"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 23558u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 23559u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 23560u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 17852u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11508u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 23556u32),
                type_id: crate::types::NodeId::new(0u16, 35u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_2221(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 17732u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "AuthorizationServices"),
                crate::types::LocalizedText::new("", "AuthorizationServices"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 12637u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 61u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_2231(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2341u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "Interpolative"),
                crate::types::LocalizedText::new("", "Interpolative"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![crate::server::address_space::ImportedReference {
            target_id: crate::types::NodeId::new(0u16, 2340u32),
            type_id: crate::types::NodeId::new(0u16, 40u32),
            is_forward: true,
        }],
    }
}
#[allow(unused)]
fn make_object_2232(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2342u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "Average"),
                crate::types::LocalizedText::new("", "Average"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![crate::server::address_space::ImportedReference {
            target_id: crate::types::NodeId::new(0u16, 2340u32),
            type_id: crate::types::NodeId::new(0u16, 40u32),
            is_forward: true,
        }],
    }
}
#[allow(unused)]
fn make_object_2233(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2343u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "TimeAverage"),
                crate::types::LocalizedText::new("", "TimeAverage"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![crate::server::address_space::ImportedReference {
            target_id: crate::types::NodeId::new(0u16, 2340u32),
            type_id: crate::types::NodeId::new(0u16, 40u32),
            is_forward: true,
        }],
    }
}
#[allow(unused)]
fn make_object_2234(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 11285u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "TimeAverage2"),
                crate::types::LocalizedText::new("", "TimeAverage2"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![crate::server::address_space::ImportedReference {
            target_id: crate::types::NodeId::new(0u16, 2340u32),
            type_id: crate::types::NodeId::new(0u16, 40u32),
            is_forward: true,
        }],
    }
}
#[allow(unused)]
fn make_object_2235(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2344u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "Total"),
                crate::types::LocalizedText::new("", "Total"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![crate::server::address_space::ImportedReference {
            target_id: crate::types::NodeId::new(0u16, 2340u32),
            type_id: crate::types::NodeId::new(0u16, 40u32),
            is_forward: true,
        }],
    }
}
#[allow(unused)]
fn make_object_2236(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 11304u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "Total2"),
                crate::types::LocalizedText::new("", "Total2"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![crate::server::address_space::ImportedReference {
            target_id: crate::types::NodeId::new(0u16, 2340u32),
            type_id: crate::types::NodeId::new(0u16, 40u32),
            is_forward: true,
        }],
    }
}
#[allow(unused)]
fn make_object_2237(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2346u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "Minimum"),
                crate::types::LocalizedText::new("", "Minimum"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![crate::server::address_space::ImportedReference {
            target_id: crate::types::NodeId::new(0u16, 2340u32),
            type_id: crate::types::NodeId::new(0u16, 40u32),
            is_forward: true,
        }],
    }
}
#[allow(unused)]
fn make_object_2238(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2347u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "Maximum"),
                crate::types::LocalizedText::new("", "Maximum"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![crate::server::address_space::ImportedReference {
            target_id: crate::types::NodeId::new(0u16, 2340u32),
            type_id: crate::types::NodeId::new(0u16, 40u32),
            is_forward: true,
        }],
    }
}
#[allow(unused)]
fn make_object_2239(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2348u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "MinimumActualTime"),
                crate::types::LocalizedText::new("", "MinimumActualTime"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![crate::server::address_space::ImportedReference {
            target_id: crate::types::NodeId::new(0u16, 2340u32),
            type_id: crate::types::NodeId::new(0u16, 40u32),
            is_forward: true,
        }],
    }
}
#[allow(unused)]
fn make_object_2240(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2349u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "MaximumActualTime"),
                crate::types::LocalizedText::new("", "MaximumActualTime"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![crate::server::address_space::ImportedReference {
            target_id: crate::types::NodeId::new(0u16, 2340u32),
            type_id: crate::types::NodeId::new(0u16, 40u32),
            is_forward: true,
        }],
    }
}
#[allow(unused)]
fn make_object_2241(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2350u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "Range"),
                crate::types::LocalizedText::new("", "Range"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![crate::server::address_space::ImportedReference {
            target_id: crate::types::NodeId::new(0u16, 2340u32),
            type_id: crate::types::NodeId::new(0u16, 40u32),
            is_forward: true,
        }],
    }
}
#[allow(unused)]
fn make_object_2242(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 11286u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "Minimum2"),
                crate::types::LocalizedText::new("", "Minimum2"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![crate::server::address_space::ImportedReference {
            target_id: crate::types::NodeId::new(0u16, 2340u32),
            type_id: crate::types::NodeId::new(0u16, 40u32),
            is_forward: true,
        }],
    }
}
#[allow(unused)]
fn make_object_2243(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 11287u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "Maximum2"),
                crate::types::LocalizedText::new("", "Maximum2"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![crate::server::address_space::ImportedReference {
            target_id: crate::types::NodeId::new(0u16, 2340u32),
            type_id: crate::types::NodeId::new(0u16, 40u32),
            is_forward: true,
        }],
    }
}
#[allow(unused)]
fn make_object_2244(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 11305u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "MinimumActualTime2"),
                crate::types::LocalizedText::new("", "MinimumActualTime2"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![crate::server::address_space::ImportedReference {
            target_id: crate::types::NodeId::new(0u16, 2340u32),
            type_id: crate::types::NodeId::new(0u16, 40u32),
            is_forward: true,
        }],
    }
}
#[allow(unused)]
fn make_object_2245(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 11306u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "MaximumActualTime2"),
                crate::types::LocalizedText::new("", "MaximumActualTime2"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![crate::server::address_space::ImportedReference {
            target_id: crate::types::NodeId::new(0u16, 2340u32),
            type_id: crate::types::NodeId::new(0u16, 40u32),
            is_forward: true,
        }],
    }
}
#[allow(unused)]
fn make_object_2246(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 11288u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "Range2"),
                crate::types::LocalizedText::new("", "Range2"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![crate::server::address_space::ImportedReference {
            target_id: crate::types::NodeId::new(0u16, 2340u32),
            type_id: crate::types::NodeId::new(0u16, 40u32),
            is_forward: true,
        }],
    }
}
#[allow(unused)]
fn make_object_2247(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2351u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "AnnotationCount"),
                crate::types::LocalizedText::new("", "AnnotationCount"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![crate::server::address_space::ImportedReference {
            target_id: crate::types::NodeId::new(0u16, 2340u32),
            type_id: crate::types::NodeId::new(0u16, 40u32),
            is_forward: true,
        }],
    }
}
#[allow(unused)]
fn make_object_2248(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2352u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "Count"),
                crate::types::LocalizedText::new("", "Count"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![crate::server::address_space::ImportedReference {
            target_id: crate::types::NodeId::new(0u16, 2340u32),
            type_id: crate::types::NodeId::new(0u16, 40u32),
            is_forward: true,
        }],
    }
}
#[allow(unused)]
fn make_object_2249(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 11307u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "DurationInStateZero"),
                crate::types::LocalizedText::new("", "DurationInStateZero"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![crate::server::address_space::ImportedReference {
            target_id: crate::types::NodeId::new(0u16, 2340u32),
            type_id: crate::types::NodeId::new(0u16, 40u32),
            is_forward: true,
        }],
    }
}
#[allow(unused)]
fn make_object_2250(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 11308u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "DurationInStateNonZero"),
                crate::types::LocalizedText::new("", "DurationInStateNonZero"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![crate::server::address_space::ImportedReference {
            target_id: crate::types::NodeId::new(0u16, 2340u32),
            type_id: crate::types::NodeId::new(0u16, 40u32),
            is_forward: true,
        }],
    }
}
#[allow(unused)]
fn make_object_2251(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2355u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "NumberOfTransitions"),
                crate::types::LocalizedText::new("", "NumberOfTransitions"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![crate::server::address_space::ImportedReference {
            target_id: crate::types::NodeId::new(0u16, 2340u32),
            type_id: crate::types::NodeId::new(0u16, 40u32),
            is_forward: true,
        }],
    }
}
#[allow(unused)]
fn make_object_2252(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2357u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "Start"),
                crate::types::LocalizedText::new("", "Start"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![crate::server::address_space::ImportedReference {
            target_id: crate::types::NodeId::new(0u16, 2340u32),
            type_id: crate::types::NodeId::new(0u16, 40u32),
            is_forward: true,
        }],
    }
}
#[allow(unused)]
fn make_object_2253(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2358u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "End"),
                crate::types::LocalizedText::new("", "End"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![crate::server::address_space::ImportedReference {
            target_id: crate::types::NodeId::new(0u16, 2340u32),
            type_id: crate::types::NodeId::new(0u16, 40u32),
            is_forward: true,
        }],
    }
}
#[allow(unused)]
fn make_object_2254(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2359u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "Delta"),
                crate::types::LocalizedText::new("", "Delta"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![crate::server::address_space::ImportedReference {
            target_id: crate::types::NodeId::new(0u16, 2340u32),
            type_id: crate::types::NodeId::new(0u16, 40u32),
            is_forward: true,
        }],
    }
}
#[allow(unused)]
fn make_object_2255(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 11505u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "StartBound"),
                crate::types::LocalizedText::new("", "StartBound"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![crate::server::address_space::ImportedReference {
            target_id: crate::types::NodeId::new(0u16, 2340u32),
            type_id: crate::types::NodeId::new(0u16, 40u32),
            is_forward: true,
        }],
    }
}
#[allow(unused)]
fn make_object_2256(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 11506u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "EndBound"),
                crate::types::LocalizedText::new("", "EndBound"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![crate::server::address_space::ImportedReference {
            target_id: crate::types::NodeId::new(0u16, 2340u32),
            type_id: crate::types::NodeId::new(0u16, 40u32),
            is_forward: true,
        }],
    }
}
#[allow(unused)]
fn make_object_2257(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 11507u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "DeltaBounds"),
                crate::types::LocalizedText::new("", "DeltaBounds"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![crate::server::address_space::ImportedReference {
            target_id: crate::types::NodeId::new(0u16, 2340u32),
            type_id: crate::types::NodeId::new(0u16, 40u32),
            is_forward: true,
        }],
    }
}
#[allow(unused)]
fn make_object_2258(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2360u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "DurationGood"),
                crate::types::LocalizedText::new("", "DurationGood"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![crate::server::address_space::ImportedReference {
            target_id: crate::types::NodeId::new(0u16, 2340u32),
            type_id: crate::types::NodeId::new(0u16, 40u32),
            is_forward: true,
        }],
    }
}
#[allow(unused)]
fn make_object_2259(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2361u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "DurationBad"),
                crate::types::LocalizedText::new("", "DurationBad"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![crate::server::address_space::ImportedReference {
            target_id: crate::types::NodeId::new(0u16, 2340u32),
            type_id: crate::types::NodeId::new(0u16, 40u32),
            is_forward: true,
        }],
    }
}
#[allow(unused)]
fn make_object_2260(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2362u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "PercentGood"),
                crate::types::LocalizedText::new("", "PercentGood"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![crate::server::address_space::ImportedReference {
            target_id: crate::types::NodeId::new(0u16, 2340u32),
            type_id: crate::types::NodeId::new(0u16, 40u32),
            is_forward: true,
        }],
    }
}
#[allow(unused)]
fn make_object_2261(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2363u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "PercentBad"),
                crate::types::LocalizedText::new("", "PercentBad"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![crate::server::address_space::ImportedReference {
            target_id: crate::types::NodeId::new(0u16, 2340u32),
            type_id: crate::types::NodeId::new(0u16, 40u32),
            is_forward: true,
        }],
    }
}
#[allow(unused)]
fn make_object_2262(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2364u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "WorstQuality"),
                crate::types::LocalizedText::new("", "WorstQuality"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![crate::server::address_space::ImportedReference {
            target_id: crate::types::NodeId::new(0u16, 2340u32),
            type_id: crate::types::NodeId::new(0u16, 40u32),
            is_forward: true,
        }],
    }
}
#[allow(unused)]
fn make_object_2263(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 11292u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "WorstQuality2"),
                crate::types::LocalizedText::new("", "WorstQuality2"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![crate::server::address_space::ImportedReference {
            target_id: crate::types::NodeId::new(0u16, 2340u32),
            type_id: crate::types::NodeId::new(0u16, 40u32),
            is_forward: true,
        }],
    }
}
#[allow(unused)]
fn make_object_2264(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 11426u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "StandardDeviationSample"),
                crate::types::LocalizedText::new("", "StandardDeviationSample"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![crate::server::address_space::ImportedReference {
            target_id: crate::types::NodeId::new(0u16, 2340u32),
            type_id: crate::types::NodeId::new(0u16, 40u32),
            is_forward: true,
        }],
    }
}
#[allow(unused)]
fn make_object_2265(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 11427u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "StandardDeviationPopulation"),
                crate::types::LocalizedText::new("", "StandardDeviationPopulation"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![crate::server::address_space::ImportedReference {
            target_id: crate::types::NodeId::new(0u16, 2340u32),
            type_id: crate::types::NodeId::new(0u16, 40u32),
            is_forward: true,
        }],
    }
}
#[allow(unused)]
fn make_object_2266(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 11428u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "VarianceSample"),
                crate::types::LocalizedText::new("", "VarianceSample"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![crate::server::address_space::ImportedReference {
            target_id: crate::types::NodeId::new(0u16, 2340u32),
            type_id: crate::types::NodeId::new(0u16, 40u32),
            is_forward: true,
        }],
    }
}
#[allow(unused)]
fn make_object_2267(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 11429u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "VariancePopulation"),
                crate::types::LocalizedText::new("", "VariancePopulation"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![crate::server::address_space::ImportedReference {
            target_id: crate::types::NodeId::new(0u16, 2340u32),
            type_id: crate::types::NodeId::new(0u16, 40u32),
            is_forward: true,
        }],
    }
}
#[allow(unused)]
fn make_object_231(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2744u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "SessionsDiagnosticsSummary"),
                crate::types::LocalizedText::new("", "SessionsDiagnosticsSummary"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 3129u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 3130u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2026u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2020u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_2343(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15913u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "SecurityGroups"),
                crate::types::LocalizedText::new("", "SecurityGroups"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15914u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15917u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15452u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 80u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15906u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_2350(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15453u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "<SecurityGroupFolderName>"),
                crate::types::LocalizedText::new("", "<SecurityGroupFolderName>"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15454u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15457u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15452u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11508u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15452u32),
                type_id: crate::types::NodeId::new(0u16, 35u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_2356(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15459u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "<SecurityGroupName>"),
                crate::types::LocalizedText::new("", "<SecurityGroupName>"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15460u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15010u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15011u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15012u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15043u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15471u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11508u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15452u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_2374(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 14417u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "<ConnectionName>"),
                crate::types::LocalizedText::new("", "<ConnectionName>"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 14418u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 17292u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 17478u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 14423u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 14419u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 14209u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11508u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 14416u32),
                type_id: crate::types::NodeId::new(0u16, 14476u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_2379(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 14423u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "Address"),
                crate::types::LocalizedText::new("", "Address"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15533u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 21145u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 14417u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_238(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 12097u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "<ClientName>"),
                crate::types::LocalizedText::new("", "<ClientName>"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 12098u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 12142u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 12152u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2029u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11508u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2026u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_2382(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 14419u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "Status"),
                crate::types::LocalizedText::new("", "Status"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 14420u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 14643u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 14417u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_2391(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 14434u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "PublishedDataSets"),
                crate::types::LocalizedText::new("", "PublishedDataSets"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 14477u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 14416u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_2392(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15844u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "Status"),
                crate::types::LocalizedText::new("", "Status"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15845u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 14643u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 14416u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_2394(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 18715u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "Diagnostics"),
                crate::types::LocalizedText::new("", "Diagnostics"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 18716u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 18717u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 18722u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 18727u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 18728u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 18729u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 18760u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 19732u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 80u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 14416u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_2406(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 18729u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "Counters"),
                crate::types::LocalizedText::new("", "Counters"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 18730u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 18735u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 18740u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 18745u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 18750u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 18755u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 58u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 18715u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_2431(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 18760u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "LiveValues"),
                crate::types::LocalizedText::new("", "LiveValues"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 18761u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 18763u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 18765u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 18767u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 58u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 18715u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_2441(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 14443u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "PublishSubscribe"),
                crate::types::LocalizedText::new("", "PublishSubscribe"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15215u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15440u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15443u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 17366u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 17369u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 17371u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 17405u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 17409u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 17481u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2253u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 14416u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_2448(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15443u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "SecurityGroups"),
                crate::types::LocalizedText::new("", "SecurityGroups"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15444u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15447u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15452u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 14443u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_2459(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 17371u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "PublishedDataSets"),
                crate::types::LocalizedText::new("", "PublishedDataSets"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 14477u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 14443u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_2460(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 17405u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "Status"),
                crate::types::LocalizedText::new("", "Status"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 17406u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 14643u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 14443u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_2462(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 17409u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "Diagnostics"),
                crate::types::LocalizedText::new("", "Diagnostics"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 17410u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 17411u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 17416u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 17421u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 17422u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 17423u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 17457u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 19732u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 14443u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_2474(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 17423u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "Counters"),
                crate::types::LocalizedText::new("", "Counters"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 17424u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 17431u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 17436u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 17441u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 17446u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 17451u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 58u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 17409u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_2499(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 17457u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "LiveValues"),
                crate::types::LocalizedText::new("", "LiveValues"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 17458u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 17460u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 17462u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 17464u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 58u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 17409u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_2511(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15222u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "<DataSetWriterName>"),
                crate::types::LocalizedText::new("", "<DataSetWriterName>"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 16720u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 16721u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 17482u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15223u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15298u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11508u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 14509u32),
                type_id: crate::types::NodeId::new(0u16, 14936u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_2515(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15223u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "Status"),
                crate::types::LocalizedText::new("", "Status"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15224u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 14643u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15222u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_2520(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15481u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "ExtensionFields"),
                crate::types::LocalizedText::new("", "ExtensionFields"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15482u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15485u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15489u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 80u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 14509u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_2550(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 14478u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "<DataSetFolderName>"),
                crate::types::LocalizedText::new("", "<DataSetFolderName>"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 14479u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 14482u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 16842u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 16881u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 14485u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 16884u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 16923u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 14477u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11508u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 14477u32),
                type_id: crate::types::NodeId::new(0u16, 35u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_2570(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 14487u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "<PublishedDataSetName>"),
                crate::types::LocalizedText::new("", "<PublishedDataSetName>"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 14489u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15221u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 14509u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11508u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 14477u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_2597(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 14221u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "Address"),
                crate::types::LocalizedText::new("", "Address"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 17202u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 21145u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 14209u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_2600(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 17203u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "TransportSettings"),
                crate::types::LocalizedText::new("", "TransportSettings"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 17721u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 80u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 14209u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_2601(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 17310u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "<WriterGroupName>"),
                crate::types::LocalizedText::new("", "<WriterGroupName>"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 17311u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 17204u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 17486u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 17314u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 17214u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 17318u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 17319u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 17321u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 17322u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 17558u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 17725u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11508u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 14209u32),
                type_id: crate::types::NodeId::new(0u16, 18804u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_2605(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 17314u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "Status"),
                crate::types::LocalizedText::new("", "Status"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 17315u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 14643u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 17310u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_2613(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 17325u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "<ReaderGroupName>"),
                crate::types::LocalizedText::new("", "<ReaderGroupName>"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 17326u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 17302u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 17487u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 17329u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 17999u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11508u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 14209u32),
                type_id: crate::types::NodeId::new(0u16, 18805u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_2617(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 17329u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "Status"),
                crate::types::LocalizedText::new("", "Status"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 17330u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 14643u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 17325u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_2619(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 14600u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "Status"),
                crate::types::LocalizedText::new("", "Status"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 14601u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 14643u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 14209u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_2621(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 19241u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "Diagnostics"),
                crate::types::LocalizedText::new("", "Diagnostics"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 19242u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 19243u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 19248u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 19253u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 19254u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 19255u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 19286u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 19786u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 80u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 14209u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_2633(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 19255u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "Counters"),
                crate::types::LocalizedText::new("", "Counters"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 19256u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 19261u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 19266u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 19271u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 19276u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 19281u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 58u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 19241u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_2658(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 19286u32),
                crate::types::NodeClass::Object,
                crate::types::QualifiedName::new(0u16, "LiveValues"),
                crate::types::LocalizedText::new("", "LiveValues"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 19287u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 58u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 19241u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
