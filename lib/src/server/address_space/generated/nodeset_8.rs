// OPCUA for Rust
// SPDX-License-Identifier: MPL-2.0
// Copyright (C) 2017-2024 Adam Lock, Einar Omang
//
// This file was autogenerated from tools/schema/schemas/1.0.4/Opc.Ua.NodeSet2.xml by opcua-codegen
//
// DO NOT EDIT THIS FILE
pub(super) fn imported_nodes<'a>(
    ns_map: &'a crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> Box<dyn Iterator<Item = crate::server::address_space::ImportedItem> + 'a> {
    Box::new(
        [
            &make_object_2676
                as &dyn Fn(_) -> crate::server::address_space::ImportedItem,
            &make_object_2685,
            &make_object_2686,
            &make_object_2687,
            &make_object_2691,
            &make_object_2693,
            &make_object_2705,
            &make_object_2742,
            &make_object_2757,
            &make_object_2767,
            &make_object_2769,
            &make_object_2770,
            &make_object_2782,
            &make_object_2811,
            &make_object_2816,
            &make_object_2817,
            &make_object_2832,
            &make_object_2833,
            &make_object_2834,
            &make_object_2836,
            &make_object_2848,
            &make_object_2877,
            &make_object_2893,
            &make_object_2894,
            &make_object_2895,
            &make_object_2897,
            &make_object_2909,
            &make_object_2938,
            &make_object_2939,
            &make_object_2974,
            &make_object_2999,
            &make_object_3010,
            &make_object_3020,
            &make_object_3024,
            &make_object_3037,
            &make_object_3047,
            &make_object_3060,
            &make_object_3066,
            &make_object_3071,
            &make_object_3081,
            &make_object_3090,
            &make_object_3141,
            &make_object_3175,
            &make_object_3176,
            &make_object_3185,
            &make_object_3189,
            &make_object_3193,
            &make_object_3326,
            &make_object_3327,
            &make_object_3328,
            &make_object_3329,
            &make_object_3330,
            &make_object_3331,
            &make_object_3332,
            &make_object_3333,
            &make_object_3334,
            &make_object_3335,
            &make_object_3336,
            &make_object_3337,
            &make_object_3338,
            &make_object_3339,
            &make_object_3340,
            &make_object_3341,
            &make_object_3342,
            &make_object_3343,
            &make_object_3344,
            &make_object_3345,
            &make_object_3346,
            &make_object_3347,
            &make_object_3348,
            &make_object_3349,
            &make_object_3350,
            &make_object_3351,
            &make_object_3352,
            &make_object_3353,
            &make_object_3354,
            &make_object_3355,
            &make_object_3356,
            &make_object_3357,
            &make_object_3358,
            &make_object_3359,
            &make_object_3360,
            &make_object_3361,
            &make_object_3362,
            &make_object_3363,
            &make_object_3364,
            &make_object_3365,
            &make_object_3366,
            &make_object_3367,
            &make_object_3368,
            &make_object_3369,
            &make_object_3370,
            &make_object_3371,
            &make_object_3372,
            &make_object_3373,
            &make_object_3374,
            &make_object_3375,
            &make_object_3376,
            &make_object_3377,
            &make_object_3378,
        ]
            .into_iter()
            .map(|f| f(ns_map)),
    )
}
#[allow(unused)]
fn make_object_2676(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 15265u32),
                    crate::types::NodeClass::Object,
                    crate::types::QualifiedName::new(0u16, "Status"),
                    crate::types::LocalizedText::new("", "Status"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15266u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 14643u32), type_id : crate
            ::types::NodeId::new(0u16, 40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 14232u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_2685(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17741u32),
                    crate::types::NodeClass::Object,
                    crate::types::QualifiedName::new(0u16, "TransportSettings"),
                    crate::types::LocalizedText::new("", "TransportSettings"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17997u32), type_id : crate
            ::types::NodeId::new(0u16, 40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 80u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17725u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_2686(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17742u32),
                    crate::types::NodeClass::Object,
                    crate::types::QualifiedName::new(0u16, "MessageSettings"),
                    crate::types::LocalizedText::new("", "MessageSettings"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17998u32), type_id : crate
            ::types::NodeId::new(0u16, 40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 80u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17725u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_2687(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17743u32),
                    crate::types::NodeClass::Object,
                    crate::types::QualifiedName::new(0u16, "<DataSetWriterName>"),
                    crate::types::LocalizedText::new("", "<DataSetWriterName>"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17744u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17745u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17490u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17749u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15298u32), type_id : crate
            ::types::NodeId::new(0u16, 40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 11508u32), type_id : crate
            ::types::NodeId::new(0u16, 37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17725u32), type_id : crate
            ::types::NodeId::new(0u16, 15296u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_2691(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17749u32),
                    crate::types::NodeClass::Object,
                    crate::types::QualifiedName::new(0u16, "Status"),
                    crate::types::LocalizedText::new("", "Status"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17750u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 14643u32), type_id : crate
            ::types::NodeId::new(0u16, 40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17743u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_2693(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17812u32),
                    crate::types::NodeClass::Object,
                    crate::types::QualifiedName::new(0u16, "Diagnostics"),
                    crate::types::LocalizedText::new("", "Diagnostics"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17813u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17814u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17819u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17824u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17825u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17826u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17858u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19834u32), type_id : crate
            ::types::NodeId::new(0u16, 40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 80u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17725u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_2705(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17826u32),
                    crate::types::NodeClass::Object,
                    crate::types::QualifiedName::new(0u16, "Counters"),
                    crate::types::LocalizedText::new("", "Counters"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17827u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17832u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17837u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17842u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17847u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17853u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17859u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17874u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17900u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 58u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17812u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_2742(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17858u32),
                    crate::types::NodeClass::Object,
                    crate::types::QualifiedName::new(0u16, "LiveValues"),
                    crate::types::LocalizedText::new("", "LiveValues"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17913u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17927u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 58u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17812u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_2757(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 18076u32),
                    crate::types::NodeClass::Object,
                    crate::types::QualifiedName::new(0u16, "<DataSetReaderName>"),
                    crate::types::LocalizedText::new("", "<DataSetReaderName>"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 18077u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 18078u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 18079u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 18080u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 18081u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 18082u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17560u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17562u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17492u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 18088u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21006u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15306u32), type_id : crate
            ::types::NodeId::new(0u16, 40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 11508u32), type_id : crate
            ::types::NodeId::new(0u16, 37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17999u32), type_id : crate
            ::types::NodeId::new(0u16, 15297u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_2767(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 18088u32),
                    crate::types::NodeClass::Object,
                    crate::types::QualifiedName::new(0u16, "Status"),
                    crate::types::LocalizedText::new("", "Status"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 18089u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 14643u32), type_id : crate
            ::types::NodeId::new(0u16, 40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 18076u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_2769(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 21006u32),
                    crate::types::NodeClass::Object,
                    crate::types::QualifiedName::new(0u16, "SubscribedDataSet"),
                    crate::types::LocalizedText::new("", "SubscribedDataSet"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15108u32), type_id : crate
            ::types::NodeId::new(0u16, 40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 18076u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_2770(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 21015u32),
                    crate::types::NodeClass::Object,
                    crate::types::QualifiedName::new(0u16, "Diagnostics"),
                    crate::types::LocalizedText::new("", "Diagnostics"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21016u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21017u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21022u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21027u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21028u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21029u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21060u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19903u32), type_id : crate
            ::types::NodeId::new(0u16, 40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 80u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17999u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_2782(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 21029u32),
                    crate::types::NodeClass::Object,
                    crate::types::QualifiedName::new(0u16, "Counters"),
                    crate::types::LocalizedText::new("", "Counters"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21030u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21035u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21040u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21045u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21050u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21055u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21061u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 58u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21015u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_2811(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 21060u32),
                    crate::types::NodeClass::Object,
                    crate::types::QualifiedName::new(0u16, "LiveValues"),
                    crate::types::LocalizedText::new("", "LiveValues"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21076u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21078u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 58u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21015u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_2816(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 21080u32),
                    crate::types::NodeClass::Object,
                    crate::types::QualifiedName::new(0u16, "TransportSettings"),
                    crate::types::LocalizedText::new("", "TransportSettings"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21090u32), type_id : crate
            ::types::NodeId::new(0u16, 40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 80u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17999u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_2817(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 21081u32),
                    crate::types::NodeClass::Object,
                    crate::types::QualifiedName::new(0u16, "MessageSettings"),
                    crate::types::LocalizedText::new("", "MessageSettings"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21091u32), type_id : crate
            ::types::NodeId::new(0u16, 40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 80u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17999u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_2832(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 15303u32),
                    crate::types::NodeClass::Object,
                    crate::types::QualifiedName::new(0u16, "TransportSettings"),
                    crate::types::LocalizedText::new("", "TransportSettings"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15305u32), type_id : crate
            ::types::NodeId::new(0u16, 40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 80u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15298u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_2833(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 21095u32),
                    crate::types::NodeClass::Object,
                    crate::types::QualifiedName::new(0u16, "MessageSettings"),
                    crate::types::LocalizedText::new("", "MessageSettings"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21096u32), type_id : crate
            ::types::NodeId::new(0u16, 40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 80u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15298u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_2834(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 15299u32),
                    crate::types::NodeClass::Object,
                    crate::types::QualifiedName::new(0u16, "Status"),
                    crate::types::LocalizedText::new("", "Status"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15300u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 14643u32), type_id : crate
            ::types::NodeId::new(0u16, 40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15298u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_2836(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 19550u32),
                    crate::types::NodeClass::Object,
                    crate::types::QualifiedName::new(0u16, "Diagnostics"),
                    crate::types::LocalizedText::new("", "Diagnostics"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19551u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19552u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19557u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19562u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19563u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19564u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19595u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19968u32), type_id : crate
            ::types::NodeId::new(0u16, 40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 80u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15298u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_2848(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 19564u32),
                    crate::types::NodeClass::Object,
                    crate::types::QualifiedName::new(0u16, "Counters"),
                    crate::types::LocalizedText::new("", "Counters"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19565u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19570u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19575u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19580u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19585u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19590u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19596u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 58u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19550u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_2877(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 19595u32),
                    crate::types::NodeClass::Object,
                    crate::types::QualifiedName::new(0u16, "LiveValues"),
                    crate::types::LocalizedText::new("", "LiveValues"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 58u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19550u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_2893(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 15311u32),
                    crate::types::NodeClass::Object,
                    crate::types::QualifiedName::new(0u16, "TransportSettings"),
                    crate::types::LocalizedText::new("", "TransportSettings"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15319u32), type_id : crate
            ::types::NodeId::new(0u16, 40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 80u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15306u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_2894(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 21103u32),
                    crate::types::NodeClass::Object,
                    crate::types::QualifiedName::new(0u16, "MessageSettings"),
                    crate::types::LocalizedText::new("", "MessageSettings"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21104u32), type_id : crate
            ::types::NodeId::new(0u16, 40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 80u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15306u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_2895(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 15307u32),
                    crate::types::NodeClass::Object,
                    crate::types::QualifiedName::new(0u16, "Status"),
                    crate::types::LocalizedText::new("", "Status"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15308u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 14643u32), type_id : crate
            ::types::NodeId::new(0u16, 40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15306u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_2897(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 19609u32),
                    crate::types::NodeClass::Object,
                    crate::types::QualifiedName::new(0u16, "Diagnostics"),
                    crate::types::LocalizedText::new("", "Diagnostics"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19610u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19611u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19616u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19621u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19622u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19623u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19654u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 20027u32), type_id : crate
            ::types::NodeId::new(0u16, 40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 80u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15306u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_2909(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 19623u32),
                    crate::types::NodeClass::Object,
                    crate::types::QualifiedName::new(0u16, "Counters"),
                    crate::types::LocalizedText::new("", "Counters"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19624u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19629u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19634u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19639u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19644u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19649u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19655u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 58u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19609u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_2938(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 19654u32),
                    crate::types::NodeClass::Object,
                    crate::types::QualifiedName::new(0u16, "LiveValues"),
                    crate::types::LocalizedText::new("", "LiveValues"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 58u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19609u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_2939(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 15316u32),
                    crate::types::NodeClass::Object,
                    crate::types::QualifiedName::new(0u16, "SubscribedDataSet"),
                    crate::types::LocalizedText::new("", "SubscribedDataSet"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15108u32), type_id : crate
            ::types::NodeId::new(0u16, 40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15306u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_2974(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 19691u32),
                    crate::types::NodeClass::Object,
                    crate::types::QualifiedName::new(0u16, "Counters"),
                    crate::types::LocalizedText::new("", "Counters"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19692u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19697u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19702u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19707u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19712u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19717u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 58u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19677u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_2999(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 19722u32),
                    crate::types::NodeClass::Object,
                    crate::types::QualifiedName::new(0u16, "LiveValues"),
                    crate::types::LocalizedText::new("", "LiveValues"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 58u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19677u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_3010(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 19777u32),
                    crate::types::NodeClass::Object,
                    crate::types::QualifiedName::new(0u16, "LiveValues"),
                    crate::types::LocalizedText::new("", "LiveValues"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19778u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19780u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19782u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19784u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 58u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19732u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_3020(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 19831u32),
                    crate::types::NodeClass::Object,
                    crate::types::QualifiedName::new(0u16, "LiveValues"),
                    crate::types::LocalizedText::new("", "LiveValues"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19832u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 58u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19786u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_3024(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 19848u32),
                    crate::types::NodeClass::Object,
                    crate::types::QualifiedName::new(0u16, "Counters"),
                    crate::types::LocalizedText::new("", "Counters"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19880u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19885u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19890u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 58u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19834u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_3037(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 19879u32),
                    crate::types::NodeClass::Object,
                    crate::types::QualifiedName::new(0u16, "LiveValues"),
                    crate::types::LocalizedText::new("", "LiveValues"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19895u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19897u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19899u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19901u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 58u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19834u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_3047(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 19917u32),
                    crate::types::NodeClass::Object,
                    crate::types::QualifiedName::new(0u16, "Counters"),
                    crate::types::LocalizedText::new("", "Counters"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19949u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19954u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19959u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 58u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19903u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_3060(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 19948u32),
                    crate::types::NodeClass::Object,
                    crate::types::QualifiedName::new(0u16, "LiveValues"),
                    crate::types::LocalizedText::new("", "LiveValues"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19964u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19966u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 58u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19903u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_3066(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 19982u32),
                    crate::types::NodeClass::Object,
                    crate::types::QualifiedName::new(0u16, "Counters"),
                    crate::types::LocalizedText::new("", "Counters"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 20014u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 58u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19968u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_3071(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 20013u32),
                    crate::types::NodeClass::Object,
                    crate::types::QualifiedName::new(0u16, "LiveValues"),
                    crate::types::LocalizedText::new("", "LiveValues"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 20019u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 20021u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 20023u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 20025u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 58u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19968u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_3081(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 20041u32),
                    crate::types::NodeClass::Object,
                    crate::types::QualifiedName::new(0u16, "Counters"),
                    crate::types::LocalizedText::new("", "Counters"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 20073u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 20078u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 58u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 20027u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_3090(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 20072u32),
                    crate::types::NodeClass::Object,
                    crate::types::QualifiedName::new(0u16, "LiveValues"),
                    crate::types::LocalizedText::new("", "LiveValues"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 20083u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 20085u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 20087u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 20089u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 20091u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 20093u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 58u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 20027u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_3141(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 15072u32),
                    crate::types::NodeClass::Object,
                    crate::types::QualifiedName::new(0u16, "DiscoveryAddress"),
                    crate::types::LocalizedText::new("", "DiscoveryAddress"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15154u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21145u32), type_id : crate
            ::types::NodeId::new(0u16, 40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15064u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_3175(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 23457u32),
                    crate::types::NodeClass::Object,
                    crate::types::QualifiedName::new(0u16, "<Alias>"),
                    crate::types::LocalizedText::new("", "<Alias>"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 23455u32), type_id : crate
            ::types::NodeId::new(0u16, 40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 11508u32), type_id : crate
            ::types::NodeId::new(0u16, 37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 23456u32), type_id : crate
            ::types::NodeId::new(0u16, 35u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_3176(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 23458u32),
                    crate::types::NodeClass::Object,
                    crate::types::QualifiedName::new(0u16, "<SubAliasNameCategories>"),
                    crate::types::LocalizedText::new("", "<SubAliasNameCategories>"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 23459u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 23456u32), type_id : crate
            ::types::NodeId::new(0u16, 40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 11508u32), type_id : crate
            ::types::NodeId::new(0u16, 37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 23456u32), type_id : crate
            ::types::NodeId::new(0u16, 35u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_3185(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 23470u32),
                    crate::types::NodeClass::Object,
                    crate::types::QualifiedName::new(0u16, "Aliases"),
                    crate::types::LocalizedText::new("", "Aliases"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 23476u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 85u32), type_id : crate ::types::NodeId::new(0u16,
            35u32), is_forward : false, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 23456u32), type_id : crate
            ::types::NodeId::new(0u16, 40u32), is_forward : true, }
        ],
    }
}
#[allow(unused)]
fn make_object_3189(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 23479u32),
                    crate::types::NodeClass::Object,
                    crate::types::QualifiedName::new(0u16, "TagVariables"),
                    crate::types::LocalizedText::new("", "TagVariables"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 23485u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 23470u32), type_id : crate
            ::types::NodeId::new(0u16, 35u32), is_forward : false, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 23456u32), type_id : crate
            ::types::NodeId::new(0u16, 40u32), is_forward : true, }
        ],
    }
}
#[allow(unused)]
fn make_object_3193(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 23488u32),
                    crate::types::NodeClass::Object,
                    crate::types::QualifiedName::new(0u16, "Topics"),
                    crate::types::LocalizedText::new("", "Topics"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 23494u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 23470u32), type_id : crate
            ::types::NodeId::new(0u16, 35u32), is_forward : false, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 23456u32), type_id : crate
            ::types::NodeId::new(0u16, 40u32), is_forward : true, }
        ],
    }
}
#[allow(unused)]
fn make_object_3326(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 14846u32),
                    crate::types::NodeClass::Object,
                    crate::types::QualifiedName::new(0u16, "Default Binary"),
                    crate::types::LocalizedText::new("", "Default Binary"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 14533u32), type_id : crate
            ::types::NodeId::new(0u16, 38u32), is_forward : false, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 14873u32), type_id : crate
            ::types::NodeId::new(0u16, 39u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 76u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }
        ],
    }
}
#[allow(unused)]
fn make_object_3327(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17537u32),
                    crate::types::NodeClass::Object,
                    crate::types::QualifiedName::new(0u16, "Default Binary"),
                    crate::types::LocalizedText::new("", "Default Binary"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 16313u32), type_id : crate
            ::types::NodeId::new(0u16, 38u32), is_forward : false, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17538u32), type_id : crate
            ::types::NodeId::new(0u16, 39u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 76u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }
        ],
    }
}
#[allow(unused)]
fn make_object_3328(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17549u32),
                    crate::types::NodeClass::Object,
                    crate::types::QualifiedName::new(0u16, "Default Binary"),
                    crate::types::LocalizedText::new("", "Default Binary"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17548u32), type_id : crate
            ::types::NodeId::new(0u16, 38u32), is_forward : false, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17550u32), type_id : crate
            ::types::NodeId::new(0u16, 39u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 76u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }
        ],
    }
}
#[allow(unused)]
fn make_object_3329(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 15671u32),
                    crate::types::NodeClass::Object,
                    crate::types::QualifiedName::new(0u16, "Default Binary"),
                    crate::types::LocalizedText::new("", "Default Binary"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15528u32), type_id : crate
            ::types::NodeId::new(0u16, 38u32), is_forward : false, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15734u32), type_id : crate
            ::types::NodeId::new(0u16, 39u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 76u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }
        ],
    }
}
#[allow(unused)]
fn make_object_3330(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 18815u32),
                    crate::types::NodeClass::Object,
                    crate::types::QualifiedName::new(0u16, "Default Binary"),
                    crate::types::LocalizedText::new("", "Default Binary"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 18806u32), type_id : crate
            ::types::NodeId::new(0u16, 38u32), is_forward : false, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 18824u32), type_id : crate
            ::types::NodeId::new(0u16, 39u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 76u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }
        ],
    }
}
#[allow(unused)]
fn make_object_3331(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 18816u32),
                    crate::types::NodeClass::Object,
                    crate::types::QualifiedName::new(0u16, "Default Binary"),
                    crate::types::LocalizedText::new("", "Default Binary"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 18807u32), type_id : crate
            ::types::NodeId::new(0u16, 38u32), is_forward : false, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 18827u32), type_id : crate
            ::types::NodeId::new(0u16, 39u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 76u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }
        ],
    }
}
#[allow(unused)]
fn make_object_3332(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 18817u32),
                    crate::types::NodeClass::Object,
                    crate::types::QualifiedName::new(0u16, "Default Binary"),
                    crate::types::LocalizedText::new("", "Default Binary"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 18808u32), type_id : crate
            ::types::NodeId::new(0u16, 38u32), is_forward : false, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 18830u32), type_id : crate
            ::types::NodeId::new(0u16, 39u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 76u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }
        ],
    }
}
#[allow(unused)]
fn make_object_3333(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 18818u32),
                    crate::types::NodeClass::Object,
                    crate::types::QualifiedName::new(0u16, "Default Binary"),
                    crate::types::LocalizedText::new("", "Default Binary"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 18809u32), type_id : crate
            ::types::NodeId::new(0u16, 38u32), is_forward : false, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 18833u32), type_id : crate
            ::types::NodeId::new(0u16, 39u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 76u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }
        ],
    }
}
#[allow(unused)]
fn make_object_3334(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 18819u32),
                    crate::types::NodeClass::Object,
                    crate::types::QualifiedName::new(0u16, "Default Binary"),
                    crate::types::LocalizedText::new("", "Default Binary"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 18810u32), type_id : crate
            ::types::NodeId::new(0u16, 38u32), is_forward : false, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 18836u32), type_id : crate
            ::types::NodeId::new(0u16, 39u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 76u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }
        ],
    }
}
#[allow(unused)]
fn make_object_3335(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 18820u32),
                    crate::types::NodeClass::Object,
                    crate::types::QualifiedName::new(0u16, "Default Binary"),
                    crate::types::LocalizedText::new("", "Default Binary"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 18811u32), type_id : crate
            ::types::NodeId::new(0u16, 38u32), is_forward : false, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 18839u32), type_id : crate
            ::types::NodeId::new(0u16, 39u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 76u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }
        ],
    }
}
#[allow(unused)]
fn make_object_3336(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 18821u32),
                    crate::types::NodeClass::Object,
                    crate::types::QualifiedName::new(0u16, "Default Binary"),
                    crate::types::LocalizedText::new("", "Default Binary"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 18812u32), type_id : crate
            ::types::NodeId::new(0u16, 38u32), is_forward : false, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 18842u32), type_id : crate
            ::types::NodeId::new(0u16, 39u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 76u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }
        ],
    }
}
#[allow(unused)]
fn make_object_3337(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 18822u32),
                    crate::types::NodeClass::Object,
                    crate::types::QualifiedName::new(0u16, "Default Binary"),
                    crate::types::LocalizedText::new("", "Default Binary"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 18813u32), type_id : crate
            ::types::NodeId::new(0u16, 38u32), is_forward : false, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 18845u32), type_id : crate
            ::types::NodeId::new(0u16, 39u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 76u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }
        ],
    }
}
#[allow(unused)]
fn make_object_3338(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 18823u32),
                    crate::types::NodeClass::Object,
                    crate::types::QualifiedName::new(0u16, "Default Binary"),
                    crate::types::LocalizedText::new("", "Default Binary"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 18814u32), type_id : crate
            ::types::NodeId::new(0u16, 38u32), is_forward : false, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 18848u32), type_id : crate
            ::types::NodeId::new(0u16, 39u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 76u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }
        ],
    }
}
#[allow(unused)]
fn make_object_3339(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 15736u32),
                    crate::types::NodeClass::Object,
                    crate::types::QualifiedName::new(0u16, "Default Binary"),
                    crate::types::LocalizedText::new("", "Default Binary"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15634u32), type_id : crate
            ::types::NodeId::new(0u16, 38u32), is_forward : false, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15738u32), type_id : crate
            ::types::NodeId::new(0u16, 39u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 76u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }
        ],
    }
}
#[allow(unused)]
fn make_object_3340(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 23507u32),
                    crate::types::NodeClass::Object,
                    crate::types::QualifiedName::new(0u16, "Default Binary"),
                    crate::types::LocalizedText::new("", "Default Binary"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 23498u32), type_id : crate
            ::types::NodeId::new(0u16, 38u32), is_forward : false, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 23514u32), type_id : crate
            ::types::NodeId::new(0u16, 39u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 76u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }
        ],
    }
}
#[allow(unused)]
fn make_object_3341(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 12680u32),
                    crate::types::NodeClass::Object,
                    crate::types::QualifiedName::new(0u16, "Default Binary"),
                    crate::types::LocalizedText::new("", "Default Binary"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12554u32), type_id : crate
            ::types::NodeId::new(0u16, 38u32), is_forward : false, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12681u32), type_id : crate
            ::types::NodeId::new(0u16, 39u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 76u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }
        ],
    }
}
#[allow(unused)]
fn make_object_3342(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 15676u32),
                    crate::types::NodeClass::Object,
                    crate::types::QualifiedName::new(0u16, "Default Binary"),
                    crate::types::LocalizedText::new("", "Default Binary"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15534u32), type_id : crate
            ::types::NodeId::new(0u16, 38u32), is_forward : false, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15741u32), type_id : crate
            ::types::NodeId::new(0u16, 39u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 76u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }
        ],
    }
}
#[allow(unused)]
fn make_object_3343(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 125u32),
                    crate::types::NodeClass::Object,
                    crate::types::QualifiedName::new(0u16, "Default Binary"),
                    crate::types::LocalizedText::new("", "Default Binary"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 14525u32), type_id : crate
            ::types::NodeId::new(0u16, 38u32), is_forward : false, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 14855u32), type_id : crate
            ::types::NodeId::new(0u16, 39u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 76u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }
        ],
    }
}
#[allow(unused)]
fn make_object_3344(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 126u32),
                    crate::types::NodeClass::Object,
                    crate::types::QualifiedName::new(0u16, "Default Binary"),
                    crate::types::LocalizedText::new("", "Default Binary"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15487u32), type_id : crate
            ::types::NodeId::new(0u16, 38u32), is_forward : false, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15599u32), type_id : crate
            ::types::NodeId::new(0u16, 39u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 76u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }
        ],
    }
}
#[allow(unused)]
fn make_object_3345(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 127u32),
                    crate::types::NodeClass::Object,
                    crate::types::QualifiedName::new(0u16, "Default Binary"),
                    crate::types::LocalizedText::new("", "Default Binary"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15488u32), type_id : crate
            ::types::NodeId::new(0u16, 38u32), is_forward : false, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15602u32), type_id : crate
            ::types::NodeId::new(0u16, 39u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 76u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }
        ],
    }
}
#[allow(unused)]
fn make_object_3346(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 15421u32),
                    crate::types::NodeClass::Object,
                    crate::types::QualifiedName::new(0u16, "Default Binary"),
                    crate::types::LocalizedText::new("", "Default Binary"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15005u32), type_id : crate
            ::types::NodeId::new(0u16, 38u32), is_forward : false, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15501u32), type_id : crate
            ::types::NodeId::new(0u16, 39u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 76u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }
        ],
    }
}
#[allow(unused)]
fn make_object_3347(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 15422u32),
                    crate::types::NodeClass::Object,
                    crate::types::QualifiedName::new(0u16, "Default Binary"),
                    crate::types::LocalizedText::new("", "Default Binary"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15006u32), type_id : crate
            ::types::NodeId::new(0u16, 38u32), is_forward : false, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15521u32), type_id : crate
            ::types::NodeId::new(0u16, 39u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 76u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }
        ],
    }
}
#[allow(unused)]
fn make_object_3348(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 124u32),
                    crate::types::NodeClass::Object,
                    crate::types::QualifiedName::new(0u16, "Default Binary"),
                    crate::types::LocalizedText::new("", "Default Binary"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 14523u32), type_id : crate
            ::types::NodeId::new(0u16, 38u32), is_forward : false, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 14849u32), type_id : crate
            ::types::NodeId::new(0u16, 39u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 76u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }
        ],
    }
}
#[allow(unused)]
fn make_object_3349(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 14839u32),
                    crate::types::NodeClass::Object,
                    crate::types::QualifiedName::new(0u16, "Default Binary"),
                    crate::types::LocalizedText::new("", "Default Binary"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 14524u32), type_id : crate
            ::types::NodeId::new(0u16, 38u32), is_forward : false, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 14852u32), type_id : crate
            ::types::NodeId::new(0u16, 39u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 76u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }
        ],
    }
}
#[allow(unused)]
fn make_object_3350(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 14847u32),
                    crate::types::NodeClass::Object,
                    crate::types::QualifiedName::new(0u16, "Default Binary"),
                    crate::types::LocalizedText::new("", "Default Binary"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 14593u32), type_id : crate
            ::types::NodeId::new(0u16, 38u32), is_forward : false, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 14876u32), type_id : crate
            ::types::NodeId::new(0u16, 39u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 76u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }
        ],
    }
}
#[allow(unused)]
fn make_object_3351(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 15677u32),
                    crate::types::NodeClass::Object,
                    crate::types::QualifiedName::new(0u16, "Default Binary"),
                    crate::types::LocalizedText::new("", "Default Binary"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15578u32), type_id : crate
            ::types::NodeId::new(0u16, 38u32), is_forward : false, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15766u32), type_id : crate
            ::types::NodeId::new(0u16, 39u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 76u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }
        ],
    }
}
#[allow(unused)]
fn make_object_3352(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 15678u32),
                    crate::types::NodeClass::Object,
                    crate::types::QualifiedName::new(0u16, "Default Binary"),
                    crate::types::LocalizedText::new("", "Default Binary"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15580u32), type_id : crate
            ::types::NodeId::new(0u16, 38u32), is_forward : false, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15769u32), type_id : crate
            ::types::NodeId::new(0u16, 39u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 76u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }
        ],
    }
}
#[allow(unused)]
fn make_object_3353(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 14323u32),
                    crate::types::NodeClass::Object,
                    crate::types::QualifiedName::new(0u16, "Default Binary"),
                    crate::types::LocalizedText::new("", "Default Binary"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 14273u32), type_id : crate
            ::types::NodeId::new(0u16, 38u32), is_forward : false, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 14324u32), type_id : crate
            ::types::NodeId::new(0u16, 39u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 76u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }
        ],
    }
}
#[allow(unused)]
fn make_object_3354(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 15679u32),
                    crate::types::NodeClass::Object,
                    crate::types::QualifiedName::new(0u16, "Default Binary"),
                    crate::types::LocalizedText::new("", "Default Binary"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15581u32), type_id : crate
            ::types::NodeId::new(0u16, 38u32), is_forward : false, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15772u32), type_id : crate
            ::types::NodeId::new(0u16, 39u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 76u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }
        ],
    }
}
#[allow(unused)]
fn make_object_3355(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 15681u32),
                    crate::types::NodeClass::Object,
                    crate::types::QualifiedName::new(0u16, "Default Binary"),
                    crate::types::LocalizedText::new("", "Default Binary"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15582u32), type_id : crate
            ::types::NodeId::new(0u16, 38u32), is_forward : false, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15775u32), type_id : crate
            ::types::NodeId::new(0u16, 39u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 76u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }
        ],
    }
}
#[allow(unused)]
fn make_object_3356(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 15682u32),
                    crate::types::NodeClass::Object,
                    crate::types::QualifiedName::new(0u16, "Default Binary"),
                    crate::types::LocalizedText::new("", "Default Binary"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15597u32), type_id : crate
            ::types::NodeId::new(0u16, 38u32), is_forward : false, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15778u32), type_id : crate
            ::types::NodeId::new(0u16, 39u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 76u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }
        ],
    }
}
#[allow(unused)]
fn make_object_3357(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 15683u32),
                    crate::types::NodeClass::Object,
                    crate::types::QualifiedName::new(0u16, "Default Binary"),
                    crate::types::LocalizedText::new("", "Default Binary"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15598u32), type_id : crate
            ::types::NodeId::new(0u16, 38u32), is_forward : false, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15781u32), type_id : crate
            ::types::NodeId::new(0u16, 39u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 76u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }
        ],
    }
}
#[allow(unused)]
fn make_object_3358(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 15688u32),
                    crate::types::NodeClass::Object,
                    crate::types::QualifiedName::new(0u16, "Default Binary"),
                    crate::types::LocalizedText::new("", "Default Binary"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15605u32), type_id : crate
            ::types::NodeId::new(0u16, 38u32), is_forward : false, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15784u32), type_id : crate
            ::types::NodeId::new(0u16, 39u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 76u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }
        ],
    }
}
#[allow(unused)]
fn make_object_3359(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 15689u32),
                    crate::types::NodeClass::Object,
                    crate::types::QualifiedName::new(0u16, "Default Binary"),
                    crate::types::LocalizedText::new("", "Default Binary"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15609u32), type_id : crate
            ::types::NodeId::new(0u16, 38u32), is_forward : false, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15787u32), type_id : crate
            ::types::NodeId::new(0u16, 39u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 76u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }
        ],
    }
}
#[allow(unused)]
fn make_object_3360(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 21150u32),
                    crate::types::NodeClass::Object,
                    crate::types::QualifiedName::new(0u16, "Default Binary"),
                    crate::types::LocalizedText::new("", "Default Binary"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15480u32), type_id : crate
            ::types::NodeId::new(0u16, 38u32), is_forward : false, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21156u32), type_id : crate
            ::types::NodeId::new(0u16, 39u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 76u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }
        ],
    }
}
#[allow(unused)]
fn make_object_3361(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 15691u32),
                    crate::types::NodeClass::Object,
                    crate::types::QualifiedName::new(0u16, "Default Binary"),
                    crate::types::LocalizedText::new("", "Default Binary"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15611u32), type_id : crate
            ::types::NodeId::new(0u16, 38u32), is_forward : false, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15793u32), type_id : crate
            ::types::NodeId::new(0u16, 39u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 76u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }
        ],
    }
}
#[allow(unused)]
fn make_object_3362(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 15693u32),
                    crate::types::NodeClass::Object,
                    crate::types::QualifiedName::new(0u16, "Default Binary"),
                    crate::types::LocalizedText::new("", "Default Binary"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15616u32), type_id : crate
            ::types::NodeId::new(0u16, 38u32), is_forward : false, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15854u32), type_id : crate
            ::types::NodeId::new(0u16, 39u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 76u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }
        ],
    }
}
#[allow(unused)]
fn make_object_3363(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 15694u32),
                    crate::types::NodeClass::Object,
                    crate::types::QualifiedName::new(0u16, "Default Binary"),
                    crate::types::LocalizedText::new("", "Default Binary"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15617u32), type_id : crate
            ::types::NodeId::new(0u16, 38u32), is_forward : false, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15857u32), type_id : crate
            ::types::NodeId::new(0u16, 39u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 76u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }
        ],
    }
}
#[allow(unused)]
fn make_object_3364(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 15695u32),
                    crate::types::NodeClass::Object,
                    crate::types::QualifiedName::new(0u16, "Default Binary"),
                    crate::types::LocalizedText::new("", "Default Binary"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15618u32), type_id : crate
            ::types::NodeId::new(0u16, 38u32), is_forward : false, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15860u32), type_id : crate
            ::types::NodeId::new(0u16, 39u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 76u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }
        ],
    }
}
#[allow(unused)]
fn make_object_3365(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 21151u32),
                    crate::types::NodeClass::Object,
                    crate::types::QualifiedName::new(0u16, "Default Binary"),
                    crate::types::LocalizedText::new("", "Default Binary"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15502u32), type_id : crate
            ::types::NodeId::new(0u16, 38u32), is_forward : false, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21159u32), type_id : crate
            ::types::NodeId::new(0u16, 39u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 76u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }
        ],
    }
}
#[allow(unused)]
fn make_object_3366(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 21152u32),
                    crate::types::NodeClass::Object,
                    crate::types::QualifiedName::new(0u16, "Default Binary"),
                    crate::types::LocalizedText::new("", "Default Binary"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15510u32), type_id : crate
            ::types::NodeId::new(0u16, 38u32), is_forward : false, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21162u32), type_id : crate
            ::types::NodeId::new(0u16, 39u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 76u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }
        ],
    }
}
#[allow(unused)]
fn make_object_3367(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 21153u32),
                    crate::types::NodeClass::Object,
                    crate::types::QualifiedName::new(0u16, "Default Binary"),
                    crate::types::LocalizedText::new("", "Default Binary"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15520u32), type_id : crate
            ::types::NodeId::new(0u16, 38u32), is_forward : false, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21165u32), type_id : crate
            ::types::NodeId::new(0u16, 39u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 76u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }
        ],
    }
}
#[allow(unused)]
fn make_object_3368(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 15701u32),
                    crate::types::NodeClass::Object,
                    crate::types::QualifiedName::new(0u16, "Default Binary"),
                    crate::types::LocalizedText::new("", "Default Binary"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15621u32), type_id : crate
            ::types::NodeId::new(0u16, 38u32), is_forward : false, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15866u32), type_id : crate
            ::types::NodeId::new(0u16, 39u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 76u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }
        ],
    }
}
#[allow(unused)]
fn make_object_3369(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 15702u32),
                    crate::types::NodeClass::Object,
                    crate::types::QualifiedName::new(0u16, "Default Binary"),
                    crate::types::LocalizedText::new("", "Default Binary"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15622u32), type_id : crate
            ::types::NodeId::new(0u16, 38u32), is_forward : false, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15869u32), type_id : crate
            ::types::NodeId::new(0u16, 39u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 76u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }
        ],
    }
}
#[allow(unused)]
fn make_object_3370(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 15703u32),
                    crate::types::NodeClass::Object,
                    crate::types::QualifiedName::new(0u16, "Default Binary"),
                    crate::types::LocalizedText::new("", "Default Binary"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15623u32), type_id : crate
            ::types::NodeId::new(0u16, 38u32), is_forward : false, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15872u32), type_id : crate
            ::types::NodeId::new(0u16, 39u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 76u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }
        ],
    }
}
#[allow(unused)]
fn make_object_3371(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 15705u32),
                    crate::types::NodeClass::Object,
                    crate::types::QualifiedName::new(0u16, "Default Binary"),
                    crate::types::LocalizedText::new("", "Default Binary"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15628u32), type_id : crate
            ::types::NodeId::new(0u16, 38u32), is_forward : false, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15877u32), type_id : crate
            ::types::NodeId::new(0u16, 39u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 76u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }
        ],
    }
}
#[allow(unused)]
fn make_object_3372(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 15706u32),
                    crate::types::NodeClass::Object,
                    crate::types::QualifiedName::new(0u16, "Default Binary"),
                    crate::types::LocalizedText::new("", "Default Binary"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15629u32), type_id : crate
            ::types::NodeId::new(0u16, 38u32), is_forward : false, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15880u32), type_id : crate
            ::types::NodeId::new(0u16, 39u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 76u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }
        ],
    }
}
#[allow(unused)]
fn make_object_3373(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 15707u32),
                    crate::types::NodeClass::Object,
                    crate::types::QualifiedName::new(0u16, "Default Binary"),
                    crate::types::LocalizedText::new("", "Default Binary"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15630u32), type_id : crate
            ::types::NodeId::new(0u16, 38u32), is_forward : false, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15883u32), type_id : crate
            ::types::NodeId::new(0u16, 39u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 76u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }
        ],
    }
}
#[allow(unused)]
fn make_object_3374(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 15712u32),
                    crate::types::NodeClass::Object,
                    crate::types::QualifiedName::new(0u16, "Default Binary"),
                    crate::types::LocalizedText::new("", "Default Binary"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15631u32), type_id : crate
            ::types::NodeId::new(0u16, 38u32), is_forward : false, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15886u32), type_id : crate
            ::types::NodeId::new(0u16, 39u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 76u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }
        ],
    }
}
#[allow(unused)]
fn make_object_3375(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 14848u32),
                    crate::types::NodeClass::Object,
                    crate::types::QualifiedName::new(0u16, "Default Binary"),
                    crate::types::LocalizedText::new("", "Default Binary"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 14744u32), type_id : crate
            ::types::NodeId::new(0u16, 38u32), is_forward : false, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21002u32), type_id : crate
            ::types::NodeId::new(0u16, 39u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 76u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }
        ],
    }
}
#[allow(unused)]
fn make_object_3376(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 15713u32),
                    crate::types::NodeClass::Object,
                    crate::types::QualifiedName::new(0u16, "Default Binary"),
                    crate::types::LocalizedText::new("", "Default Binary"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15635u32), type_id : crate
            ::types::NodeId::new(0u16, 38u32), is_forward : false, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15889u32), type_id : crate
            ::types::NodeId::new(0u16, 39u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 76u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }
        ],
    }
}
#[allow(unused)]
fn make_object_3377(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 21154u32),
                    crate::types::NodeClass::Object,
                    crate::types::QualifiedName::new(0u16, "Default Binary"),
                    crate::types::LocalizedText::new("", "Default Binary"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15530u32), type_id : crate
            ::types::NodeId::new(0u16, 38u32), is_forward : false, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21168u32), type_id : crate
            ::types::NodeId::new(0u16, 39u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 76u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }
        ],
    }
}
#[allow(unused)]
fn make_object_3378(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Object::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 15715u32),
                    crate::types::NodeClass::Object,
                    crate::types::QualifiedName::new(0u16, "Default Binary"),
                    crate::types::LocalizedText::new("", "Default Binary"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::server::address_space::EventNotifier::from_bits_truncate(0u8),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15645u32), type_id : crate
            ::types::NodeId::new(0u16, 38u32), is_forward : false, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15895u32), type_id : crate
            ::types::NodeId::new(0u16, 39u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 76u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }
        ],
    }
}
