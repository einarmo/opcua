// OPCUA for Rust
// SPDX-License-Identifier: MPL-2.0
// Copyright (C) 2017-2024 Adam Lock, Einar Omang
//
// This file was autogenerated from tools/schema/schemas/1.0.4/Opc.Ua.NodeSet2.xml by opcua-codegen
//
// DO NOT EDIT THIS FILE
pub(super) fn imported_nodes<'a>(
    ns_map: &'a crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> Box<dyn Iterator<Item = crate::server::address_space::ImportedItem> + 'a> {
    Box::new(
        [
            &make_variable_1095 as &dyn Fn(_) -> crate::server::address_space::ImportedItem,
            &make_variable_1096,
            &make_variable_1097,
            &make_variable_1099,
            &make_variable_110,
            &make_variable_1101,
            &make_variable_1103,
            &make_variable_1105,
            &make_variable_1107,
            &make_variable_1109,
            &make_variable_111,
            &make_variable_1111,
            &make_variable_1112,
            &make_variable_1113,
            &make_variable_1114,
            &make_variable_1115,
            &make_variable_1117,
            &make_variable_1119,
            &make_variable_112,
            &make_variable_1121,
            &make_variable_1123,
            &make_variable_1125,
            &make_variable_1127,
            &make_variable_1129,
            &make_variable_113,
            &make_variable_1130,
            &make_variable_1131,
            &make_variable_1132,
            &make_variable_1133,
            &make_variable_1135,
            &make_variable_1137,
            &make_variable_1139,
            &make_variable_114,
            &make_variable_1141,
            &make_variable_1143,
            &make_variable_1145,
            &make_variable_1147,
            &make_variable_1148,
            &make_variable_1149,
            &make_variable_115,
            &make_variable_1150,
            &make_variable_1151,
            &make_variable_1153,
            &make_variable_1155,
            &make_variable_1157,
            &make_variable_1159,
            &make_variable_116,
            &make_variable_1161,
            &make_variable_1163,
            &make_variable_1165,
            &make_variable_1166,
            &make_variable_1167,
            &make_variable_1168,
            &make_variable_1169,
            &make_variable_117,
            &make_variable_1171,
            &make_variable_1173,
            &make_variable_1175,
            &make_variable_1177,
            &make_variable_1179,
            &make_variable_118,
            &make_variable_1181,
            &make_variable_1183,
            &make_variable_1184,
            &make_variable_1185,
            &make_variable_1186,
            &make_variable_1187,
            &make_variable_1189,
            &make_variable_119,
            &make_variable_1191,
            &make_variable_1193,
            &make_variable_1195,
            &make_variable_1197,
            &make_variable_1199,
            &make_variable_120,
            &make_variable_1201,
            &make_variable_1202,
            &make_variable_1203,
            &make_variable_1204,
            &make_variable_1205,
            &make_variable_1207,
            &make_variable_1209,
            &make_variable_121,
            &make_variable_1211,
            &make_variable_1213,
            &make_variable_1215,
            &make_variable_1217,
            &make_variable_1219,
            &make_variable_122,
            &make_variable_1220,
            &make_variable_1221,
            &make_variable_1222,
            &make_variable_1223,
            &make_variable_1225,
            &make_variable_1227,
            &make_variable_1229,
            &make_variable_123,
            &make_variable_1231,
            &make_variable_1233,
            &make_variable_1235,
        ]
        .into_iter()
        .map(|f| f(ns_map)),
    )
}
#[allow(unused)]
fn make_variable_1095(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15412u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "ApplicationsExclude"),
                crate::types::LocalizedText::new("", "ApplicationsExclude"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 1u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15644u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1096(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 16194u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "Endpoints"),
                crate::types::LocalizedText::new("", "Endpoints"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 15528u32),
            false,
            1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15644u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1097(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15413u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "EndpointsExclude"),
                crate::types::LocalizedText::new("", "EndpointsExclude"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 1u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15644u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1099(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15649u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "InputArguments"),
                crate::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 15634u32),
                    description: Default::default(),
                    name: "Rule".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15648u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_110(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 3067u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "Icon"),
                crate::types::LocalizedText::new("", "Icon"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 30u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![crate::server::address_space::ImportedReference {
            target_id: crate::types::NodeId::new(0u16, 68u32),
            type_id: crate::types::NodeId::new(0u16, 40u32),
            is_forward: true,
        }],
    }
}
#[allow(unused)]
fn make_variable_1101(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15651u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "InputArguments"),
                crate::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 15634u32),
                    description: Default::default(),
                    name: "Rule".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15650u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1103(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 16196u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "InputArguments"),
                crate::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 12u32),
                    description: Default::default(),
                    name: "ApplicationUri".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 16195u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1105(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 16198u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "InputArguments"),
                crate::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 12u32),
                    description: Default::default(),
                    name: "ApplicationUri".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 16197u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1107(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 16200u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "InputArguments"),
                crate::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 15528u32),
                    description: Default::default(),
                    name: "Endpoint".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 16199u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1109(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 16202u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "InputArguments"),
                crate::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 15528u32),
                    description: Default::default(),
                    name: "Endpoint".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 16201u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_111(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 3069u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "LocalTime"),
                crate::types::LocalizedText::new("", "LocalTime"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 8912u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![crate::server::address_space::ImportedReference {
            target_id: crate::types::NodeId::new(0u16, 68u32),
            type_id: crate::types::NodeId::new(0u16, 40u32),
            is_forward: true,
        }],
    }
}
#[allow(unused)]
fn make_variable_1111(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 16203u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "Identities"),
                crate::types::LocalizedText::new("", "Identities"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 15634u32),
            false,
            1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15656u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1112(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 16204u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "Applications"),
                crate::types::LocalizedText::new("", "Applications"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 12u32),
            false,
            1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15656u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1113(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15414u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "ApplicationsExclude"),
                crate::types::LocalizedText::new("", "ApplicationsExclude"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 1u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15656u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1114(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 16205u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "Endpoints"),
                crate::types::LocalizedText::new("", "Endpoints"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 15528u32),
            false,
            1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15656u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1115(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15415u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "EndpointsExclude"),
                crate::types::LocalizedText::new("", "EndpointsExclude"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 1u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15656u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1117(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15661u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "InputArguments"),
                crate::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 15634u32),
                    description: Default::default(),
                    name: "Rule".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15660u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1119(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15663u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "InputArguments"),
                crate::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 15634u32),
                    description: Default::default(),
                    name: "Rule".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15662u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_112(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 3070u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "AllowNulls"),
                crate::types::LocalizedText::new("", "AllowNulls"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 1u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![crate::server::address_space::ImportedReference {
            target_id: crate::types::NodeId::new(0u16, 68u32),
            type_id: crate::types::NodeId::new(0u16, 40u32),
            is_forward: true,
        }],
    }
}
#[allow(unused)]
fn make_variable_1121(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 16207u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "InputArguments"),
                crate::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 12u32),
                    description: Default::default(),
                    name: "ApplicationUri".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 16206u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1123(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 16209u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "InputArguments"),
                crate::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 12u32),
                    description: Default::default(),
                    name: "ApplicationUri".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 16208u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1125(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 16211u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "InputArguments"),
                crate::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 15528u32),
                    description: Default::default(),
                    name: "Endpoint".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 16210u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1127(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 16213u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "InputArguments"),
                crate::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 15528u32),
                    description: Default::default(),
                    name: "Endpoint".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 16212u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1129(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 16214u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "Identities"),
                crate::types::LocalizedText::new("", "Identities"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 15634u32),
            false,
            1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15668u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_113(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 11433u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "ValueAsText"),
                crate::types::LocalizedText::new("", "ValueAsText"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 21u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![crate::server::address_space::ImportedReference {
            target_id: crate::types::NodeId::new(0u16, 68u32),
            type_id: crate::types::NodeId::new(0u16, 40u32),
            is_forward: true,
        }],
    }
}
#[allow(unused)]
fn make_variable_1130(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 16215u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "Applications"),
                crate::types::LocalizedText::new("", "Applications"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 12u32),
            false,
            1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15668u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1131(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15416u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "ApplicationsExclude"),
                crate::types::LocalizedText::new("", "ApplicationsExclude"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 1u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15668u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1132(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 16216u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "Endpoints"),
                crate::types::LocalizedText::new("", "Endpoints"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 15528u32),
            false,
            1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15668u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1133(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15417u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "EndpointsExclude"),
                crate::types::LocalizedText::new("", "EndpointsExclude"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 1u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15668u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1135(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15673u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "InputArguments"),
                crate::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 15634u32),
                    description: Default::default(),
                    name: "Rule".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15672u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1137(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15675u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "InputArguments"),
                crate::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 15634u32),
                    description: Default::default(),
                    name: "Rule".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15674u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1139(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 16218u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "InputArguments"),
                crate::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 12u32),
                    description: Default::default(),
                    name: "ApplicationUri".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 16217u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_114(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 11498u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "MaxStringLength"),
                crate::types::LocalizedText::new("", "MaxStringLength"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 7u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![crate::server::address_space::ImportedReference {
            target_id: crate::types::NodeId::new(0u16, 68u32),
            type_id: crate::types::NodeId::new(0u16, 40u32),
            is_forward: true,
        }],
    }
}
#[allow(unused)]
fn make_variable_1141(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 16220u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "InputArguments"),
                crate::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 12u32),
                    description: Default::default(),
                    name: "ApplicationUri".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 16219u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1143(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 16222u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "InputArguments"),
                crate::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 15528u32),
                    description: Default::default(),
                    name: "Endpoint".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 16221u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1145(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 16224u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "InputArguments"),
                crate::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 15528u32),
                    description: Default::default(),
                    name: "Endpoint".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 16223u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1147(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 16225u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "Identities"),
                crate::types::LocalizedText::new("", "Identities"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 15634u32),
            false,
            1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15680u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1148(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 16226u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "Applications"),
                crate::types::LocalizedText::new("", "Applications"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 12u32),
            false,
            1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15680u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1149(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15418u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "ApplicationsExclude"),
                crate::types::LocalizedText::new("", "ApplicationsExclude"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 1u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15680u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_115(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15002u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "MaxCharacters"),
                crate::types::LocalizedText::new("", "MaxCharacters"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 7u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![crate::server::address_space::ImportedReference {
            target_id: crate::types::NodeId::new(0u16, 68u32),
            type_id: crate::types::NodeId::new(0u16, 40u32),
            is_forward: true,
        }],
    }
}
#[allow(unused)]
fn make_variable_1150(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 16227u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "Endpoints"),
                crate::types::LocalizedText::new("", "Endpoints"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 15528u32),
            false,
            1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15680u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1151(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15423u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "EndpointsExclude"),
                crate::types::LocalizedText::new("", "EndpointsExclude"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 1u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15680u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1153(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15685u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "InputArguments"),
                crate::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 15634u32),
                    description: Default::default(),
                    name: "Rule".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15684u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1155(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15687u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "InputArguments"),
                crate::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 15634u32),
                    description: Default::default(),
                    name: "Rule".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15686u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1157(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 16229u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "InputArguments"),
                crate::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 12u32),
                    description: Default::default(),
                    name: "ApplicationUri".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 16228u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1159(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 16231u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "InputArguments"),
                crate::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 12u32),
                    description: Default::default(),
                    name: "ApplicationUri".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 16230u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_116(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 12908u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "MaxByteStringLength"),
                crate::types::LocalizedText::new("", "MaxByteStringLength"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 7u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![crate::server::address_space::ImportedReference {
            target_id: crate::types::NodeId::new(0u16, 68u32),
            type_id: crate::types::NodeId::new(0u16, 40u32),
            is_forward: true,
        }],
    }
}
#[allow(unused)]
fn make_variable_1161(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 16233u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "InputArguments"),
                crate::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 15528u32),
                    description: Default::default(),
                    name: "Endpoint".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 16232u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1163(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 16235u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "InputArguments"),
                crate::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 15528u32),
                    description: Default::default(),
                    name: "Endpoint".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 16234u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1165(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 16236u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "Identities"),
                crate::types::LocalizedText::new("", "Identities"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 15634u32),
            false,
            1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 16036u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1166(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 16237u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "Applications"),
                crate::types::LocalizedText::new("", "Applications"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 12u32),
            false,
            1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 16036u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1167(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15424u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "ApplicationsExclude"),
                crate::types::LocalizedText::new("", "ApplicationsExclude"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 1u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 16036u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1168(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 16238u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "Endpoints"),
                crate::types::LocalizedText::new("", "Endpoints"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 15528u32),
            false,
            1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 16036u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1169(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15425u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "EndpointsExclude"),
                crate::types::LocalizedText::new("", "EndpointsExclude"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 1u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 16036u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_117(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 11512u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "MaxArrayLength"),
                crate::types::LocalizedText::new("", "MaxArrayLength"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 7u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![crate::server::address_space::ImportedReference {
            target_id: crate::types::NodeId::new(0u16, 68u32),
            type_id: crate::types::NodeId::new(0u16, 40u32),
            is_forward: true,
        }],
    }
}
#[allow(unused)]
fn make_variable_1171(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 16042u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "InputArguments"),
                crate::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 15634u32),
                    description: Default::default(),
                    name: "Rule".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 16041u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1173(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 16044u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "InputArguments"),
                crate::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 15634u32),
                    description: Default::default(),
                    name: "Rule".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 16043u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1175(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 16240u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "InputArguments"),
                crate::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 12u32),
                    description: Default::default(),
                    name: "ApplicationUri".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 16239u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1177(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 16242u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "InputArguments"),
                crate::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 12u32),
                    description: Default::default(),
                    name: "ApplicationUri".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 16241u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1179(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 16244u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "InputArguments"),
                crate::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 15528u32),
                    description: Default::default(),
                    name: "Endpoint".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 16243u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_118(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 11513u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "EngineeringUnits"),
                crate::types::LocalizedText::new("", "EngineeringUnits"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 887u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![crate::server::address_space::ImportedReference {
            target_id: crate::types::NodeId::new(0u16, 68u32),
            type_id: crate::types::NodeId::new(0u16, 40u32),
            is_forward: true,
        }],
    }
}
#[allow(unused)]
fn make_variable_1181(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 16246u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "InputArguments"),
                crate::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 15528u32),
                    description: Default::default(),
                    name: "Endpoint".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 16245u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1183(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 16247u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "Identities"),
                crate::types::LocalizedText::new("", "Identities"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 15634u32),
            false,
            1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15692u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1184(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 16248u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "Applications"),
                crate::types::LocalizedText::new("", "Applications"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 12u32),
            false,
            1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15692u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1185(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15426u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "ApplicationsExclude"),
                crate::types::LocalizedText::new("", "ApplicationsExclude"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 1u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15692u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1186(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 16249u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "Endpoints"),
                crate::types::LocalizedText::new("", "Endpoints"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 15528u32),
            false,
            1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15692u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1187(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15427u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "EndpointsExclude"),
                crate::types::LocalizedText::new("", "EndpointsExclude"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 1u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15692u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1189(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15697u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "InputArguments"),
                crate::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 15634u32),
                    description: Default::default(),
                    name: "Rule".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15696u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_119(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 11432u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "EnumStrings"),
                crate::types::LocalizedText::new("", "EnumStrings"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 21u32),
            false,
            1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![crate::server::address_space::ImportedReference {
            target_id: crate::types::NodeId::new(0u16, 68u32),
            type_id: crate::types::NodeId::new(0u16, 40u32),
            is_forward: true,
        }],
    }
}
#[allow(unused)]
fn make_variable_1191(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15699u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "InputArguments"),
                crate::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 15634u32),
                    description: Default::default(),
                    name: "Rule".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15698u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1193(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 16251u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "InputArguments"),
                crate::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 12u32),
                    description: Default::default(),
                    name: "ApplicationUri".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 16250u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1195(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 16253u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "InputArguments"),
                crate::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 12u32),
                    description: Default::default(),
                    name: "ApplicationUri".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 16252u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1197(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 16255u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "InputArguments"),
                crate::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 15528u32),
                    description: Default::default(),
                    name: "Endpoint".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 16254u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1199(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 16257u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "InputArguments"),
                crate::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 15528u32),
                    description: Default::default(),
                    name: "Endpoint".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 16256u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_120(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 3071u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "EnumValues"),
                crate::types::LocalizedText::new("", "EnumValues"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 7594u32),
            false,
            1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![crate::server::address_space::ImportedReference {
            target_id: crate::types::NodeId::new(0u16, 68u32),
            type_id: crate::types::NodeId::new(0u16, 40u32),
            is_forward: true,
        }],
    }
}
#[allow(unused)]
fn make_variable_1201(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 16269u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "Identities"),
                crate::types::LocalizedText::new("", "Identities"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 15634u32),
            false,
            1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15716u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1202(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 16270u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "Applications"),
                crate::types::LocalizedText::new("", "Applications"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 12u32),
            false,
            1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15716u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1203(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15428u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "ApplicationsExclude"),
                crate::types::LocalizedText::new("", "ApplicationsExclude"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 1u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15716u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1204(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 16271u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "Endpoints"),
                crate::types::LocalizedText::new("", "Endpoints"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 15528u32),
            false,
            1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15716u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1205(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15429u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "EndpointsExclude"),
                crate::types::LocalizedText::new("", "EndpointsExclude"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 1u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15716u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1207(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15721u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "InputArguments"),
                crate::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 15634u32),
                    description: Default::default(),
                    name: "Rule".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15720u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1209(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15723u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "InputArguments"),
                crate::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 15634u32),
                    description: Default::default(),
                    name: "Rule".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15722u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_121(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 12745u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "OptionSetValues"),
                crate::types::LocalizedText::new("", "OptionSetValues"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 21u32),
            false,
            1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![crate::server::address_space::ImportedReference {
            target_id: crate::types::NodeId::new(0u16, 68u32),
            type_id: crate::types::NodeId::new(0u16, 40u32),
            is_forward: true,
        }],
    }
}
#[allow(unused)]
fn make_variable_1211(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 16273u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "InputArguments"),
                crate::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 12u32),
                    description: Default::default(),
                    name: "ApplicationUri".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 16272u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1213(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 16275u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "InputArguments"),
                crate::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 12u32),
                    description: Default::default(),
                    name: "ApplicationUri".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 16274u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1215(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 16277u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "InputArguments"),
                crate::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 15528u32),
                    description: Default::default(),
                    name: "Endpoint".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 16276u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1217(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 16279u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "InputArguments"),
                crate::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 15528u32),
                    description: Default::default(),
                    name: "Endpoint".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 16278u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1219(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 16258u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "Identities"),
                crate::types::LocalizedText::new("", "Identities"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 15634u32),
            false,
            1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15704u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_122(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 3072u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "InputArguments"),
                crate::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![crate::server::address_space::ImportedReference {
            target_id: crate::types::NodeId::new(0u16, 68u32),
            type_id: crate::types::NodeId::new(0u16, 40u32),
            is_forward: true,
        }],
    }
}
#[allow(unused)]
fn make_variable_1220(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 16259u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "Applications"),
                crate::types::LocalizedText::new("", "Applications"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 12u32),
            false,
            1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15704u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1221(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15430u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "ApplicationsExclude"),
                crate::types::LocalizedText::new("", "ApplicationsExclude"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 1u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15704u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1222(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 16260u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "Endpoints"),
                crate::types::LocalizedText::new("", "Endpoints"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 15528u32),
            false,
            1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15704u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1223(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15527u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "EndpointsExclude"),
                crate::types::LocalizedText::new("", "EndpointsExclude"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 1u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15704u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1225(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15709u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "InputArguments"),
                crate::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 15634u32),
                    description: Default::default(),
                    name: "Rule".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15708u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1227(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15711u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "InputArguments"),
                crate::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 15634u32),
                    description: Default::default(),
                    name: "Rule".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15710u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1229(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 16262u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "InputArguments"),
                crate::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 12u32),
                    description: Default::default(),
                    name: "ApplicationUri".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 16261u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_123(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 3073u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "OutputArguments"),
                crate::types::LocalizedText::new("", "OutputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![crate::server::address_space::ImportedReference {
            target_id: crate::types::NodeId::new(0u16, 68u32),
            type_id: crate::types::NodeId::new(0u16, 40u32),
            is_forward: true,
        }],
    }
}
#[allow(unused)]
fn make_variable_1231(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 16264u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "InputArguments"),
                crate::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 12u32),
                    description: Default::default(),
                    name: "ApplicationUri".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 16263u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1233(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 16266u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "InputArguments"),
                crate::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 15528u32),
                    description: Default::default(),
                    name: "Endpoint".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 16265u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1235(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 16268u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "InputArguments"),
                crate::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 15528u32),
                    description: Default::default(),
                    name: "Endpoint".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 16267u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
