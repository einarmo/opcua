// OPCUA for Rust
// SPDX-License-Identifier: MPL-2.0
// Copyright (C) 2017-2024 Adam Lock, Einar Omang
//
// This file was autogenerated from tools/schema/schemas/1.0.4/Opc.Ua.NodeSet2.xml by opcua-codegen
//
// DO NOT EDIT THIS FILE
pub(super) fn imported_nodes<'a>(
    ns_map: &'a crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> Box<dyn Iterator<Item = crate::server::address_space::ImportedItem> + 'a> {
    Box::new(
        [
            &make_variable_811 as &dyn Fn(_) -> crate::server::address_space::ImportedItem,
            &make_variable_812,
            &make_variable_813,
            &make_variable_814,
            &make_variable_815,
            &make_variable_816,
            &make_variable_817,
            &make_variable_818,
            &make_variable_819,
            &make_variable_82,
            &make_variable_820,
            &make_variable_821,
            &make_variable_823,
            &make_variable_824,
            &make_variable_825,
            &make_variable_828,
            &make_variable_831,
            &make_variable_832,
            &make_variable_834,
            &make_variable_836,
            &make_variable_837,
            &make_variable_839,
            &make_variable_84,
            &make_variable_840,
            &make_variable_841,
            &make_variable_842,
            &make_variable_843,
            &make_variable_845,
            &make_variable_846,
            &make_variable_847,
            &make_variable_848,
            &make_variable_849,
            &make_variable_850,
            &make_variable_851,
            &make_variable_852,
            &make_variable_853,
            &make_variable_854,
            &make_variable_855,
            &make_variable_856,
            &make_variable_857,
            &make_variable_858,
            &make_variable_860,
            &make_variable_867,
            &make_variable_868,
            &make_variable_869,
            &make_variable_870,
            &make_variable_872,
            &make_variable_873,
            &make_variable_874,
            &make_variable_875,
            &make_variable_877,
            &make_variable_878,
            &make_variable_879,
            &make_variable_880,
            &make_variable_881,
            &make_variable_883,
            &make_variable_884,
            &make_variable_885,
            &make_variable_886,
            &make_variable_887,
            &make_variable_888,
            &make_variable_890,
            &make_variable_892,
            &make_variable_894,
            &make_variable_897,
            &make_variable_902,
            &make_variable_905,
            &make_variable_906,
            &make_variable_908,
            &make_variable_910,
            &make_variable_911,
            &make_variable_912,
            &make_variable_914,
            &make_variable_916,
            &make_variable_917,
            &make_variable_918,
            &make_variable_920,
            &make_variable_922,
            &make_variable_923,
            &make_variable_924,
            &make_variable_926,
            &make_variable_927,
            &make_variable_928,
            &make_variable_929,
            &make_variable_930,
            &make_variable_932,
            &make_variable_933,
            &make_variable_934,
            &make_variable_935,
            &make_variable_936,
            &make_variable_937,
            &make_variable_938,
            &make_variable_939,
            &make_variable_950,
            &make_variable_951,
            &make_variable_952,
            &make_variable_953,
            &make_variable_954,
            &make_variable_955,
            &make_variable_957,
        ]
        .into_iter()
        .map(|f| f(ns_map)),
    )
}
#[allow(unused)]
fn make_variable_811(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2279u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "SecurityRejectedSessionCount"),
                crate::types::LocalizedText::new("", "SecurityRejectedSessionCount"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 7u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 63u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2275u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_812(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 3705u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "RejectedSessionCount"),
                crate::types::LocalizedText::new("", "RejectedSessionCount"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 7u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 63u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2275u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_813(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2281u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "SessionTimeoutCount"),
                crate::types::LocalizedText::new("", "SessionTimeoutCount"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 7u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 63u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2275u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_814(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2282u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "SessionAbortCount"),
                crate::types::LocalizedText::new("", "SessionAbortCount"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 7u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 63u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2275u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_815(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2284u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "PublishingIntervalCount"),
                crate::types::LocalizedText::new("", "PublishingIntervalCount"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 7u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 63u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2275u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_816(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2285u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "CurrentSubscriptionCount"),
                crate::types::LocalizedText::new("", "CurrentSubscriptionCount"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 7u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 63u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2275u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_817(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2286u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "CumulatedSubscriptionCount"),
                crate::types::LocalizedText::new("", "CumulatedSubscriptionCount"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 7u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 63u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2275u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_818(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2287u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "SecurityRejectedRequestsCount"),
                crate::types::LocalizedText::new("", "SecurityRejectedRequestsCount"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 7u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 63u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2275u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_819(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2288u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "RejectedRequestsCount"),
                crate::types::LocalizedText::new("", "RejectedRequestsCount"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 7u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 63u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2275u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_82(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 11509u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "NamingRule"),
                crate::types::LocalizedText::new("", "NamingRule"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 120u32),
            false,
            -1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(2i32)),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11508u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_820(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2289u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "SamplingIntervalDiagnosticsArray"),
                crate::types::LocalizedText::new("", "SamplingIntervalDiagnosticsArray"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 856u32),
            false,
            1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2164u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2274u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_821(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2290u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "SubscriptionDiagnosticsArray"),
                crate::types::LocalizedText::new("", "SubscriptionDiagnosticsArray"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 874u32),
            false,
            1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2171u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2274u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_823(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 3707u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "SessionDiagnosticsArray"),
                crate::types::LocalizedText::new("", "SessionDiagnosticsArray"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 865u32),
            false,
            1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2196u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 3706u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_824(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 3708u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "SessionSecurityDiagnosticsArray"),
                crate::types::LocalizedText::new("", "SessionSecurityDiagnosticsArray"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 868u32),
            false,
            1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2243u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 3706u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_825(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2294u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "EnabledFlag"),
                crate::types::LocalizedText::new("", "EnabledFlag"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 1u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            3u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2274u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_828(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 3709u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "RedundancySupport"),
                crate::types::LocalizedText::new("", "RedundancySupport"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 851u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2296u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_831(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 11493u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "InputArguments"),
                crate::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 7u32),
                    description: Default::default(),
                    name: "SubscriptionId".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11492u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_832(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 11494u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "OutputArguments"),
                crate::types::LocalizedText::new("", "OutputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: Some(vec![0u32]),
                    data_type: crate::types::NodeId::new(0u16, 7u32),
                    description: Default::default(),
                    name: "ServerHandles".into(),
                    value_rank: 1i32,
                }),
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: Some(vec![0u32]),
                    data_type: crate::types::NodeId::new(0u16, 7u32),
                    description: Default::default(),
                    name: "ClientHandles".into(),
                    value_rank: 1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11492u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_834(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 12874u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "InputArguments"),
                crate::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 7u32),
                    description: Default::default(),
                    name: "SubscriptionId".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 12873u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_836(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 12750u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "InputArguments"),
                crate::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 7u32),
                    description: Default::default(),
                    name: "SubscriptionId".into(),
                    value_rank: -1i32,
                }),
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 7u32),
                    description: Default::default(),
                    name: "LifetimeInHours".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 12749u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_837(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 12751u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "OutputArguments"),
                crate::types::LocalizedText::new("", "OutputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 7u32),
                    description: Default::default(),
                    name: "RevisedLifetimeInHours".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 12749u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_839(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 12887u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "InputArguments"),
                crate::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 852u32),
                    description: Default::default(),
                    name: "State".into(),
                    value_rank: -1i32,
                }),
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 13u32),
                    description: Default::default(),
                    name: "EstimatedReturnTime".into(),
                    value_rank: -1i32,
                }),
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 7u32),
                    description: Default::default(),
                    name: "SecondsTillShutdown".into(),
                    value_rank: -1i32,
                }),
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 21u32),
                    description: Default::default(),
                    name: "Reason".into(),
                    value_rank: -1i32,
                }),
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 1u32),
                    description: Default::default(),
                    name: "Restart".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 12886u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_84(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 11511u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "NamingRule"),
                crate::types::LocalizedText::new("", "NamingRule"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 120u32),
            false,
            -1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(1i32)),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11510u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_840(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 11312u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "Server_ServerRedundancy_CurrentServerId"),
                crate::types::LocalizedText::new("", "Server_ServerRedundancy_CurrentServerId"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![crate::server::address_space::ImportedReference {
            target_id: crate::types::NodeId::new(0u16, 68u32),
            type_id: crate::types::NodeId::new(0u16, 40u32),
            is_forward: true,
        }],
    }
}
#[allow(unused)]
fn make_variable_841(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 11313u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(
                    0u16,
                    "Server_ServerRedundancy_RedundantServerArray",
                ),
                crate::types::LocalizedText::new(
                    "",
                    "Server_ServerRedundancy_RedundantServerArray",
                ),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 853u32),
            false,
            1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![crate::server::address_space::ImportedReference {
            target_id: crate::types::NodeId::new(0u16, 68u32),
            type_id: crate::types::NodeId::new(0u16, 40u32),
            is_forward: true,
        }],
    }
}
#[allow(unused)]
fn make_variable_842(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 11314u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "Server_ServerRedundancy_ServerUriArray"),
                crate::types::LocalizedText::new("", "Server_ServerRedundancy_ServerUriArray"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 12u32),
            false,
            1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![crate::server::address_space::ImportedReference {
            target_id: crate::types::NodeId::new(0u16, 68u32),
            type_id: crate::types::NodeId::new(0u16, 40u32),
            is_forward: true,
        }],
    }
}
#[allow(unused)]
fn make_variable_843(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 14415u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(
                    0u16,
                    "Server_ServerRedundancy_ServerNetworkGroups",
                ),
                crate::types::LocalizedText::new("", "Server_ServerRedundancy_ServerNetworkGroups"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 11944u32),
            false,
            1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![crate::server::address_space::ImportedReference {
            target_id: crate::types::NodeId::new(0u16, 68u32),
            type_id: crate::types::NodeId::new(0u16, 40u32),
            is_forward: true,
        }],
    }
}
#[allow(unused)]
fn make_variable_845(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 11193u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "AccessHistoryDataCapability"),
                crate::types::LocalizedText::new("", "AccessHistoryDataCapability"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 1u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11192u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_846(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 11242u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "AccessHistoryEventsCapability"),
                crate::types::LocalizedText::new("", "AccessHistoryEventsCapability"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 1u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11192u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_847(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 11273u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "MaxReturnDataValues"),
                crate::types::LocalizedText::new("", "MaxReturnDataValues"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 7u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11192u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_848(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 11274u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "MaxReturnEventValues"),
                crate::types::LocalizedText::new("", "MaxReturnEventValues"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 7u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11192u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_849(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 11196u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "InsertDataCapability"),
                crate::types::LocalizedText::new("", "InsertDataCapability"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 1u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11192u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_850(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 11197u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "ReplaceDataCapability"),
                crate::types::LocalizedText::new("", "ReplaceDataCapability"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 1u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11192u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_851(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 11198u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "UpdateDataCapability"),
                crate::types::LocalizedText::new("", "UpdateDataCapability"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 1u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11192u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_852(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 11199u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "DeleteRawCapability"),
                crate::types::LocalizedText::new("", "DeleteRawCapability"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 1u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11192u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_853(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 11200u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "DeleteAtTimeCapability"),
                crate::types::LocalizedText::new("", "DeleteAtTimeCapability"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 1u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11192u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_854(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 11281u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "InsertEventCapability"),
                crate::types::LocalizedText::new("", "InsertEventCapability"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 1u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11192u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_855(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 11282u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "ReplaceEventCapability"),
                crate::types::LocalizedText::new("", "ReplaceEventCapability"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 1u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11192u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_856(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 11283u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "UpdateEventCapability"),
                crate::types::LocalizedText::new("", "UpdateEventCapability"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 1u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11192u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_857(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 11502u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "DeleteEventCapability"),
                crate::types::LocalizedText::new("", "DeleteEventCapability"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 1u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11192u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_858(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 11275u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "InsertAnnotationCapability"),
                crate::types::LocalizedText::new("", "InsertAnnotationCapability"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 1u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11192u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_860(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 19091u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "ServerTimestampSupported"),
                crate::types::LocalizedText::new("", "ServerTimestampSupported"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 1u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11192u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_867(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2769u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "CurrentState"),
                crate::types::LocalizedText::new("", "CurrentState"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 21u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 3720u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2755u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2299u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_868(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 3720u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "Id"),
                crate::types::LocalizedText::new("", "Id"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 24u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2769u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_869(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2770u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "LastTransition"),
                crate::types::LocalizedText::new("", "LastTransition"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 21u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 3724u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2762u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 80u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2299u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_870(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 3724u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "Id"),
                crate::types::LocalizedText::new("", "Id"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 24u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2770u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_872(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2756u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "Id"),
                crate::types::LocalizedText::new("", "Id"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 24u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2755u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_873(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2757u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "Name"),
                crate::types::LocalizedText::new("", "Name"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 20u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 80u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2755u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_874(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2758u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "Number"),
                crate::types::LocalizedText::new("", "Number"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 7u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 80u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2755u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_875(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2759u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "EffectiveDisplayName"),
                crate::types::LocalizedText::new("", "EffectiveDisplayName"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 21u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 80u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2755u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_877(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2763u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "Id"),
                crate::types::LocalizedText::new("", "Id"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 24u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2762u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_878(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2764u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "Name"),
                crate::types::LocalizedText::new("", "Name"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 20u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 80u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2762u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_879(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2765u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "Number"),
                crate::types::LocalizedText::new("", "Number"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 7u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 80u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2762u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_880(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2766u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "TransitionTime"),
                crate::types::LocalizedText::new("", "TransitionTime"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 294u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 80u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2762u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_881(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 11456u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "EffectiveTransitionTime"),
                crate::types::LocalizedText::new("", "EffectiveTransitionTime"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 294u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 80u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2762u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_883(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2772u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "CurrentState"),
                crate::types::LocalizedText::new("", "CurrentState"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 21u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 3728u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2760u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2771u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_884(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 3728u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "Id"),
                crate::types::LocalizedText::new("", "Id"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 17u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2772u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_885(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2773u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "LastTransition"),
                crate::types::LocalizedText::new("", "LastTransition"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 21u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 3732u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2767u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 80u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2771u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_886(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 3732u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "Id"),
                crate::types::LocalizedText::new("", "Id"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 17u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2773u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_887(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 17635u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "AvailableStates"),
                crate::types::LocalizedText::new("", "AvailableStates"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 17u32),
            false,
            1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 63u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 80u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2771u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_888(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 17636u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "AvailableTransitions"),
                crate::types::LocalizedText::new("", "AvailableTransitions"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 17u32),
            false,
            1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 63u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 80u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2771u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_890(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2761u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "Id"),
                crate::types::LocalizedText::new("", "Id"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 17u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2760u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_892(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2768u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "Id"),
                crate::types::LocalizedText::new("", "Id"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 17u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2767u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_894(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2308u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "StateNumber"),
                crate::types::LocalizedText::new("", "StateNumber"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 7u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2307u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_897(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2312u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "TransitionNumber"),
                crate::types::LocalizedText::new("", "TransitionNumber"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 7u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2310u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_902(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15129u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "Expression"),
                crate::types::LocalizedText::new("", "Expression"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 586u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15128u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_905(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 17712u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "Numerator"),
                crate::types::LocalizedText::new("", "Numerator"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 6u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 63u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 17709u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_906(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 17713u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "Denominator"),
                crate::types::LocalizedText::new("", "Denominator"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 7u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 63u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 17709u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_908(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 17715u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "VectorUnit"),
                crate::types::LocalizedText::new("", "VectorUnit"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 887u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 80u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 17714u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_910(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 18769u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "X"),
                crate::types::LocalizedText::new("", "X"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 11u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 63u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 17716u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_911(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 18770u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "Y"),
                crate::types::LocalizedText::new("", "Y"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 11u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 63u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 17716u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_912(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 18771u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "Z"),
                crate::types::LocalizedText::new("", "Z"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 11u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 63u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 17716u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_914(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 18773u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "LengthUnit"),
                crate::types::LocalizedText::new("", "LengthUnit"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 887u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 80u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 18772u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_916(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 18776u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "X"),
                crate::types::LocalizedText::new("", "X"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 11u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 63u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 18774u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_917(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 18777u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "Y"),
                crate::types::LocalizedText::new("", "Y"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 11u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 63u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 18774u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_918(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 18778u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "Z"),
                crate::types::LocalizedText::new("", "Z"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 11u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 63u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 18774u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_920(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 18780u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "AngleUnit"),
                crate::types::LocalizedText::new("", "AngleUnit"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 887u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 80u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 18779u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_922(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 18783u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "A"),
                crate::types::LocalizedText::new("", "A"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 11u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 63u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 18781u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_923(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 18784u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "B"),
                crate::types::LocalizedText::new("", "B"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 11u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 63u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 18781u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_924(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 18785u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "C"),
                crate::types::LocalizedText::new("", "C"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 11u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 63u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 18781u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_926(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 18801u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "CartesianCoordinates"),
                crate::types::LocalizedText::new("", "CartesianCoordinates"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 18809u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 18772u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 18786u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_927(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 18787u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "Orientation"),
                crate::types::LocalizedText::new("", "Orientation"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 18811u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 18779u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 18786u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_928(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 18788u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "Constant"),
                crate::types::LocalizedText::new("", "Constant"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 1u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 80u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 18786u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_929(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 18789u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "BaseFrame"),
                crate::types::LocalizedText::new("", "BaseFrame"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 17u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 63u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 80u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 18786u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_930(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 18790u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "FixedBase"),
                crate::types::LocalizedText::new("", "FixedBase"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 1u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 80u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 18786u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_932(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 18796u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "CartesianCoordinates"),
                crate::types::LocalizedText::new("", "CartesianCoordinates"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 18810u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 18798u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 18799u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 18800u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 18774u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 18791u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_933(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 18798u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "X"),
                crate::types::LocalizedText::new("", "X"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 11u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 63u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 18796u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_934(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 18799u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "Y"),
                crate::types::LocalizedText::new("", "Y"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 11u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 63u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 18796u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_935(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 18800u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "Z"),
                crate::types::LocalizedText::new("", "Z"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 11u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 63u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 18796u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_936(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 18792u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "Orientation"),
                crate::types::LocalizedText::new("", "Orientation"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 18812u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 19074u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 19075u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 19076u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 18781u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 18791u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_937(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 19074u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "A"),
                crate::types::LocalizedText::new("", "A"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 11u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 63u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 18792u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_938(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 19075u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "B"),
                crate::types::LocalizedText::new("", "B"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 11u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 63u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 18792u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_939(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 19076u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "C"),
                crate::types::LocalizedText::new("", "C"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 11u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 63u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 18792u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_950(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2774u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "Transition"),
                crate::types::LocalizedText::new("", "Transition"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 21u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 3754u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2762u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2311u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_951(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 3754u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "Id"),
                crate::types::LocalizedText::new("", "Id"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 24u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2774u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_952(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2775u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "FromState"),
                crate::types::LocalizedText::new("", "FromState"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 21u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 3746u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2755u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2311u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_953(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 3746u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "Id"),
                crate::types::LocalizedText::new("", "Id"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 24u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2775u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_954(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2776u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "ToState"),
                crate::types::LocalizedText::new("", "ToState"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 21u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 3750u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2755u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2311u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_955(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 3750u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "Id"),
                crate::types::LocalizedText::new("", "Id"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 24u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2776u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_957(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2777u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "OldStateId"),
                crate::types::LocalizedText::new("", "OldStateId"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 24u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2315u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
