// OPCUA for Rust
// SPDX-License-Identifier: MPL-2.0
// Copyright (C) 2017-2024 Adam Lock, Einar Omang
//
// This file was autogenerated from tools/schema/schemas/1.0.4/Opc.Ua.NodeSet2.xml by opcua-codegen
//
// DO NOT EDIT THIS FILE
pub(super) fn imported_nodes<'a>(
    ns_map: &'a crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> Box<dyn Iterator<Item = crate::server::address_space::ImportedItem> + 'a> {
    Box::new(
        [
            &make_variable_2636
                as &dyn Fn(_) -> crate::server::address_space::ImportedItem,
            &make_variable_2637,
            &make_variable_2638,
            &make_variable_2639,
            &make_variable_264,
            &make_variable_2640,
            &make_variable_2641,
            &make_variable_2642,
            &make_variable_2643,
            &make_variable_2644,
            &make_variable_2645,
            &make_variable_2646,
            &make_variable_2647,
            &make_variable_2648,
            &make_variable_2649,
            &make_variable_265,
            &make_variable_2650,
            &make_variable_2651,
            &make_variable_2652,
            &make_variable_2653,
            &make_variable_2654,
            &make_variable_2655,
            &make_variable_2656,
            &make_variable_2657,
            &make_variable_2659,
            &make_variable_266,
            &make_variable_2660,
            &make_variable_2662,
            &make_variable_2663,
            &make_variable_2665,
            &make_variable_2666,
            &make_variable_2668,
            &make_variable_267,
            &make_variable_2671,
            &make_variable_2672,
            &make_variable_2673,
            &make_variable_2674,
            &make_variable_2675,
            &make_variable_2677,
            &make_variable_2679,
            &make_variable_268,
            &make_variable_2680,
            &make_variable_2681,
            &make_variable_2682,
            &make_variable_2683,
            &make_variable_2684,
            &make_variable_2688,
            &make_variable_2689,
            &make_variable_269,
            &make_variable_2690,
            &make_variable_2692,
            &make_variable_2694,
            &make_variable_2695,
            &make_variable_2696,
            &make_variable_2697,
            &make_variable_2698,
            &make_variable_2699,
            &make_variable_270,
            &make_variable_2700,
            &make_variable_2701,
            &make_variable_2702,
            &make_variable_2704,
            &make_variable_2706,
            &make_variable_2707,
            &make_variable_2708,
            &make_variable_2709,
            &make_variable_271,
            &make_variable_2710,
            &make_variable_2711,
            &make_variable_2712,
            &make_variable_2713,
            &make_variable_2714,
            &make_variable_2715,
            &make_variable_2716,
            &make_variable_2717,
            &make_variable_2718,
            &make_variable_2719,
            &make_variable_272,
            &make_variable_2720,
            &make_variable_2721,
            &make_variable_2722,
            &make_variable_2723,
            &make_variable_2724,
            &make_variable_2725,
            &make_variable_2726,
            &make_variable_2727,
            &make_variable_2728,
            &make_variable_2729,
            &make_variable_273,
            &make_variable_2730,
            &make_variable_2731,
            &make_variable_2732,
            &make_variable_2733,
            &make_variable_2734,
            &make_variable_2735,
            &make_variable_2736,
            &make_variable_2737,
            &make_variable_2738,
            &make_variable_2739,
            &make_variable_274,
        ]
            .into_iter()
            .map(|f| f(ns_map)),
    )
}
#[allow(unused)]
fn make_variable_2636(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 19258u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "Classification"),
                    crate::types::LocalizedText::new("", "Classification"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 19730u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(crate::types::Variant::from(1i32)),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19256u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2637(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 19259u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "DiagnosticsLevel"),
                    crate::types::LocalizedText::new("", "DiagnosticsLevel"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 19723u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(crate::types::Variant::from(0i32)),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19256u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2638(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 19261u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "StateOperationalByMethod"),
                    crate::types::LocalizedText::new("", "StateOperationalByMethod"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 7u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19262u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19263u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19264u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19725u32), type_id : crate
            ::types::NodeId::new(0u16, 40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19255u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2639(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 19262u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "Active"),
                    crate::types::LocalizedText::new("", "Active"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 1u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19261u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_264(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 12123u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "DeleteMonitoredItemsCount"),
                    crate::types::LocalizedText::new("", "DeleteMonitoredItemsCount"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 871u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 63u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12098u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2640(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 19263u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "Classification"),
                    crate::types::LocalizedText::new("", "Classification"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 19730u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(crate::types::Variant::from(0i32)),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19261u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2641(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 19264u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "DiagnosticsLevel"),
                    crate::types::LocalizedText::new("", "DiagnosticsLevel"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 19723u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(crate::types::Variant::from(0i32)),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19261u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2642(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 19266u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "StateOperationalByParent"),
                    crate::types::LocalizedText::new("", "StateOperationalByParent"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 7u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19267u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19268u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19269u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19725u32), type_id : crate
            ::types::NodeId::new(0u16, 40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19255u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2643(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 19267u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "Active"),
                    crate::types::LocalizedText::new("", "Active"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 1u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19266u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2644(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 19268u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "Classification"),
                    crate::types::LocalizedText::new("", "Classification"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 19730u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(crate::types::Variant::from(0i32)),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19266u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2645(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 19269u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "DiagnosticsLevel"),
                    crate::types::LocalizedText::new("", "DiagnosticsLevel"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 19723u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(crate::types::Variant::from(0i32)),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19266u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2646(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 19271u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "StateOperationalFromError"),
                    crate::types::LocalizedText::new("", "StateOperationalFromError"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 7u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19272u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19273u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19274u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19725u32), type_id : crate
            ::types::NodeId::new(0u16, 40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19255u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2647(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 19272u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "Active"),
                    crate::types::LocalizedText::new("", "Active"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 1u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19271u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2648(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 19273u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "Classification"),
                    crate::types::LocalizedText::new("", "Classification"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 19730u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(crate::types::Variant::from(0i32)),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19271u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2649(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 19274u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "DiagnosticsLevel"),
                    crate::types::LocalizedText::new("", "DiagnosticsLevel"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 19723u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(crate::types::Variant::from(0i32)),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19271u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_265(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 12124u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "CreateSubscriptionCount"),
                    crate::types::LocalizedText::new("", "CreateSubscriptionCount"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 871u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 63u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12098u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2650(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 19276u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "StatePausedByParent"),
                    crate::types::LocalizedText::new("", "StatePausedByParent"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 7u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19277u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19278u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19279u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19725u32), type_id : crate
            ::types::NodeId::new(0u16, 40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19255u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2651(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 19277u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "Active"),
                    crate::types::LocalizedText::new("", "Active"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 1u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19276u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2652(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 19278u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "Classification"),
                    crate::types::LocalizedText::new("", "Classification"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 19730u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(crate::types::Variant::from(0i32)),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19276u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2653(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 19279u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "DiagnosticsLevel"),
                    crate::types::LocalizedText::new("", "DiagnosticsLevel"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 19723u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(crate::types::Variant::from(0i32)),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19276u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2654(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 19281u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "StateDisabledByMethod"),
                    crate::types::LocalizedText::new("", "StateDisabledByMethod"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 7u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19282u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19283u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19284u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19725u32), type_id : crate
            ::types::NodeId::new(0u16, 40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19255u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2655(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 19282u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "Active"),
                    crate::types::LocalizedText::new("", "Active"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 1u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19281u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2656(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 19283u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "Classification"),
                    crate::types::LocalizedText::new("", "Classification"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 19730u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(crate::types::Variant::from(0i32)),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19281u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2657(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 19284u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "DiagnosticsLevel"),
                    crate::types::LocalizedText::new("", "DiagnosticsLevel"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 19723u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(crate::types::Variant::from(0i32)),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19281u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2659(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 19287u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "ResolvedAddress"),
                    crate::types::LocalizedText::new("", "ResolvedAddress"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19288u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 63u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19286u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_266(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 12125u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "ModifySubscriptionCount"),
                    crate::types::LocalizedText::new("", "ModifySubscriptionCount"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 871u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 63u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12098u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2660(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 19288u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "DiagnosticsLevel"),
                    crate::types::LocalizedText::new("", "DiagnosticsLevel"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 19723u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(crate::types::Variant::from(0i32)),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19287u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2662(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17428u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "InputArguments"),
                    crate::types::LocalizedText::new("", "InputArguments"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 296u32),
                false,
                1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        vec![
                            crate ::types::ExtensionObject::from_message(& crate
                            ::types::Argument { array_dimensions : None, data_type :
                            crate ::types::NodeId::new(0u16, 15480u32), description :
                            Default::default(), name : "Configuration".into(), value_rank
                            : - 1i32, }),
                        ],
                    ),
                ),
                1u8,
                1u8,
                Some(vec![0u32]),
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17427u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2663(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17456u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "OutputArguments"),
                    crate::types::LocalizedText::new("", "OutputArguments"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 296u32),
                false,
                1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        vec![
                            crate ::types::ExtensionObject::from_message(& crate
                            ::types::Argument { array_dimensions : None, data_type :
                            crate ::types::NodeId::new(0u16, 17u32), description :
                            Default::default(), name : "GroupId".into(), value_rank : -
                            1i32, }),
                        ],
                    ),
                ),
                1u8,
                1u8,
                Some(vec![0u32]),
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17427u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2665(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17507u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "InputArguments"),
                    crate::types::LocalizedText::new("", "InputArguments"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 296u32),
                false,
                1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        vec![
                            crate ::types::ExtensionObject::from_message(& crate
                            ::types::Argument { array_dimensions : None, data_type :
                            crate ::types::NodeId::new(0u16, 15520u32), description :
                            Default::default(), name : "Configuration".into(), value_rank
                            : - 1i32, }),
                        ],
                    ),
                ),
                1u8,
                1u8,
                Some(vec![0u32]),
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17465u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2666(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17508u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "OutputArguments"),
                    crate::types::LocalizedText::new("", "OutputArguments"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 296u32),
                false,
                1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        vec![
                            crate ::types::ExtensionObject::from_message(& crate
                            ::types::Argument { array_dimensions : None, data_type :
                            crate ::types::NodeId::new(0u16, 17u32), description :
                            Default::default(), name : "GroupId".into(), value_rank : -
                            1i32, }),
                        ],
                    ),
                ),
                1u8,
                1u8,
                Some(vec![0u32]),
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17465u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2668(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 14226u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "InputArguments"),
                    crate::types::LocalizedText::new("", "InputArguments"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 296u32),
                false,
                1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        vec![
                            crate ::types::ExtensionObject::from_message(& crate
                            ::types::Argument { array_dimensions : None, data_type :
                            crate ::types::NodeId::new(0u16, 17u32), description :
                            Default::default(), name : "GroupId".into(), value_rank : -
                            1i32, }),
                        ],
                    ),
                ),
                1u8,
                1u8,
                Some(vec![0u32]),
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 14225u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_267(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 12126u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "SetPublishingModeCount"),
                    crate::types::LocalizedText::new("", "SetPublishingModeCount"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 871u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 63u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12098u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2671(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 15926u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "SecurityMode"),
                    crate::types::LocalizedText::new("", "SecurityMode"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 302u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 14232u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2672(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 15927u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "SecurityGroupId"),
                    crate::types::LocalizedText::new("", "SecurityGroupId"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 80u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 14232u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2673(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 15928u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "SecurityKeyServices"),
                    crate::types::LocalizedText::new("", "SecurityKeyServices"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 312u32),
                false,
                1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                Some(vec![0u32]),
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 80u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 14232u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2674(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17724u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "MaxNetworkMessageSize"),
                    crate::types::LocalizedText::new("", "MaxNetworkMessageSize"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 7u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 14232u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2675(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17488u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "GroupProperties"),
                    crate::types::LocalizedText::new("", "GroupProperties"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 14533u32),
                false,
                1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                Some(vec![0u32]),
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 14232u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2677(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 15266u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "State"),
                    crate::types::LocalizedText::new("", "State"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 14647u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 63u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15265u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2679(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17736u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "WriterGroupId"),
                    crate::types::LocalizedText::new("", "WriterGroupId"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 5u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17725u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_268(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 12127u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "PublishCount"),
                    crate::types::LocalizedText::new("", "PublishCount"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 871u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 63u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12098u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2680(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17737u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "PublishingInterval"),
                    crate::types::LocalizedText::new("", "PublishingInterval"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 290u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17725u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2681(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17738u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "KeepAliveTime"),
                    crate::types::LocalizedText::new("", "KeepAliveTime"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 290u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17725u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2682(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17739u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "Priority"),
                    crate::types::LocalizedText::new("", "Priority"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 3u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17725u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2683(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17740u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "LocaleIds"),
                    crate::types::LocalizedText::new("", "LocaleIds"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 295u32),
                false,
                1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                Some(vec![0u32]),
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17725u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2684(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17559u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "HeaderLayoutUri"),
                    crate::types::LocalizedText::new("", "HeaderLayoutUri"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 12u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17725u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2688(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17744u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "DataSetWriterId"),
                    crate::types::LocalizedText::new("", "DataSetWriterId"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 5u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17743u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2689(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17745u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "DataSetFieldContentMask"),
                    crate::types::LocalizedText::new("", "DataSetFieldContentMask"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 15583u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17743u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_269(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 12128u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "RepublishCount"),
                    crate::types::LocalizedText::new("", "RepublishCount"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 871u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 63u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12098u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2690(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17490u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "DataSetWriterProperties"),
                    crate::types::LocalizedText::new("", "DataSetWriterProperties"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 14533u32),
                false,
                1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                Some(vec![0u32]),
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17743u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2692(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17750u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "State"),
                    crate::types::LocalizedText::new("", "State"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 14647u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 63u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17749u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2694(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17813u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "DiagnosticsLevel"),
                    crate::types::LocalizedText::new("", "DiagnosticsLevel"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 19723u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 63u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17812u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2695(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17814u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "TotalInformation"),
                    crate::types::LocalizedText::new("", "TotalInformation"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 7u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17815u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17816u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17817u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19725u32), type_id : crate
            ::types::NodeId::new(0u16, 40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17812u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2696(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17815u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "Active"),
                    crate::types::LocalizedText::new("", "Active"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 1u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17814u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2697(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17816u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "Classification"),
                    crate::types::LocalizedText::new("", "Classification"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 19730u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17814u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2698(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17817u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "DiagnosticsLevel"),
                    crate::types::LocalizedText::new("", "DiagnosticsLevel"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 19723u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17814u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2699(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17819u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "TotalError"),
                    crate::types::LocalizedText::new("", "TotalError"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 7u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17820u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17821u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17822u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19725u32), type_id : crate
            ::types::NodeId::new(0u16, 40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17812u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_270(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 12129u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "TransferSubscriptionsCount"),
                    crate::types::LocalizedText::new("", "TransferSubscriptionsCount"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 871u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 63u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12098u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2700(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17820u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "Active"),
                    crate::types::LocalizedText::new("", "Active"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 1u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17819u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2701(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17821u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "Classification"),
                    crate::types::LocalizedText::new("", "Classification"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 19730u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17819u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2702(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17822u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "DiagnosticsLevel"),
                    crate::types::LocalizedText::new("", "DiagnosticsLevel"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 19723u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17819u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2704(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17825u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "SubError"),
                    crate::types::LocalizedText::new("", "SubError"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 1u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 63u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17812u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2706(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17827u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "StateError"),
                    crate::types::LocalizedText::new("", "StateError"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 7u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17828u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17829u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17830u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19725u32), type_id : crate
            ::types::NodeId::new(0u16, 40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17826u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2707(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17828u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "Active"),
                    crate::types::LocalizedText::new("", "Active"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 1u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17827u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2708(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17829u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "Classification"),
                    crate::types::LocalizedText::new("", "Classification"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 19730u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(crate::types::Variant::from(1i32)),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17827u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2709(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17830u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "DiagnosticsLevel"),
                    crate::types::LocalizedText::new("", "DiagnosticsLevel"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 19723u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(crate::types::Variant::from(0i32)),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17827u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_271(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 12130u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "DeleteSubscriptionsCount"),
                    crate::types::LocalizedText::new("", "DeleteSubscriptionsCount"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 871u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 63u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12098u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2710(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17832u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "StateOperationalByMethod"),
                    crate::types::LocalizedText::new("", "StateOperationalByMethod"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 7u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17833u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17834u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17835u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19725u32), type_id : crate
            ::types::NodeId::new(0u16, 40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17826u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2711(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17833u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "Active"),
                    crate::types::LocalizedText::new("", "Active"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 1u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17832u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2712(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17834u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "Classification"),
                    crate::types::LocalizedText::new("", "Classification"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 19730u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(crate::types::Variant::from(0i32)),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17832u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2713(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17835u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "DiagnosticsLevel"),
                    crate::types::LocalizedText::new("", "DiagnosticsLevel"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 19723u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(crate::types::Variant::from(0i32)),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17832u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2714(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17837u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "StateOperationalByParent"),
                    crate::types::LocalizedText::new("", "StateOperationalByParent"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 7u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17838u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17839u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17840u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19725u32), type_id : crate
            ::types::NodeId::new(0u16, 40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17826u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2715(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17838u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "Active"),
                    crate::types::LocalizedText::new("", "Active"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 1u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17837u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2716(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17839u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "Classification"),
                    crate::types::LocalizedText::new("", "Classification"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 19730u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(crate::types::Variant::from(0i32)),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17837u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2717(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17840u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "DiagnosticsLevel"),
                    crate::types::LocalizedText::new("", "DiagnosticsLevel"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 19723u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(crate::types::Variant::from(0i32)),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17837u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2718(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17842u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "StateOperationalFromError"),
                    crate::types::LocalizedText::new("", "StateOperationalFromError"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 7u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17843u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17844u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17845u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19725u32), type_id : crate
            ::types::NodeId::new(0u16, 40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17826u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2719(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17843u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "Active"),
                    crate::types::LocalizedText::new("", "Active"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 1u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17842u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_272(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 12131u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "AddNodesCount"),
                    crate::types::LocalizedText::new("", "AddNodesCount"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 871u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 63u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12098u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2720(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17844u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "Classification"),
                    crate::types::LocalizedText::new("", "Classification"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 19730u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(crate::types::Variant::from(0i32)),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17842u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2721(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17845u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "DiagnosticsLevel"),
                    crate::types::LocalizedText::new("", "DiagnosticsLevel"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 19723u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(crate::types::Variant::from(0i32)),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17842u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2722(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17847u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "StatePausedByParent"),
                    crate::types::LocalizedText::new("", "StatePausedByParent"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 7u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17848u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17849u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17850u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19725u32), type_id : crate
            ::types::NodeId::new(0u16, 40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17826u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2723(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17848u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "Active"),
                    crate::types::LocalizedText::new("", "Active"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 1u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17847u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2724(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17849u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "Classification"),
                    crate::types::LocalizedText::new("", "Classification"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 19730u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(crate::types::Variant::from(0i32)),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17847u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2725(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17850u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "DiagnosticsLevel"),
                    crate::types::LocalizedText::new("", "DiagnosticsLevel"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 19723u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(crate::types::Variant::from(0i32)),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17847u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2726(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17853u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "StateDisabledByMethod"),
                    crate::types::LocalizedText::new("", "StateDisabledByMethod"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 7u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17854u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17855u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17856u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19725u32), type_id : crate
            ::types::NodeId::new(0u16, 40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17826u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2727(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17854u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "Active"),
                    crate::types::LocalizedText::new("", "Active"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 1u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17853u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2728(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17855u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "Classification"),
                    crate::types::LocalizedText::new("", "Classification"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 19730u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(crate::types::Variant::from(0i32)),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17853u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2729(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17856u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "DiagnosticsLevel"),
                    crate::types::LocalizedText::new("", "DiagnosticsLevel"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 19723u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(crate::types::Variant::from(0i32)),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17853u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_273(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 12132u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "AddReferencesCount"),
                    crate::types::LocalizedText::new("", "AddReferencesCount"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 871u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 63u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12098u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2730(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17859u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "SentNetworkMessages"),
                    crate::types::LocalizedText::new("", "SentNetworkMessages"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 7u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17864u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17871u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17872u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19725u32), type_id : crate
            ::types::NodeId::new(0u16, 40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17826u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2731(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17864u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "Active"),
                    crate::types::LocalizedText::new("", "Active"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 1u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17859u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2732(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17871u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "Classification"),
                    crate::types::LocalizedText::new("", "Classification"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 19730u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(crate::types::Variant::from(0i32)),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17859u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2733(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17872u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "DiagnosticsLevel"),
                    crate::types::LocalizedText::new("", "DiagnosticsLevel"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 19723u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(crate::types::Variant::from(0i32)),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17859u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2734(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17874u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "FailedTransmissions"),
                    crate::types::LocalizedText::new("", "FailedTransmissions"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 7u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17878u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17885u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17892u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19725u32), type_id : crate
            ::types::NodeId::new(0u16, 40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17826u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2735(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17878u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "Active"),
                    crate::types::LocalizedText::new("", "Active"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 1u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17874u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2736(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17885u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "Classification"),
                    crate::types::LocalizedText::new("", "Classification"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 19730u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(crate::types::Variant::from(1i32)),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17874u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2737(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17892u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "DiagnosticsLevel"),
                    crate::types::LocalizedText::new("", "DiagnosticsLevel"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 19723u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(crate::types::Variant::from(0i32)),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17874u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2738(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17900u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "EncryptionErrors"),
                    crate::types::LocalizedText::new("", "EncryptionErrors"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 7u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17901u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17902u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17903u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19725u32), type_id : crate
            ::types::NodeId::new(0u16, 40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17826u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_2739(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17901u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "Active"),
                    crate::types::LocalizedText::new("", "Active"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 1u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 68u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17900u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_274(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 12133u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "DeleteNodesCount"),
                    crate::types::LocalizedText::new("", "DeleteNodesCount"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 871u32),
                false,
                -1i32,
                crate::types::DataValue::null(),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 63u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 78u32), type_id : crate ::types::NodeId::new(0u16,
            37u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12098u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : false, }
        ],
    }
}
