// OPCUA for Rust
// SPDX-License-Identifier: MPL-2.0
// Copyright (C) 2017-2024 Adam Lock, Einar Omang
//
// This file was autogenerated from tools/schema/schemas/1.0.4/Opc.Ua.NodeSet2.xml by opcua-codegen
//
// DO NOT EDIT THIS FILE
pub(super) fn imported_nodes<'a>(
    ns_map: &'a crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> Box<dyn Iterator<Item = crate::server::address_space::ImportedItem> + 'a> {
    Box::new(
        [
            &make_variable_1888 as &dyn Fn(_) -> crate::server::address_space::ImportedItem,
            &make_variable_1889,
            &make_variable_1890,
            &make_variable_1891,
            &make_variable_1892,
            &make_variable_1893,
            &make_variable_1894,
            &make_variable_1895,
            &make_variable_1896,
            &make_variable_1897,
            &make_variable_190,
            &make_variable_1901,
            &make_variable_1902,
            &make_variable_1903,
            &make_variable_1905,
            &make_variable_1906,
            &make_variable_1907,
            &make_variable_1908,
            &make_variable_1909,
            &make_variable_191,
            &make_variable_1910,
            &make_variable_1911,
            &make_variable_1912,
            &make_variable_1913,
            &make_variable_1915,
            &make_variable_1919,
            &make_variable_1920,
            &make_variable_1921,
            &make_variable_1922,
            &make_variable_1924,
            &make_variable_1925,
            &make_variable_1927,
            &make_variable_1929,
            &make_variable_193,
            &make_variable_1930,
            &make_variable_1932,
            &make_variable_1934,
            &make_variable_1935,
            &make_variable_1937,
            &make_variable_1938,
            &make_variable_1940,
            &make_variable_1941,
            &make_variable_1942,
            &make_variable_1945,
            &make_variable_1946,
            &make_variable_1947,
            &make_variable_1948,
            &make_variable_195,
            &make_variable_1950,
            &make_variable_1951,
            &make_variable_1953,
            &make_variable_1955,
            &make_variable_1956,
            &make_variable_1958,
            &make_variable_196,
            &make_variable_1960,
            &make_variable_1961,
            &make_variable_1963,
            &make_variable_1964,
            &make_variable_1966,
            &make_variable_1967,
            &make_variable_1968,
            &make_variable_197,
            &make_variable_1971,
            &make_variable_1972,
            &make_variable_1973,
            &make_variable_1974,
            &make_variable_1976,
            &make_variable_1977,
            &make_variable_1979,
            &make_variable_198,
            &make_variable_1981,
            &make_variable_1982,
            &make_variable_1984,
            &make_variable_1986,
            &make_variable_1987,
            &make_variable_1989,
            &make_variable_199,
            &make_variable_1990,
            &make_variable_1992,
            &make_variable_1993,
            &make_variable_1994,
            &make_variable_1997,
            &make_variable_1998,
            &make_variable_1999,
            &make_variable_200,
            &make_variable_2000,
            &make_variable_2002,
            &make_variable_2003,
            &make_variable_2005,
            &make_variable_2007,
            &make_variable_2008,
            &make_variable_201,
            &make_variable_2010,
            &make_variable_2012,
            &make_variable_2013,
            &make_variable_2015,
            &make_variable_2016,
            &make_variable_2018,
            &make_variable_2019,
        ]
        .into_iter()
        .map(|f| f(ns_map)),
    )
}
#[allow(unused)]
fn make_variable_1888(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 20159u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "Retain"),
                crate::types::LocalizedText::new("", "Retain"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 1u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 20143u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1889(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 20160u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "EnabledState"),
                crate::types::LocalizedText::new("", "EnabledState"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 21u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 20161u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 8995u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 20143u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1890(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 20161u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "Id"),
                crate::types::LocalizedText::new("", "Id"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 1u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 20160u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1891(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 20169u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "Quality"),
                crate::types::LocalizedText::new("", "Quality"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 19u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 20170u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 9002u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 20143u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1892(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 20170u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "SourceTimestamp"),
                crate::types::LocalizedText::new("", "SourceTimestamp"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 294u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 20169u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1893(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 20171u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "LastSeverity"),
                crate::types::LocalizedText::new("", "LastSeverity"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 5u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 20172u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 9002u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 20143u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1894(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 20172u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "SourceTimestamp"),
                crate::types::LocalizedText::new("", "SourceTimestamp"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 294u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 20171u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1895(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 20173u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "Comment"),
                crate::types::LocalizedText::new("", "Comment"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 21u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 20174u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 9002u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 20143u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1896(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 20174u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "SourceTimestamp"),
                crate::types::LocalizedText::new("", "SourceTimestamp"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 294u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 20173u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1897(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 20175u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "ClientUserId"),
                crate::types::LocalizedText::new("", "ClientUserId"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 20143u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_190(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 12747u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "InputArguments"),
                crate::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 7u32),
                    description: Default::default(),
                    name: "SubscriptionId".into(),
                    value_rank: -1i32,
                }),
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 7u32),
                    description: Default::default(),
                    name: "LifetimeInHours".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 12746u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1901(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 20179u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "InputArguments"),
                crate::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 15u32),
                    description: crate::types::LocalizedText::new(
                        "",
                        "The identifier for the event to comment.",
                    ),
                    name: "EventId".into(),
                    value_rank: -1i32,
                }),
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 21u32),
                    description: crate::types::LocalizedText::new(
                        "",
                        "The comment to add to the condition.",
                    ),
                    name: "Comment".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 20178u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1902(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 20180u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "AckedState"),
                crate::types::LocalizedText::new("", "AckedState"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 21u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 20181u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 8995u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 20143u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1903(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 20181u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "Id"),
                crate::types::LocalizedText::new("", "Id"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 1u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 20180u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1905(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 20199u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "InputArguments"),
                crate::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 15u32),
                    description: crate::types::LocalizedText::new(
                        "",
                        "The identifier for the event to comment.",
                    ),
                    name: "EventId".into(),
                    value_rank: -1i32,
                }),
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 21u32),
                    description: crate::types::LocalizedText::new(
                        "",
                        "The comment to add to the condition.",
                    ),
                    name: "Comment".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 20198u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1906(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 20202u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "ActiveState"),
                crate::types::LocalizedText::new("", "ActiveState"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 21u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 20203u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 8995u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 20143u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1907(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 20203u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "Id"),
                crate::types::LocalizedText::new("", "Id"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 1u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 20202u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1908(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 20211u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "InputNode"),
                crate::types::LocalizedText::new("", "InputNode"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 17u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 20143u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1909(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 20249u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "SuppressedOrShelved"),
                crate::types::LocalizedText::new("", "SuppressedOrShelved"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 1u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 20143u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_191(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 12748u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "OutputArguments"),
                crate::types::LocalizedText::new("", "OutputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 7u32),
                    description: Default::default(),
                    name: "RevisedLifetimeInHours".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 12746u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1910(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 20286u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "NormalState"),
                crate::types::LocalizedText::new("", "NormalState"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 17u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 20143u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1911(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 20287u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "TrustListId"),
                crate::types::LocalizedText::new("", "TrustListId"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 17u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 20143u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1912(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 20288u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "LastUpdateTime"),
                crate::types::LocalizedText::new("", "LastUpdateTime"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 294u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 20143u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1913(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 20289u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "UpdateFrequency"),
                crate::types::LocalizedText::new("", "UpdateFrequency"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 290u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 20143u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1915(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 23527u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "OutputArguments"),
                crate::types::LocalizedText::new("", "OutputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: Some(vec![0u32]),
                    data_type: crate::types::NodeId::new(0u16, 15u32),
                    description: Default::default(),
                    name: "Certificates".into(),
                    value_rank: 1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 23526u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1919(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 13816u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "Size"),
                crate::types::LocalizedText::new("", "Size"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 9u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13815u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1920(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 13817u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "Writable"),
                crate::types::LocalizedText::new("", "Writable"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 1u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13815u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1921(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 13818u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "UserWritable"),
                crate::types::LocalizedText::new("", "UserWritable"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 1u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13815u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1922(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 13819u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "OpenCount"),
                crate::types::LocalizedText::new("", "OpenCount"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 5u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13815u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1924(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 13822u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "InputArguments"),
                crate::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 3u32),
                    description: Default::default(),
                    name: "Mode".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13821u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1925(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 13823u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "OutputArguments"),
                crate::types::LocalizedText::new("", "OutputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 7u32),
                    description: Default::default(),
                    name: "FileHandle".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13821u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1927(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 13825u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "InputArguments"),
                crate::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 7u32),
                    description: Default::default(),
                    name: "FileHandle".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13824u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1929(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 13827u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "InputArguments"),
                crate::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 7u32),
                    description: Default::default(),
                    name: "FileHandle".into(),
                    value_rank: -1i32,
                }),
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 6u32),
                    description: Default::default(),
                    name: "Length".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13826u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_193(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 12884u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "InputArguments"),
                crate::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 852u32),
                    description: Default::default(),
                    name: "State".into(),
                    value_rank: -1i32,
                }),
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 13u32),
                    description: Default::default(),
                    name: "EstimatedReturnTime".into(),
                    value_rank: -1i32,
                }),
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 7u32),
                    description: Default::default(),
                    name: "SecondsTillShutdown".into(),
                    value_rank: -1i32,
                }),
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 21u32),
                    description: Default::default(),
                    name: "Reason".into(),
                    value_rank: -1i32,
                }),
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 1u32),
                    description: Default::default(),
                    name: "Restart".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 12883u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1930(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 13828u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "OutputArguments"),
                crate::types::LocalizedText::new("", "OutputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 15u32),
                    description: Default::default(),
                    name: "Data".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13826u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1932(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 13830u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "InputArguments"),
                crate::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 7u32),
                    description: Default::default(),
                    name: "FileHandle".into(),
                    value_rank: -1i32,
                }),
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 15u32),
                    description: Default::default(),
                    name: "Data".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13829u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1934(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 13832u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "InputArguments"),
                crate::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 7u32),
                    description: Default::default(),
                    name: "FileHandle".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13831u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1935(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 13833u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "OutputArguments"),
                crate::types::LocalizedText::new("", "OutputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 9u32),
                    description: Default::default(),
                    name: "Position".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13831u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1937(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 13835u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "InputArguments"),
                crate::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 7u32),
                    description: Default::default(),
                    name: "FileHandle".into(),
                    value_rank: -1i32,
                }),
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 9u32),
                    description: Default::default(),
                    name: "Position".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13834u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1938(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 13836u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "LastUpdateTime"),
                crate::types::LocalizedText::new("", "LastUpdateTime"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 294u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13815u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1940(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 13838u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "InputArguments"),
                crate::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 7u32),
                    description: Default::default(),
                    name: "Masks".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13837u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1941(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 13839u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "OutputArguments"),
                crate::types::LocalizedText::new("", "OutputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 7u32),
                    description: Default::default(),
                    name: "FileHandle".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13837u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1942(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 13847u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "CertificateTypes"),
                crate::types::LocalizedText::new("", "CertificateTypes"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 17u32),
            false,
            1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13814u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1945(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 13850u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "Size"),
                crate::types::LocalizedText::new("", "Size"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 9u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13849u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1946(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 13851u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "Writable"),
                crate::types::LocalizedText::new("", "Writable"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 1u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13849u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1947(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 13852u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "UserWritable"),
                crate::types::LocalizedText::new("", "UserWritable"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 1u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13849u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1948(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 13853u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "OpenCount"),
                crate::types::LocalizedText::new("", "OpenCount"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 5u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13849u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_195(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2014u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "ServerProfileArray"),
                crate::types::LocalizedText::new("", "ServerProfileArray"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 12u32),
            false,
            1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2013u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1950(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 13856u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "InputArguments"),
                crate::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 3u32),
                    description: Default::default(),
                    name: "Mode".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13855u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1951(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 13857u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "OutputArguments"),
                crate::types::LocalizedText::new("", "OutputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 7u32),
                    description: Default::default(),
                    name: "FileHandle".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13855u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1953(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 13859u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "InputArguments"),
                crate::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 7u32),
                    description: Default::default(),
                    name: "FileHandle".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13858u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1955(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 13861u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "InputArguments"),
                crate::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 7u32),
                    description: Default::default(),
                    name: "FileHandle".into(),
                    value_rank: -1i32,
                }),
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 6u32),
                    description: Default::default(),
                    name: "Length".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13860u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1956(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 13862u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "OutputArguments"),
                crate::types::LocalizedText::new("", "OutputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 15u32),
                    description: Default::default(),
                    name: "Data".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13860u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1958(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 13864u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "InputArguments"),
                crate::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 7u32),
                    description: Default::default(),
                    name: "FileHandle".into(),
                    value_rank: -1i32,
                }),
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 15u32),
                    description: Default::default(),
                    name: "Data".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13863u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_196(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2016u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "LocaleIdArray"),
                crate::types::LocalizedText::new("", "LocaleIdArray"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 295u32),
            false,
            1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2013u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1960(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 13866u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "InputArguments"),
                crate::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 7u32),
                    description: Default::default(),
                    name: "FileHandle".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13865u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1961(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 13867u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "OutputArguments"),
                crate::types::LocalizedText::new("", "OutputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 9u32),
                    description: Default::default(),
                    name: "Position".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13865u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1963(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 13869u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "InputArguments"),
                crate::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 7u32),
                    description: Default::default(),
                    name: "FileHandle".into(),
                    value_rank: -1i32,
                }),
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 9u32),
                    description: Default::default(),
                    name: "Position".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13868u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1964(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 13870u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "LastUpdateTime"),
                crate::types::LocalizedText::new("", "LastUpdateTime"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 294u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13849u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1966(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 13872u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "InputArguments"),
                crate::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 7u32),
                    description: Default::default(),
                    name: "Masks".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13871u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1967(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 13873u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "OutputArguments"),
                crate::types::LocalizedText::new("", "OutputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 7u32),
                    description: Default::default(),
                    name: "FileHandle".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13871u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1968(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 13881u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "CertificateTypes"),
                crate::types::LocalizedText::new("", "CertificateTypes"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 17u32),
            false,
            1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13848u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_197(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2017u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "MinSupportedSampleRate"),
                crate::types::LocalizedText::new("", "MinSupportedSampleRate"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 290u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2013u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1971(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 13884u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "Size"),
                crate::types::LocalizedText::new("", "Size"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 9u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13883u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1972(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 13885u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "Writable"),
                crate::types::LocalizedText::new("", "Writable"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 1u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13883u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1973(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 13886u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "UserWritable"),
                crate::types::LocalizedText::new("", "UserWritable"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 1u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13883u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1974(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 13887u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "OpenCount"),
                crate::types::LocalizedText::new("", "OpenCount"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 5u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13883u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1976(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 13890u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "InputArguments"),
                crate::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 3u32),
                    description: Default::default(),
                    name: "Mode".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13889u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1977(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 13891u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "OutputArguments"),
                crate::types::LocalizedText::new("", "OutputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 7u32),
                    description: Default::default(),
                    name: "FileHandle".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13889u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1979(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 13893u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "InputArguments"),
                crate::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 7u32),
                    description: Default::default(),
                    name: "FileHandle".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13892u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_198(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2732u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "MaxBrowseContinuationPoints"),
                crate::types::LocalizedText::new("", "MaxBrowseContinuationPoints"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 5u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2013u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1981(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 13895u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "InputArguments"),
                crate::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 7u32),
                    description: Default::default(),
                    name: "FileHandle".into(),
                    value_rank: -1i32,
                }),
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 6u32),
                    description: Default::default(),
                    name: "Length".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13894u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1982(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 13896u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "OutputArguments"),
                crate::types::LocalizedText::new("", "OutputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 15u32),
                    description: Default::default(),
                    name: "Data".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13894u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1984(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 13898u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "InputArguments"),
                crate::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 7u32),
                    description: Default::default(),
                    name: "FileHandle".into(),
                    value_rank: -1i32,
                }),
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 15u32),
                    description: Default::default(),
                    name: "Data".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13897u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1986(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 13900u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "InputArguments"),
                crate::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 7u32),
                    description: Default::default(),
                    name: "FileHandle".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13899u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1987(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 13901u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "OutputArguments"),
                crate::types::LocalizedText::new("", "OutputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 9u32),
                    description: Default::default(),
                    name: "Position".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13899u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1989(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 13903u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "InputArguments"),
                crate::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 7u32),
                    description: Default::default(),
                    name: "FileHandle".into(),
                    value_rank: -1i32,
                }),
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 9u32),
                    description: Default::default(),
                    name: "Position".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13902u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_199(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2733u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "MaxQueryContinuationPoints"),
                crate::types::LocalizedText::new("", "MaxQueryContinuationPoints"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 5u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2013u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1990(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 13904u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "LastUpdateTime"),
                crate::types::LocalizedText::new("", "LastUpdateTime"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 294u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13883u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1992(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 13906u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "InputArguments"),
                crate::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 7u32),
                    description: Default::default(),
                    name: "Masks".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13905u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1993(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 13907u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "OutputArguments"),
                crate::types::LocalizedText::new("", "OutputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 7u32),
                    description: Default::default(),
                    name: "FileHandle".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13905u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1994(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 13915u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "CertificateTypes"),
                crate::types::LocalizedText::new("", "CertificateTypes"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 17u32),
            false,
            1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13882u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1997(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 13918u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "Size"),
                crate::types::LocalizedText::new("", "Size"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 9u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13917u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1998(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 13919u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "Writable"),
                crate::types::LocalizedText::new("", "Writable"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 1u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13917u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1999(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 13920u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "UserWritable"),
                crate::types::LocalizedText::new("", "UserWritable"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 1u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13917u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_200(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2734u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "MaxHistoryContinuationPoints"),
                crate::types::LocalizedText::new("", "MaxHistoryContinuationPoints"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 5u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2013u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_2000(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 13921u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "OpenCount"),
                crate::types::LocalizedText::new("", "OpenCount"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 5u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13917u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_2002(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 13924u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "InputArguments"),
                crate::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 3u32),
                    description: Default::default(),
                    name: "Mode".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13923u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_2003(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 13925u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "OutputArguments"),
                crate::types::LocalizedText::new("", "OutputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 7u32),
                    description: Default::default(),
                    name: "FileHandle".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13923u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_2005(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 13927u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "InputArguments"),
                crate::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 7u32),
                    description: Default::default(),
                    name: "FileHandle".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13926u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_2007(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 13929u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "InputArguments"),
                crate::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 7u32),
                    description: Default::default(),
                    name: "FileHandle".into(),
                    value_rank: -1i32,
                }),
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 6u32),
                    description: Default::default(),
                    name: "Length".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13928u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_2008(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 13930u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "OutputArguments"),
                crate::types::LocalizedText::new("", "OutputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 15u32),
                    description: Default::default(),
                    name: "Data".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13928u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_201(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 3049u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "SoftwareCertificates"),
                crate::types::LocalizedText::new("", "SoftwareCertificates"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 344u32),
            false,
            1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2013u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_2010(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 13932u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "InputArguments"),
                crate::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 7u32),
                    description: Default::default(),
                    name: "FileHandle".into(),
                    value_rank: -1i32,
                }),
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 15u32),
                    description: Default::default(),
                    name: "Data".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13931u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_2012(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 13934u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "InputArguments"),
                crate::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 7u32),
                    description: Default::default(),
                    name: "FileHandle".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13933u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_2013(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 13935u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "OutputArguments"),
                crate::types::LocalizedText::new("", "OutputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 9u32),
                    description: Default::default(),
                    name: "Position".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13933u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_2015(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 13937u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "InputArguments"),
                crate::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 7u32),
                    description: Default::default(),
                    name: "FileHandle".into(),
                    value_rank: -1i32,
                }),
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 9u32),
                    description: Default::default(),
                    name: "Position".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13936u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_2016(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 13938u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "LastUpdateTime"),
                crate::types::LocalizedText::new("", "LastUpdateTime"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 294u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13917u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_2018(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 13940u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "InputArguments"),
                crate::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 7u32),
                    description: Default::default(),
                    name: "Masks".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13939u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_2019(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 13941u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "OutputArguments"),
                crate::types::LocalizedText::new("", "OutputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::Argument {
                    array_dimensions: None,
                    data_type: crate::types::NodeId::new(0u16, 7u32),
                    description: Default::default(),
                    name: "FileHandle".into(),
                    value_rank: -1i32,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 13939u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
