// OPCUA for Rust
// SPDX-License-Identifier: MPL-2.0
// Copyright (C) 2017-2024 Adam Lock, Einar Omang
//
// This file was autogenerated from tools/schema/schemas/1.0.4/Opc.Ua.NodeSet2.xml by opcua-codegen
//
// DO NOT EDIT THIS FILE
pub(super) fn imported_nodes<'a>(
    ns_map: &'a crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> Box<dyn Iterator<Item = crate::server::address_space::ImportedItem> + 'a> {
    Box::new(
        [
            &make_object_type_1555
                as &dyn Fn(_) -> crate::server::address_space::ImportedItem,
            &make_object_type_1557,
            &make_object_type_1560,
            &make_object_type_1562,
            &make_object_type_1563,
            &make_object_type_1565,
            &make_object_type_1566,
            &make_object_type_1567,
            &make_object_type_1568,
            &make_object_type_1569,
            &make_object_type_1574,
            &make_object_type_1578,
            &make_object_type_1579,
            &make_object_type_1580,
            &make_object_type_1581,
            &make_object_type_1582,
            &make_object_type_1583,
            &make_object_type_1584,
            &make_object_type_1585,
            &make_object_type_1586,
            &make_object_type_1587,
            &make_object_type_1588,
            &make_object_type_1589,
            &make_object_type_1592,
            &make_object_type_1594,
            &make_object_type_1597,
            &make_object_type_1600,
            &make_object_type_1602,
            &make_object_type_1603,
            &make_object_type_1604,
            &make_object_type_1605,
            &make_object_type_1606,
            &make_object_type_1607,
            &make_object_type_1608,
            &make_object_type_1614,
            &make_object_type_1629,
            &make_object_type_1689,
            &make_object_type_1691,
            &make_object_type_1693,
            &make_object_type_1721,
            &make_object_type_1745,
            &make_object_type_1762,
            &make_object_type_1768,
            &make_object_type_1773,
            &make_object_type_1777,
            &make_object_type_1779,
            &make_object_type_1784,
            &make_object_type_1787,
            &make_object_type_1790,
            &make_object_type_1806,
            &make_object_type_1810,
            &make_object_type_1916,
            &make_object_type_194,
            &make_object_type_2021,
            &make_object_type_2022,
            &make_object_type_2023,
            &make_object_type_2024,
            &make_object_type_2025,
            &make_object_type_2026,
            &make_object_type_2027,
            &make_object_type_2028,
            &make_object_type_2029,
            &make_object_type_2030,
            &make_object_type_2031,
            &make_object_type_2032,
            &make_object_type_2033,
            &make_object_type_2034,
            &make_object_type_2035,
            &make_object_type_2076,
            &make_object_type_215,
            &make_object_type_2193,
            &make_object_type_2201,
            &make_object_type_2212,
            &make_object_type_2214,
            &make_object_type_2215,
            &make_object_type_2216,
            &make_object_type_2222,
            &make_object_type_2226,
            &make_object_type_2336,
            &make_object_type_2349,
            &make_object_type_235,
            &make_object_type_2367,
            &make_object_type_2373,
            &make_object_type_2510,
            &make_object_type_2526,
            &make_object_type_2534,
            &make_object_type_2542,
            &make_object_type_2549,
            &make_object_type_2592,
            &make_object_type_2669,
            &make_object_type_2670,
            &make_object_type_2678,
            &make_object_type_2754,
            &make_object_type_2755,
            &make_object_type_2756,
            &make_object_type_2825,
            &make_object_type_2826,
            &make_object_type_2827,
            &make_object_type_2878,
            &make_object_type_2879,
        ]
            .into_iter()
            .map(|f| f(ns_map)),
    )
}
#[allow(unused)]
fn make_object_type_1555(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 10214u32),
                    crate::types::NodeClass::ObjectType,
                    crate::types::QualifiedName::new(
                        0u16,
                        "NonExclusiveRateOfChangeAlarmType",
                    ),
                    crate::types::LocalizedText::new(
                        "",
                        "NonExclusiveRateOfChangeAlarmType",
                    ),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                false,
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 16858u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 9906u32), type_id : crate
            ::types::NodeId::new(0u16, 45u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_type_1557(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 9764u32),
                    crate::types::NodeClass::ObjectType,
                    crate::types::QualifiedName::new(
                        0u16,
                        "ExclusiveDeviationAlarmType",
                    ),
                    crate::types::LocalizedText::new("", "ExclusiveDeviationAlarmType"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                false,
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 9905u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 16817u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 9341u32), type_id : crate
            ::types::NodeId::new(0u16, 45u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_type_1560(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 9623u32),
                    crate::types::NodeClass::ObjectType,
                    crate::types::QualifiedName::new(
                        0u16,
                        "ExclusiveRateOfChangeAlarmType",
                    ),
                    crate::types::LocalizedText::new(
                        "",
                        "ExclusiveRateOfChangeAlarmType",
                    ),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                false,
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 16899u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 9341u32), type_id : crate
            ::types::NodeId::new(0u16, 45u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_type_1562(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 10523u32),
                    crate::types::NodeClass::ObjectType,
                    crate::types::QualifiedName::new(0u16, "DiscreteAlarmType"),
                    crate::types::LocalizedText::new("", "DiscreteAlarmType"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                false,
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2915u32), type_id : crate
            ::types::NodeId::new(0u16, 45u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_type_1563(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 10637u32),
                    crate::types::NodeClass::ObjectType,
                    crate::types::QualifiedName::new(0u16, "OffNormalAlarmType"),
                    crate::types::LocalizedText::new("", "OffNormalAlarmType"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                false,
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 11158u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 10523u32), type_id : crate
            ::types::NodeId::new(0u16, 45u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_type_1565(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 11753u32),
                    crate::types::NodeClass::ObjectType,
                    crate::types::QualifiedName::new(0u16, "SystemOffNormalAlarmType"),
                    crate::types::LocalizedText::new("", "SystemOffNormalAlarmType"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                true,
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 10637u32), type_id : crate
            ::types::NodeId::new(0u16, 45u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_type_1566(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 10751u32),
                    crate::types::NodeClass::ObjectType,
                    crate::types::QualifiedName::new(0u16, "TripAlarmType"),
                    crate::types::LocalizedText::new("", "TripAlarmType"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                false,
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 10637u32), type_id : crate
            ::types::NodeId::new(0u16, 45u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_type_1567(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 18347u32),
                    crate::types::NodeClass::ObjectType,
                    crate::types::QualifiedName::new(
                        0u16,
                        "InstrumentDiagnosticAlarmType",
                    ),
                    crate::types::LocalizedText::new(
                        "",
                        "InstrumentDiagnosticAlarmType",
                    ),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                false,
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 10637u32), type_id : crate
            ::types::NodeId::new(0u16, 45u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_type_1568(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 18496u32),
                    crate::types::NodeClass::ObjectType,
                    crate::types::QualifiedName::new(0u16, "SystemDiagnosticAlarmType"),
                    crate::types::LocalizedText::new("", "SystemDiagnosticAlarmType"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                false,
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 10637u32), type_id : crate
            ::types::NodeId::new(0u16, 45u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_type_1569(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 13225u32),
                    crate::types::NodeClass::ObjectType,
                    crate::types::QualifiedName::new(
                        0u16,
                        "CertificateExpirationAlarmType",
                    ),
                    crate::types::LocalizedText::new(
                        "",
                        "CertificateExpirationAlarmType",
                    ),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                false,
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 13325u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 14900u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 13326u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 13327u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 11753u32), type_id : crate
            ::types::NodeId::new(0u16, 45u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_type_1574(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17080u32),
                    crate::types::NodeClass::ObjectType,
                    crate::types::QualifiedName::new(0u16, "DiscrepancyAlarmType"),
                    crate::types::LocalizedText::new("", "DiscrepancyAlarmType"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                false,
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17215u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17216u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17217u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2915u32), type_id : crate
            ::types::NodeId::new(0u16, 45u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_type_1578(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 11163u32),
                    crate::types::NodeClass::ObjectType,
                    crate::types::QualifiedName::new(0u16, "BaseConditionClassType"),
                    crate::types::LocalizedText::new("", "BaseConditionClassType"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                true,
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 58u32), type_id : crate ::types::NodeId::new(0u16,
            45u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_type_1579(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 11164u32),
                    crate::types::NodeClass::ObjectType,
                    crate::types::QualifiedName::new(0u16, "ProcessConditionClassType"),
                    crate::types::LocalizedText::new("", "ProcessConditionClassType"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                true,
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 11163u32), type_id : crate
            ::types::NodeId::new(0u16, 45u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_type_1580(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 11165u32),
                    crate::types::NodeClass::ObjectType,
                    crate::types::QualifiedName::new(
                        0u16,
                        "MaintenanceConditionClassType",
                    ),
                    crate::types::LocalizedText::new(
                        "",
                        "MaintenanceConditionClassType",
                    ),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                true,
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 11163u32), type_id : crate
            ::types::NodeId::new(0u16, 45u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_type_1581(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 11166u32),
                    crate::types::NodeClass::ObjectType,
                    crate::types::QualifiedName::new(0u16, "SystemConditionClassType"),
                    crate::types::LocalizedText::new("", "SystemConditionClassType"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                true,
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 11163u32), type_id : crate
            ::types::NodeId::new(0u16, 45u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_type_1582(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17218u32),
                    crate::types::NodeClass::ObjectType,
                    crate::types::QualifiedName::new(0u16, "SafetyConditionClassType"),
                    crate::types::LocalizedText::new("", "SafetyConditionClassType"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                true,
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 11163u32), type_id : crate
            ::types::NodeId::new(0u16, 45u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_type_1583(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17219u32),
                    crate::types::NodeClass::ObjectType,
                    crate::types::QualifiedName::new(
                        0u16,
                        "HighlyManagedAlarmConditionClassType",
                    ),
                    crate::types::LocalizedText::new(
                        "",
                        "HighlyManagedAlarmConditionClassType",
                    ),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                true,
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 11163u32), type_id : crate
            ::types::NodeId::new(0u16, 45u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_type_1584(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17220u32),
                    crate::types::NodeClass::ObjectType,
                    crate::types::QualifiedName::new(0u16, "TrainingConditionClassType"),
                    crate::types::LocalizedText::new("", "TrainingConditionClassType"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                true,
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 11163u32), type_id : crate
            ::types::NodeId::new(0u16, 45u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_type_1585(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 18665u32),
                    crate::types::NodeClass::ObjectType,
                    crate::types::QualifiedName::new(
                        0u16,
                        "StatisticalConditionClassType",
                    ),
                    crate::types::LocalizedText::new(
                        "",
                        "StatisticalConditionClassType",
                    ),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                true,
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 11163u32), type_id : crate
            ::types::NodeId::new(0u16, 45u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_type_1586(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17221u32),
                    crate::types::NodeClass::ObjectType,
                    crate::types::QualifiedName::new(
                        0u16,
                        "TestingConditionSubClassType",
                    ),
                    crate::types::LocalizedText::new("", "TestingConditionSubClassType"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                true,
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 11163u32), type_id : crate
            ::types::NodeId::new(0u16, 45u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_type_1587(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 2790u32),
                    crate::types::NodeClass::ObjectType,
                    crate::types::QualifiedName::new(0u16, "AuditConditionEventType"),
                    crate::types::LocalizedText::new("", "AuditConditionEventType"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                false,
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2127u32), type_id : crate
            ::types::NodeId::new(0u16, 45u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_type_1588(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 2803u32),
                    crate::types::NodeClass::ObjectType,
                    crate::types::QualifiedName::new(
                        0u16,
                        "AuditConditionEnableEventType",
                    ),
                    crate::types::LocalizedText::new(
                        "",
                        "AuditConditionEnableEventType",
                    ),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                false,
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2790u32), type_id : crate
            ::types::NodeId::new(0u16, 45u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_type_1589(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 2829u32),
                    crate::types::NodeClass::ObjectType,
                    crate::types::QualifiedName::new(
                        0u16,
                        "AuditConditionCommentEventType",
                    ),
                    crate::types::LocalizedText::new(
                        "",
                        "AuditConditionCommentEventType",
                    ),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                false,
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17222u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 11851u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2790u32), type_id : crate
            ::types::NodeId::new(0u16, 45u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_type_1592(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 8927u32),
                    crate::types::NodeClass::ObjectType,
                    crate::types::QualifiedName::new(
                        0u16,
                        "AuditConditionRespondEventType",
                    ),
                    crate::types::LocalizedText::new(
                        "",
                        "AuditConditionRespondEventType",
                    ),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                false,
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 11852u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2790u32), type_id : crate
            ::types::NodeId::new(0u16, 45u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_type_1594(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 8944u32),
                    crate::types::NodeClass::ObjectType,
                    crate::types::QualifiedName::new(
                        0u16,
                        "AuditConditionAcknowledgeEventType",
                    ),
                    crate::types::LocalizedText::new(
                        "",
                        "AuditConditionAcknowledgeEventType",
                    ),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                false,
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17223u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 11853u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2790u32), type_id : crate
            ::types::NodeId::new(0u16, 45u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_type_1597(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 8961u32),
                    crate::types::NodeClass::ObjectType,
                    crate::types::QualifiedName::new(
                        0u16,
                        "AuditConditionConfirmEventType",
                    ),
                    crate::types::LocalizedText::new(
                        "",
                        "AuditConditionConfirmEventType",
                    ),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                false,
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17224u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 11854u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2790u32), type_id : crate
            ::types::NodeId::new(0u16, 45u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_type_1600(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 11093u32),
                    crate::types::NodeClass::ObjectType,
                    crate::types::QualifiedName::new(
                        0u16,
                        "AuditConditionShelvingEventType",
                    ),
                    crate::types::LocalizedText::new(
                        "",
                        "AuditConditionShelvingEventType",
                    ),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                false,
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 11855u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2790u32), type_id : crate
            ::types::NodeId::new(0u16, 45u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_type_1602(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17225u32),
                    crate::types::NodeClass::ObjectType,
                    crate::types::QualifiedName::new(
                        0u16,
                        "AuditConditionSuppressionEventType",
                    ),
                    crate::types::LocalizedText::new(
                        "",
                        "AuditConditionSuppressionEventType",
                    ),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                false,
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2790u32), type_id : crate
            ::types::NodeId::new(0u16, 45u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_type_1603(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17242u32),
                    crate::types::NodeClass::ObjectType,
                    crate::types::QualifiedName::new(
                        0u16,
                        "AuditConditionSilenceEventType",
                    ),
                    crate::types::LocalizedText::new(
                        "",
                        "AuditConditionSilenceEventType",
                    ),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                false,
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2790u32), type_id : crate
            ::types::NodeId::new(0u16, 45u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_type_1604(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 15013u32),
                    crate::types::NodeClass::ObjectType,
                    crate::types::QualifiedName::new(
                        0u16,
                        "AuditConditionResetEventType",
                    ),
                    crate::types::LocalizedText::new("", "AuditConditionResetEventType"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                false,
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2790u32), type_id : crate
            ::types::NodeId::new(0u16, 45u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_type_1605(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17259u32),
                    crate::types::NodeClass::ObjectType,
                    crate::types::QualifiedName::new(
                        0u16,
                        "AuditConditionOutOfServiceEventType",
                    ),
                    crate::types::LocalizedText::new(
                        "",
                        "AuditConditionOutOfServiceEventType",
                    ),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                false,
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2790u32), type_id : crate
            ::types::NodeId::new(0u16, 45u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_type_1606(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 2787u32),
                    crate::types::NodeClass::ObjectType,
                    crate::types::QualifiedName::new(0u16, "RefreshStartEventType"),
                    crate::types::LocalizedText::new("", "RefreshStartEventType"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                true,
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2130u32), type_id : crate
            ::types::NodeId::new(0u16, 45u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_type_1607(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 2788u32),
                    crate::types::NodeClass::ObjectType,
                    crate::types::QualifiedName::new(0u16, "RefreshEndEventType"),
                    crate::types::LocalizedText::new("", "RefreshEndEventType"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                true,
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2130u32), type_id : crate
            ::types::NodeId::new(0u16, 45u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_type_1608(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 2789u32),
                    crate::types::NodeClass::ObjectType,
                    crate::types::QualifiedName::new(0u16, "RefreshRequiredEventType"),
                    crate::types::LocalizedText::new("", "RefreshRequiredEventType"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                true,
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2130u32), type_id : crate
            ::types::NodeId::new(0u16, 45u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_type_1614(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17279u32),
                    crate::types::NodeClass::ObjectType,
                    crate::types::QualifiedName::new(0u16, "AlarmMetricsType"),
                    crate::types::LocalizedText::new("", "AlarmMetricsType"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                false,
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17280u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17991u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17281u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17282u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17284u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17286u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17283u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17288u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 18666u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 58u32), type_id : crate ::types::NodeId::new(0u16,
            45u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_type_1629(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 2391u32),
                    crate::types::NodeClass::ObjectType,
                    crate::types::QualifiedName::new(0u16, "ProgramStateMachineType"),
                    crate::types::LocalizedText::new("", "ProgramStateMachineType"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                false,
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 3830u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 3835u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2392u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2393u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2394u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2395u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2396u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2397u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2398u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2399u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 3850u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2406u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2400u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2402u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2404u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2408u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2410u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2412u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2414u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2416u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2418u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2420u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2422u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2424u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2426u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2427u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2428u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2429u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2430u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2771u32), type_id : crate
            ::types::NodeId::new(0u16, 45u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_type_1689(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 2378u32),
                    crate::types::NodeClass::ObjectType,
                    crate::types::QualifiedName::new(0u16, "ProgramTransitionEventType"),
                    crate::types::LocalizedText::new("", "ProgramTransitionEventType"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                true,
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2379u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2311u32), type_id : crate
            ::types::NodeId::new(0u16, 45u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_type_1691(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 11856u32),
                    crate::types::NodeClass::ObjectType,
                    crate::types::QualifiedName::new(
                        0u16,
                        "AuditProgramTransitionEventType",
                    ),
                    crate::types::LocalizedText::new(
                        "",
                        "AuditProgramTransitionEventType",
                    ),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                true,
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 11875u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2315u32), type_id : crate
            ::types::NodeId::new(0u16, 45u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_type_1693(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 3806u32),
                    crate::types::NodeClass::ObjectType,
                    crate::types::QualifiedName::new(
                        0u16,
                        "ProgramTransitionAuditEventType",
                    ),
                    crate::types::LocalizedText::new(
                        "",
                        "ProgramTransitionAuditEventType",
                    ),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                false,
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 3825u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2315u32), type_id : crate
            ::types::NodeId::new(0u16, 45u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_type_1721(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 2318u32),
                    crate::types::NodeClass::ObjectType,
                    crate::types::QualifiedName::new(
                        0u16,
                        "HistoricalDataConfigurationType",
                    ),
                    crate::types::LocalizedText::new(
                        "",
                        "HistoricalDataConfigurationType",
                    ),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                false,
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 3059u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 11876u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2323u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2324u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2325u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2326u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2327u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2328u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 11499u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 11500u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19092u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 58u32), type_id : crate ::types::NodeId::new(0u16,
            45u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_type_1745(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 2330u32),
                    crate::types::NodeClass::ObjectType,
                    crate::types::QualifiedName::new(
                        0u16,
                        "HistoryServerCapabilitiesType",
                    ),
                    crate::types::LocalizedText::new(
                        "",
                        "HistoryServerCapabilitiesType",
                    ),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                false,
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2331u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2332u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 11268u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 11269u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2334u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2335u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2336u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2337u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2338u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 11278u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 11279u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 11280u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 11501u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 11270u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 11172u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19094u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 58u32), type_id : crate ::types::NodeId::new(0u16,
            45u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_type_1762(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 2999u32),
                    crate::types::NodeClass::ObjectType,
                    crate::types::QualifiedName::new(
                        0u16,
                        "AuditHistoryEventUpdateEventType",
                    ),
                    crate::types::LocalizedText::new(
                        "",
                        "AuditHistoryEventUpdateEventType",
                    ),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                true,
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 3025u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 3028u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 3003u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 3029u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 3030u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2104u32), type_id : crate
            ::types::NodeId::new(0u16, 45u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_type_1768(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 3006u32),
                    crate::types::NodeClass::ObjectType,
                    crate::types::QualifiedName::new(
                        0u16,
                        "AuditHistoryValueUpdateEventType",
                    ),
                    crate::types::LocalizedText::new(
                        "",
                        "AuditHistoryValueUpdateEventType",
                    ),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                true,
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 3026u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 3031u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 3032u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 3033u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2104u32), type_id : crate
            ::types::NodeId::new(0u16, 45u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_type_1773(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 19095u32),
                    crate::types::NodeClass::ObjectType,
                    crate::types::QualifiedName::new(
                        0u16,
                        "AuditHistoryAnnotationUpdateEventType",
                    ),
                    crate::types::LocalizedText::new(
                        "",
                        "AuditHistoryAnnotationUpdateEventType",
                    ),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                true,
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19293u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19294u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19295u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2104u32), type_id : crate
            ::types::NodeId::new(0u16, 45u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_type_1777(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 3012u32),
                    crate::types::NodeClass::ObjectType,
                    crate::types::QualifiedName::new(
                        0u16,
                        "AuditHistoryDeleteEventType",
                    ),
                    crate::types::LocalizedText::new("", "AuditHistoryDeleteEventType"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                true,
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 3027u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2104u32), type_id : crate
            ::types::NodeId::new(0u16, 45u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_type_1779(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 3014u32),
                    crate::types::NodeClass::ObjectType,
                    crate::types::QualifiedName::new(
                        0u16,
                        "AuditHistoryRawModifyDeleteEventType",
                    ),
                    crate::types::LocalizedText::new(
                        "",
                        "AuditHistoryRawModifyDeleteEventType",
                    ),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                true,
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 3015u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 3016u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 3017u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 3034u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 3012u32), type_id : crate
            ::types::NodeId::new(0u16, 45u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_type_1784(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 3019u32),
                    crate::types::NodeClass::ObjectType,
                    crate::types::QualifiedName::new(
                        0u16,
                        "AuditHistoryAtTimeDeleteEventType",
                    ),
                    crate::types::LocalizedText::new(
                        "",
                        "AuditHistoryAtTimeDeleteEventType",
                    ),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                true,
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 3020u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 3021u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 3012u32), type_id : crate
            ::types::NodeId::new(0u16, 45u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_type_1787(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 3022u32),
                    crate::types::NodeClass::ObjectType,
                    crate::types::QualifiedName::new(
                        0u16,
                        "AuditHistoryEventDeleteEventType",
                    ),
                    crate::types::LocalizedText::new(
                        "",
                        "AuditHistoryEventDeleteEventType",
                    ),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                true,
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 3023u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 3024u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 3012u32), type_id : crate
            ::types::NodeId::new(0u16, 45u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_type_1790(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 12522u32),
                    crate::types::NodeClass::ObjectType,
                    crate::types::QualifiedName::new(0u16, "TrustListType"),
                    crate::types::LocalizedText::new("", "TrustListType"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                false,
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12542u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19296u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12543u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12546u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12548u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12550u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 11575u32), type_id : crate
            ::types::NodeId::new(0u16, 45u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_type_1806(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 19297u32),
                    crate::types::NodeClass::ObjectType,
                    crate::types::QualifiedName::new(
                        0u16,
                        "TrustListOutOfDateAlarmType",
                    ),
                    crate::types::LocalizedText::new("", "TrustListOutOfDateAlarmType"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                false,
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19446u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19447u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19448u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 11753u32), type_id : crate
            ::types::NodeId::new(0u16, 45u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_type_1810(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 12555u32),
                    crate::types::NodeClass::ObjectType,
                    crate::types::QualifiedName::new(0u16, "CertificateGroupType"),
                    crate::types::LocalizedText::new("", "CertificateGroupType"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                false,
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 13599u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 13631u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19450u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 20143u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 23526u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 58u32), type_id : crate ::types::NodeId::new(0u16,
            45u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_type_1916(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 13813u32),
                    crate::types::NodeClass::ObjectType,
                    crate::types::QualifiedName::new(0u16, "CertificateGroupFolderType"),
                    crate::types::LocalizedText::new("", "CertificateGroupFolderType"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                false,
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 13814u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 13848u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 13882u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 13916u32), type_id : crate
            ::types::NodeId::new(0u16, 35u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 61u32), type_id : crate ::types::NodeId::new(0u16,
            45u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_type_194(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 2013u32),
                    crate::types::NodeClass::ObjectType,
                    crate::types::QualifiedName::new(0u16, "ServerCapabilitiesType"),
                    crate::types::LocalizedText::new("", "ServerCapabilitiesType"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                false,
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2014u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2016u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2017u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2732u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2733u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2734u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 3049u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 11549u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 11550u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12910u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 11551u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2019u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2754u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 11562u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 16295u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 58u32), type_id : crate ::types::NodeId::new(0u16,
            45u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_type_2021(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 12556u32),
                    crate::types::NodeClass::ObjectType,
                    crate::types::QualifiedName::new(0u16, "CertificateType"),
                    crate::types::LocalizedText::new("", "CertificateType"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                true,
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 58u32), type_id : crate ::types::NodeId::new(0u16,
            45u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_type_2022(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 12557u32),
                    crate::types::NodeClass::ObjectType,
                    crate::types::QualifiedName::new(0u16, "ApplicationCertificateType"),
                    crate::types::LocalizedText::new("", "ApplicationCertificateType"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                true,
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12556u32), type_id : crate
            ::types::NodeId::new(0u16, 45u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_type_2023(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 12558u32),
                    crate::types::NodeClass::ObjectType,
                    crate::types::QualifiedName::new(0u16, "HttpsCertificateType"),
                    crate::types::LocalizedText::new("", "HttpsCertificateType"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                false,
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12556u32), type_id : crate
            ::types::NodeId::new(0u16, 45u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_type_2024(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 15181u32),
                    crate::types::NodeClass::ObjectType,
                    crate::types::QualifiedName::new(
                        0u16,
                        "UserCredentialCertificateType",
                    ),
                    crate::types::LocalizedText::new(
                        "",
                        "UserCredentialCertificateType",
                    ),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                false,
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12556u32), type_id : crate
            ::types::NodeId::new(0u16, 45u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_type_2025(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 12559u32),
                    crate::types::NodeClass::ObjectType,
                    crate::types::QualifiedName::new(
                        0u16,
                        "RsaMinApplicationCertificateType",
                    ),
                    crate::types::LocalizedText::new(
                        "",
                        "RsaMinApplicationCertificateType",
                    ),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                false,
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12557u32), type_id : crate
            ::types::NodeId::new(0u16, 45u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_type_2026(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 12560u32),
                    crate::types::NodeClass::ObjectType,
                    crate::types::QualifiedName::new(
                        0u16,
                        "RsaSha256ApplicationCertificateType",
                    ),
                    crate::types::LocalizedText::new(
                        "",
                        "RsaSha256ApplicationCertificateType",
                    ),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                false,
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12557u32), type_id : crate
            ::types::NodeId::new(0u16, 45u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_type_2027(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 23537u32),
                    crate::types::NodeClass::ObjectType,
                    crate::types::QualifiedName::new(
                        0u16,
                        "EccApplicationCertificateType",
                    ),
                    crate::types::LocalizedText::new(
                        "",
                        "EccApplicationCertificateType",
                    ),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                false,
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12557u32), type_id : crate
            ::types::NodeId::new(0u16, 45u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_type_2028(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 23538u32),
                    crate::types::NodeClass::ObjectType,
                    crate::types::QualifiedName::new(
                        0u16,
                        "EccNistP256ApplicationCertificateType",
                    ),
                    crate::types::LocalizedText::new(
                        "",
                        "EccNistP256ApplicationCertificateType",
                    ),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                false,
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 23537u32), type_id : crate
            ::types::NodeId::new(0u16, 45u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_type_2029(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 23539u32),
                    crate::types::NodeClass::ObjectType,
                    crate::types::QualifiedName::new(
                        0u16,
                        "EccNistP384ApplicationCertificateType",
                    ),
                    crate::types::LocalizedText::new(
                        "",
                        "EccNistP384ApplicationCertificateType",
                    ),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                false,
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 23537u32), type_id : crate
            ::types::NodeId::new(0u16, 45u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_type_2030(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 23540u32),
                    crate::types::NodeClass::ObjectType,
                    crate::types::QualifiedName::new(
                        0u16,
                        "EccBrainpoolP256r1ApplicationCertificateType",
                    ),
                    crate::types::LocalizedText::new(
                        "",
                        "EccBrainpoolP256r1ApplicationCertificateType",
                    ),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                false,
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 23537u32), type_id : crate
            ::types::NodeId::new(0u16, 45u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_type_2031(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 23541u32),
                    crate::types::NodeClass::ObjectType,
                    crate::types::QualifiedName::new(
                        0u16,
                        "EccBrainpoolP384r1ApplicationCertificateType",
                    ),
                    crate::types::LocalizedText::new(
                        "",
                        "EccBrainpoolP384r1ApplicationCertificateType",
                    ),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                false,
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 23537u32), type_id : crate
            ::types::NodeId::new(0u16, 45u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_type_2032(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 23542u32),
                    crate::types::NodeClass::ObjectType,
                    crate::types::QualifiedName::new(
                        0u16,
                        "EccCurve25519ApplicationCertificateType",
                    ),
                    crate::types::LocalizedText::new(
                        "",
                        "EccCurve25519ApplicationCertificateType",
                    ),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                false,
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 23537u32), type_id : crate
            ::types::NodeId::new(0u16, 45u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_type_2033(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 23543u32),
                    crate::types::NodeClass::ObjectType,
                    crate::types::QualifiedName::new(
                        0u16,
                        "EccCurve448ApplicationCertificateType",
                    ),
                    crate::types::LocalizedText::new(
                        "",
                        "EccCurve448ApplicationCertificateType",
                    ),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                false,
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 23537u32), type_id : crate
            ::types::NodeId::new(0u16, 45u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_type_2034(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 12561u32),
                    crate::types::NodeClass::ObjectType,
                    crate::types::QualifiedName::new(
                        0u16,
                        "TrustListUpdatedAuditEventType",
                    ),
                    crate::types::LocalizedText::new(
                        "",
                        "TrustListUpdatedAuditEventType",
                    ),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                true,
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2127u32), type_id : crate
            ::types::NodeId::new(0u16, 45u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_type_2035(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 12581u32),
                    crate::types::NodeClass::ObjectType,
                    crate::types::QualifiedName::new(0u16, "ServerConfigurationType"),
                    crate::types::LocalizedText::new("", "ServerConfigurationType"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                false,
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 13950u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12708u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12583u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12584u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12585u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12616u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12734u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12731u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12775u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 58u32), type_id : crate ::types::NodeId::new(0u16,
            45u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_type_2076(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 12620u32),
                    crate::types::NodeClass::ObjectType,
                    crate::types::QualifiedName::new(
                        0u16,
                        "CertificateUpdatedAuditEventType",
                    ),
                    crate::types::LocalizedText::new(
                        "",
                        "CertificateUpdatedAuditEventType",
                    ),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                true,
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 13735u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 13736u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2127u32), type_id : crate
            ::types::NodeId::new(0u16, 45u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_type_215(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 2020u32),
                    crate::types::NodeClass::ObjectType,
                    crate::types::QualifiedName::new(0u16, "ServerDiagnosticsType"),
                    crate::types::LocalizedText::new("", "ServerDiagnosticsType"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                false,
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2021u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2022u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2023u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2744u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2025u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 58u32), type_id : crate ::types::NodeId::new(0u16,
            45u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_type_2193(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17496u32),
                    crate::types::NodeClass::ObjectType,
                    crate::types::QualifiedName::new(
                        0u16,
                        "KeyCredentialConfigurationFolderType",
                    ),
                    crate::types::LocalizedText::new(
                        "",
                        "KeyCredentialConfigurationFolderType",
                    ),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                false,
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17511u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17522u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 61u32), type_id : crate ::types::NodeId::new(0u16,
            45u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_type_2201(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 18001u32),
                    crate::types::NodeClass::ObjectType,
                    crate::types::QualifiedName::new(
                        0u16,
                        "KeyCredentialConfigurationType",
                    ),
                    crate::types::LocalizedText::new(
                        "",
                        "KeyCredentialConfigurationType",
                    ),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                false,
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 18069u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 18165u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 18004u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 18005u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17534u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 18006u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 18008u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 58u32), type_id : crate ::types::NodeId::new(0u16,
            45u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_type_2212(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 18011u32),
                    crate::types::NodeClass::ObjectType,
                    crate::types::QualifiedName::new(
                        0u16,
                        "KeyCredentialAuditEventType",
                    ),
                    crate::types::LocalizedText::new("", "KeyCredentialAuditEventType"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                true,
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 18028u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2127u32), type_id : crate
            ::types::NodeId::new(0u16, 45u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_type_2214(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 18029u32),
                    crate::types::NodeClass::ObjectType,
                    crate::types::QualifiedName::new(
                        0u16,
                        "KeyCredentialUpdatedAuditEventType",
                    ),
                    crate::types::LocalizedText::new(
                        "",
                        "KeyCredentialUpdatedAuditEventType",
                    ),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                false,
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 18011u32), type_id : crate
            ::types::NodeId::new(0u16, 45u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_type_2215(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 18047u32),
                    crate::types::NodeClass::ObjectType,
                    crate::types::QualifiedName::new(
                        0u16,
                        "KeyCredentialDeletedAuditEventType",
                    ),
                    crate::types::LocalizedText::new(
                        "",
                        "KeyCredentialDeletedAuditEventType",
                    ),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                false,
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 18011u32), type_id : crate
            ::types::NodeId::new(0u16, 45u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_type_2216(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 23556u32),
                    crate::types::NodeClass::ObjectType,
                    crate::types::QualifiedName::new(
                        0u16,
                        "AuthorizationServicesConfigurationFolderType",
                    ),
                    crate::types::LocalizedText::new(
                        "",
                        "AuthorizationServicesConfigurationFolderType",
                    ),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                false,
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 23557u32), type_id : crate
            ::types::NodeId::new(0u16, 35u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 61u32), type_id : crate ::types::NodeId::new(0u16,
            45u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_type_2222(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17852u32),
                    crate::types::NodeClass::ObjectType,
                    crate::types::QualifiedName::new(
                        0u16,
                        "AuthorizationServiceConfigurationType",
                    ),
                    crate::types::LocalizedText::new(
                        "",
                        "AuthorizationServiceConfigurationType",
                    ),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                false,
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 18072u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17860u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 18073u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 58u32), type_id : crate ::types::NodeId::new(0u16,
            45u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_type_2226(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 11187u32),
                    crate::types::NodeClass::ObjectType,
                    crate::types::QualifiedName::new(0u16, "AggregateConfigurationType"),
                    crate::types::LocalizedText::new("", "AggregateConfigurationType"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                false,
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 11188u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 11189u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 11190u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 11191u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 58u32), type_id : crate ::types::NodeId::new(0u16,
            45u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_type_2336(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 15906u32),
                    crate::types::NodeClass::ObjectType,
                    crate::types::QualifiedName::new(0u16, "PubSubKeyServiceType"),
                    crate::types::LocalizedText::new("", "PubSubKeyServiceType"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                false,
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15907u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15910u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15913u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 58u32), type_id : crate ::types::NodeId::new(0u16,
            45u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_type_2349(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 15452u32),
                    crate::types::NodeClass::ObjectType,
                    crate::types::QualifiedName::new(0u16, "SecurityGroupFolderType"),
                    crate::types::LocalizedText::new("", "SecurityGroupFolderType"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                false,
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15453u32), type_id : crate
            ::types::NodeId::new(0u16, 35u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15459u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15461u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15464u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 61u32), type_id : crate ::types::NodeId::new(0u16,
            45u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_type_235(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 2026u32),
                    crate::types::NodeClass::ObjectType,
                    crate::types::QualifiedName::new(
                        0u16,
                        "SessionsDiagnosticsSummaryType",
                    ),
                    crate::types::LocalizedText::new(
                        "",
                        "SessionsDiagnosticsSummaryType",
                    ),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                false,
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2027u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 2028u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12097u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 58u32), type_id : crate ::types::NodeId::new(0u16,
            45u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_type_2367(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 15471u32),
                    crate::types::NodeClass::ObjectType,
                    crate::types::QualifiedName::new(0u16, "SecurityGroupType"),
                    crate::types::LocalizedText::new("", "SecurityGroupType"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                false,
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15472u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15046u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15047u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15048u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15056u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 58u32), type_id : crate ::types::NodeId::new(0u16,
            45u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_type_2373(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 14416u32),
                    crate::types::NodeClass::ObjectType,
                    crate::types::QualifiedName::new(0u16, "PublishSubscribeType"),
                    crate::types::LocalizedText::new("", "PublishSubscribeType"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                false,
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 14417u32), type_id : crate
            ::types::NodeId::new(0u16, 14476u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17296u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 16598u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 14432u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 14434u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15844u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 18715u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17479u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15906u32), type_id : crate
            ::types::NodeId::new(0u16, 45u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_type_2510(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 14509u32),
                    crate::types::NodeClass::ObjectType,
                    crate::types::QualifiedName::new(0u16, "PublishedDataSetType"),
                    crate::types::LocalizedText::new("", "PublishedDataSetType"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                false,
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15222u32), type_id : crate
            ::types::NodeId::new(0u16, 14936u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 14519u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15229u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 16759u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15481u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 58u32), type_id : crate ::types::NodeId::new(0u16,
            45u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_type_2526(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 15489u32),
                    crate::types::NodeClass::ObjectType,
                    crate::types::QualifiedName::new(0u16, "ExtensionFieldsType"),
                    crate::types::LocalizedText::new("", "ExtensionFieldsType"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                false,
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15490u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15491u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15494u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 58u32), type_id : crate ::types::NodeId::new(0u16,
            45u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_type_2534(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 14534u32),
                    crate::types::NodeClass::ObjectType,
                    crate::types::QualifiedName::new(0u16, "PublishedDataItemsType"),
                    crate::types::LocalizedText::new("", "PublishedDataItemsType"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                false,
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 14548u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 14555u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 14558u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 14509u32), type_id : crate
            ::types::NodeId::new(0u16, 45u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_type_2542(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 14572u32),
                    crate::types::NodeClass::ObjectType,
                    crate::types::QualifiedName::new(0u16, "PublishedEventsType"),
                    crate::types::LocalizedText::new("", "PublishedEventsType"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                false,
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 14586u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 14587u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 14588u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15052u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 14509u32), type_id : crate
            ::types::NodeId::new(0u16, 45u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_type_2549(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 14477u32),
                    crate::types::NodeClass::ObjectType,
                    crate::types::QualifiedName::new(0u16, "DataSetFolderType"),
                    crate::types::LocalizedText::new("", "DataSetFolderType"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                false,
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 14478u32), type_id : crate
            ::types::NodeId::new(0u16, 35u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 14487u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 14493u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 14496u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 16935u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 16960u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 14499u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 16994u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 16997u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 61u32), type_id : crate ::types::NodeId::new(0u16,
            45u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_type_2592(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 14209u32),
                    crate::types::NodeClass::ObjectType,
                    crate::types::QualifiedName::new(0u16, "PubSubConnectionType"),
                    crate::types::LocalizedText::new("", "PubSubConnectionType"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                false,
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 14595u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17306u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17485u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 14221u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17203u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17310u32), type_id : crate
            ::types::NodeId::new(0u16, 18804u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17325u32), type_id : crate
            ::types::NodeId::new(0u16, 18805u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 14600u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19241u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17427u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17465u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 14225u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 58u32), type_id : crate ::types::NodeId::new(0u16,
            45u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_type_2669(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17721u32),
                    crate::types::NodeClass::ObjectType,
                    crate::types::QualifiedName::new(0u16, "ConnectionTransportType"),
                    crate::types::LocalizedText::new("", "ConnectionTransportType"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                true,
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 58u32), type_id : crate ::types::NodeId::new(0u16,
            45u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_type_2670(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 14232u32),
                    crate::types::NodeClass::ObjectType,
                    crate::types::QualifiedName::new(0u16, "PubSubGroupType"),
                    crate::types::LocalizedText::new("", "PubSubGroupType"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                true,
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15926u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15927u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15928u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17724u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17488u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15265u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 58u32), type_id : crate ::types::NodeId::new(0u16,
            45u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_type_2678(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17725u32),
                    crate::types::NodeClass::ObjectType,
                    crate::types::QualifiedName::new(0u16, "WriterGroupType"),
                    crate::types::LocalizedText::new("", "WriterGroupType"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                false,
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17736u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17737u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17738u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17739u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17740u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17559u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17741u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17742u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17743u32), type_id : crate
            ::types::NodeId::new(0u16, 15296u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17812u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17969u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17992u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 14232u32), type_id : crate
            ::types::NodeId::new(0u16, 45u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_type_2754(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17997u32),
                    crate::types::NodeClass::ObjectType,
                    crate::types::QualifiedName::new(0u16, "WriterGroupTransportType"),
                    crate::types::LocalizedText::new("", "WriterGroupTransportType"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                true,
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 58u32), type_id : crate ::types::NodeId::new(0u16,
            45u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_type_2755(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17998u32),
                    crate::types::NodeClass::ObjectType,
                    crate::types::QualifiedName::new(0u16, "WriterGroupMessageType"),
                    crate::types::LocalizedText::new("", "WriterGroupMessageType"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                true,
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 58u32), type_id : crate ::types::NodeId::new(0u16,
            45u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_type_2756(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 17999u32),
                    crate::types::NodeClass::ObjectType,
                    crate::types::QualifiedName::new(0u16, "ReaderGroupType"),
                    crate::types::LocalizedText::new("", "ReaderGroupType"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                false,
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 18076u32), type_id : crate
            ::types::NodeId::new(0u16, 15297u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21015u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21080u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21081u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21082u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21085u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 14232u32), type_id : crate
            ::types::NodeId::new(0u16, 45u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_type_2825(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 21090u32),
                    crate::types::NodeClass::ObjectType,
                    crate::types::QualifiedName::new(0u16, "ReaderGroupTransportType"),
                    crate::types::LocalizedText::new("", "ReaderGroupTransportType"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                true,
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 58u32), type_id : crate ::types::NodeId::new(0u16,
            45u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_type_2826(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 21091u32),
                    crate::types::NodeClass::ObjectType,
                    crate::types::QualifiedName::new(0u16, "ReaderGroupMessageType"),
                    crate::types::LocalizedText::new("", "ReaderGroupMessageType"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                true,
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 58u32), type_id : crate ::types::NodeId::new(0u16,
            45u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_type_2827(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 15298u32),
                    crate::types::NodeClass::ObjectType,
                    crate::types::QualifiedName::new(0u16, "DataSetWriterType"),
                    crate::types::LocalizedText::new("", "DataSetWriterType"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                false,
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21092u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21093u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21094u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17493u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15303u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21095u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15299u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 19550u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 58u32), type_id : crate ::types::NodeId::new(0u16,
            45u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_type_2878(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 15305u32),
                    crate::types::NodeClass::ObjectType,
                    crate::types::QualifiedName::new(0u16, "DataSetWriterTransportType"),
                    crate::types::LocalizedText::new("", "DataSetWriterTransportType"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                true,
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 58u32), type_id : crate ::types::NodeId::new(0u16,
            45u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_object_type_2879(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::ObjectType::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 21096u32),
                    crate::types::NodeClass::ObjectType,
                    crate::types::QualifiedName::new(0u16, "DataSetWriterMessageType"),
                    crate::types::LocalizedText::new("", "DataSetWriterMessageType"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                true,
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 58u32), type_id : crate ::types::NodeId::new(0u16,
            45u32), is_forward : false, }
        ],
    }
}
