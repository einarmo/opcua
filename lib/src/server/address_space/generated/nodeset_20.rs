// OPCUA for Rust
// SPDX-License-Identifier: MPL-2.0
// Copyright (C) 2017-2024 Adam Lock, Einar Omang
//
// This file was autogenerated from tools/schema/schemas/1.0.4/Opc.Ua.NodeSet2.xml by opcua-codegen
//
// DO NOT EDIT THIS FILE
pub(super) fn imported_nodes<'a>(
    ns_map: &'a crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> Box<dyn Iterator<Item = crate::server::address_space::ImportedItem> + 'a> {
    Box::new(
        [
            &make_variable_1645 as &dyn Fn(_) -> crate::server::address_space::ImportedItem,
            &make_variable_1646,
            &make_variable_1647,
            &make_variable_1648,
            &make_variable_1649,
            &make_variable_165,
            &make_variable_1650,
            &make_variable_1651,
            &make_variable_1652,
            &make_variable_1653,
            &make_variable_1654,
            &make_variable_1655,
            &make_variable_1656,
            &make_variable_1659,
            &make_variable_166,
            &make_variable_1661,
            &make_variable_1663,
            &make_variable_1665,
            &make_variable_1667,
            &make_variable_1669,
            &make_variable_167,
            &make_variable_1671,
            &make_variable_1673,
            &make_variable_1675,
            &make_variable_1677,
            &make_variable_1679,
            &make_variable_168,
            &make_variable_1681,
            &make_variable_1683,
            &make_variable_169,
            &make_variable_1690,
            &make_variable_1692,
            &make_variable_1694,
            &make_variable_1695,
            &make_variable_1697,
            &make_variable_1698,
            &make_variable_1699,
            &make_variable_170,
            &make_variable_1700,
            &make_variable_1701,
            &make_variable_1702,
            &make_variable_1703,
            &make_variable_1704,
            &make_variable_1705,
            &make_variable_1706,
            &make_variable_1708,
            &make_variable_1709,
            &make_variable_171,
            &make_variable_1710,
            &make_variable_1711,
            &make_variable_1712,
            &make_variable_1713,
            &make_variable_1714,
            &make_variable_1715,
            &make_variable_1716,
            &make_variable_1717,
            &make_variable_1718,
            &make_variable_1719,
            &make_variable_172,
            &make_variable_1720,
            &make_variable_1723,
            &make_variable_1724,
            &make_variable_1725,
            &make_variable_1726,
            &make_variable_1728,
            &make_variable_1729,
            &make_variable_173,
            &make_variable_1730,
            &make_variable_1731,
            &make_variable_1732,
            &make_variable_1733,
            &make_variable_1734,
            &make_variable_1735,
            &make_variable_1736,
            &make_variable_1739,
            &make_variable_174,
            &make_variable_1740,
            &make_variable_1741,
            &make_variable_1742,
            &make_variable_1743,
            &make_variable_1744,
            &make_variable_1746,
            &make_variable_1747,
            &make_variable_1748,
            &make_variable_1749,
            &make_variable_175,
            &make_variable_1750,
            &make_variable_1751,
            &make_variable_1752,
            &make_variable_1753,
            &make_variable_1754,
            &make_variable_1755,
            &make_variable_1756,
            &make_variable_1757,
            &make_variable_1758,
            &make_variable_1759,
            &make_variable_1761,
            &make_variable_1763,
            &make_variable_1764,
            &make_variable_1765,
        ]
        .into_iter()
        .map(|f| f(ns_map)),
    )
}
#[allow(unused)]
fn make_variable_1645(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 3840u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "CreateSessionId"),
                crate::types::LocalizedText::new("", "CreateSessionId"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 17u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 63u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2399u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1646(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 3841u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "CreateClientName"),
                crate::types::LocalizedText::new("", "CreateClientName"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 63u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2399u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1647(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 3842u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "InvocationCreationTime"),
                crate::types::LocalizedText::new("", "InvocationCreationTime"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 294u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 63u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2399u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1648(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 3843u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "LastTransitionTime"),
                crate::types::LocalizedText::new("", "LastTransitionTime"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 294u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2399u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1649(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 3844u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "LastMethodCall"),
                crate::types::LocalizedText::new("", "LastMethodCall"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 63u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2399u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_165(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 3098u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "CumulatedSessionCount"),
                crate::types::LocalizedText::new("", "CumulatedSessionCount"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 7u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 63u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 3095u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1650(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 3845u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "LastMethodSessionId"),
                crate::types::LocalizedText::new("", "LastMethodSessionId"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 17u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 63u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2399u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1651(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 3846u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "LastMethodInputArguments"),
                crate::types::LocalizedText::new("", "LastMethodInputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 63u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2399u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1652(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 3847u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "LastMethodOutputArguments"),
                crate::types::LocalizedText::new("", "LastMethodOutputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 63u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2399u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1653(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15038u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "LastMethodInputValues"),
                crate::types::LocalizedText::new("", "LastMethodInputValues"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 24u32),
            false,
            1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 63u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2399u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1654(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15040u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "LastMethodOutputValues"),
                crate::types::LocalizedText::new("", "LastMethodOutputValues"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 24u32),
            false,
            1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 63u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2399u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1655(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 3848u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "LastMethodCallTime"),
                crate::types::LocalizedText::new("", "LastMethodCallTime"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 294u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 63u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2399u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1656(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 3849u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "LastMethodReturnStatus"),
                crate::types::LocalizedText::new("", "LastMethodReturnStatus"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 19u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 63u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2399u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1659(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2407u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "StateNumber"),
                crate::types::LocalizedText::new("", "StateNumber"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 7u32),
            false,
            -1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(11u32)),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2406u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_166(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 3099u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "SecurityRejectedSessionCount"),
                crate::types::LocalizedText::new("", "SecurityRejectedSessionCount"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 7u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 63u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 3095u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1661(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2401u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "StateNumber"),
                crate::types::LocalizedText::new("", "StateNumber"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 7u32),
            false,
            -1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(12u32)),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2400u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1663(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2403u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "StateNumber"),
                crate::types::LocalizedText::new("", "StateNumber"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 7u32),
            false,
            -1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(13u32)),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2402u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1665(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2405u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "StateNumber"),
                crate::types::LocalizedText::new("", "StateNumber"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 7u32),
            false,
            -1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(14u32)),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2404u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1667(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2409u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "TransitionNumber"),
                crate::types::LocalizedText::new("", "TransitionNumber"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 7u32),
            false,
            -1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(1u32)),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2408u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1669(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2411u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "TransitionNumber"),
                crate::types::LocalizedText::new("", "TransitionNumber"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 7u32),
            false,
            -1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(2u32)),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2410u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_167(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 3100u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "RejectedSessionCount"),
                crate::types::LocalizedText::new("", "RejectedSessionCount"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 7u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 63u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 3095u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1671(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2413u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "TransitionNumber"),
                crate::types::LocalizedText::new("", "TransitionNumber"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 7u32),
            false,
            -1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(3u32)),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2412u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1673(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2415u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "TransitionNumber"),
                crate::types::LocalizedText::new("", "TransitionNumber"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 7u32),
            false,
            -1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(4u32)),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2414u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1675(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2417u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "TransitionNumber"),
                crate::types::LocalizedText::new("", "TransitionNumber"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 7u32),
            false,
            -1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(5u32)),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2416u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1677(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2419u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "TransitionNumber"),
                crate::types::LocalizedText::new("", "TransitionNumber"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 7u32),
            false,
            -1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(6u32)),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2418u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1679(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2421u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "TransitionNumber"),
                crate::types::LocalizedText::new("", "TransitionNumber"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 7u32),
            false,
            -1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(7u32)),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2420u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_168(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 3101u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "SessionTimeoutCount"),
                crate::types::LocalizedText::new("", "SessionTimeoutCount"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 7u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 63u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 3095u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1681(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2423u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "TransitionNumber"),
                crate::types::LocalizedText::new("", "TransitionNumber"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 7u32),
            false,
            -1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(8u32)),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2422u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1683(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2425u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "TransitionNumber"),
                crate::types::LocalizedText::new("", "TransitionNumber"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 7u32),
            false,
            -1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(9u32)),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2424u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_169(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 3102u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "SessionAbortCount"),
                crate::types::LocalizedText::new("", "SessionAbortCount"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 7u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 63u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 3095u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1690(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2379u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "IntermediateResult"),
                crate::types::LocalizedText::new("", "IntermediateResult"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 24u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 63u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2378u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1692(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 11875u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "TransitionNumber"),
                crate::types::LocalizedText::new("", "TransitionNumber"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 7u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11856u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1694(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 3825u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "Transition"),
                crate::types::LocalizedText::new("", "Transition"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 21u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 3826u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2767u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 3806u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1695(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 3826u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "Id"),
                crate::types::LocalizedText::new("", "Id"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 17u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 3825u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1697(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2381u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "CreateSessionId"),
                crate::types::LocalizedText::new("", "CreateSessionId"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 17u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2380u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1698(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2382u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "CreateClientName"),
                crate::types::LocalizedText::new("", "CreateClientName"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2380u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1699(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2383u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "InvocationCreationTime"),
                crate::types::LocalizedText::new("", "InvocationCreationTime"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 294u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2380u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_170(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 3104u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "PublishingIntervalCount"),
                crate::types::LocalizedText::new("", "PublishingIntervalCount"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 7u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 63u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 3095u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1700(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2384u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "LastTransitionTime"),
                crate::types::LocalizedText::new("", "LastTransitionTime"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 294u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2380u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1701(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2385u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "LastMethodCall"),
                crate::types::LocalizedText::new("", "LastMethodCall"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2380u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1702(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2386u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "LastMethodSessionId"),
                crate::types::LocalizedText::new("", "LastMethodSessionId"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 17u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2380u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1703(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2387u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "LastMethodInputArguments"),
                crate::types::LocalizedText::new("", "LastMethodInputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 24u32),
            false,
            1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2380u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1704(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2388u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "LastMethodOutputArguments"),
                crate::types::LocalizedText::new("", "LastMethodOutputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 24u32),
            false,
            1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2380u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1705(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2389u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "LastMethodCallTime"),
                crate::types::LocalizedText::new("", "LastMethodCallTime"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 294u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2380u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1706(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2390u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "LastMethodReturnStatus"),
                crate::types::LocalizedText::new("", "LastMethodReturnStatus"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 299u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2380u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1708(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15384u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "CreateSessionId"),
                crate::types::LocalizedText::new("", "CreateSessionId"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 17u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 63u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15383u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1709(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15385u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "CreateClientName"),
                crate::types::LocalizedText::new("", "CreateClientName"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 63u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15383u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_171(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 3105u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "CurrentSubscriptionCount"),
                crate::types::LocalizedText::new("", "CurrentSubscriptionCount"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 7u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 63u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 3095u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1710(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15386u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "InvocationCreationTime"),
                crate::types::LocalizedText::new("", "InvocationCreationTime"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 294u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 63u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15383u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1711(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15387u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "LastTransitionTime"),
                crate::types::LocalizedText::new("", "LastTransitionTime"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 294u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15383u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1712(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15388u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "LastMethodCall"),
                crate::types::LocalizedText::new("", "LastMethodCall"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 63u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15383u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1713(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15389u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "LastMethodSessionId"),
                crate::types::LocalizedText::new("", "LastMethodSessionId"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 17u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 63u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15383u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1714(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15390u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "LastMethodInputArguments"),
                crate::types::LocalizedText::new("", "LastMethodInputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 63u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15383u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1715(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15391u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "LastMethodOutputArguments"),
                crate::types::LocalizedText::new("", "LastMethodOutputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 63u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15383u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1716(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15392u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "LastMethodInputValues"),
                crate::types::LocalizedText::new("", "LastMethodInputValues"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 24u32),
            false,
            1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 63u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15383u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1717(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15393u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "LastMethodOutputValues"),
                crate::types::LocalizedText::new("", "LastMethodOutputValues"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 24u32),
            false,
            1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 63u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15383u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1718(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15394u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "LastMethodCallTime"),
                crate::types::LocalizedText::new("", "LastMethodCallTime"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 294u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 63u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15383u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1719(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15395u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "LastMethodReturnStatus"),
                crate::types::LocalizedText::new("", "LastMethodReturnStatus"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 19u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 63u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15383u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_172(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 3106u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "CumulatedSubscriptionCount"),
                crate::types::LocalizedText::new("", "CumulatedSubscriptionCount"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 7u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 63u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 3095u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1720(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 11214u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "Annotations"),
                crate::types::LocalizedText::new("", "Annotations"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 891u32),
            false,
            -2i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![crate::server::address_space::ImportedReference {
            target_id: crate::types::NodeId::new(0u16, 68u32),
            type_id: crate::types::NodeId::new(0u16, 40u32),
            is_forward: true,
        }],
    }
}
#[allow(unused)]
fn make_variable_1723(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 11168u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "TreatUncertainAsBad"),
                crate::types::LocalizedText::new("", "TreatUncertainAsBad"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 1u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 3059u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1724(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 11169u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "PercentDataBad"),
                crate::types::LocalizedText::new("", "PercentDataBad"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 3u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 3059u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1725(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 11170u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "PercentDataGood"),
                crate::types::LocalizedText::new("", "PercentDataGood"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 3u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 3059u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1726(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 11171u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "UseSlopedExtrapolation"),
                crate::types::LocalizedText::new("", "UseSlopedExtrapolation"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 1u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 3059u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1728(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2323u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "Stepped"),
                crate::types::LocalizedText::new("", "Stepped"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 1u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2318u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1729(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2324u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "Definition"),
                crate::types::LocalizedText::new("", "Definition"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 80u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2318u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_173(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 3107u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "SecurityRejectedRequestsCount"),
                crate::types::LocalizedText::new("", "SecurityRejectedRequestsCount"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 7u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 63u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 3095u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1730(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2325u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "MaxTimeInterval"),
                crate::types::LocalizedText::new("", "MaxTimeInterval"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 290u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 80u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2318u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1731(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2326u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "MinTimeInterval"),
                crate::types::LocalizedText::new("", "MinTimeInterval"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 290u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 80u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2318u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1732(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2327u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "ExceptionDeviation"),
                crate::types::LocalizedText::new("", "ExceptionDeviation"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 11u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 80u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2318u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1733(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2328u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "ExceptionDeviationFormat"),
                crate::types::LocalizedText::new("", "ExceptionDeviationFormat"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 890u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 80u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2318u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1734(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 11499u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "StartOfArchive"),
                crate::types::LocalizedText::new("", "StartOfArchive"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 294u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 80u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2318u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1735(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 11500u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "StartOfOnlineArchive"),
                crate::types::LocalizedText::new("", "StartOfOnlineArchive"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 294u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 80u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2318u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1736(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 19092u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "ServerTimestampSupported"),
                crate::types::LocalizedText::new("", "ServerTimestampSupported"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 1u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 80u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2318u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1739(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 11204u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "TreatUncertainAsBad"),
                crate::types::LocalizedText::new("", "TreatUncertainAsBad"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 1u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11203u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_174(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 3108u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "RejectedRequestsCount"),
                crate::types::LocalizedText::new("", "RejectedRequestsCount"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 7u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 63u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 3095u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1740(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 11205u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "PercentDataBad"),
                crate::types::LocalizedText::new("", "PercentDataBad"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 3u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11203u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1741(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 11206u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "PercentDataGood"),
                crate::types::LocalizedText::new("", "PercentDataGood"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 3u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11203u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1742(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 11207u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "UseSlopedExtrapolation"),
                crate::types::LocalizedText::new("", "UseSlopedExtrapolation"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 1u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11203u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1743(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 11208u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "Stepped"),
                crate::types::LocalizedText::new("", "Stepped"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 1u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11202u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1744(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 11215u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "HistoricalEventFilter"),
                crate::types::LocalizedText::new("", "HistoricalEventFilter"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 725u32),
            false,
            -2i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![crate::server::address_space::ImportedReference {
            target_id: crate::types::NodeId::new(0u16, 68u32),
            type_id: crate::types::NodeId::new(0u16, 40u32),
            is_forward: true,
        }],
    }
}
#[allow(unused)]
fn make_variable_1746(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2331u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "AccessHistoryDataCapability"),
                crate::types::LocalizedText::new("", "AccessHistoryDataCapability"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 1u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2330u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1747(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2332u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "AccessHistoryEventsCapability"),
                crate::types::LocalizedText::new("", "AccessHistoryEventsCapability"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 1u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2330u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1748(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 11268u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "MaxReturnDataValues"),
                crate::types::LocalizedText::new("", "MaxReturnDataValues"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 7u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2330u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1749(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 11269u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "MaxReturnEventValues"),
                crate::types::LocalizedText::new("", "MaxReturnEventValues"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 7u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2330u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_175(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 3110u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "SubscriptionDiagnosticsArray"),
                crate::types::LocalizedText::new("", "SubscriptionDiagnosticsArray"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 874u32),
            false,
            1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2171u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2010u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1750(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2334u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "InsertDataCapability"),
                crate::types::LocalizedText::new("", "InsertDataCapability"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 1u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2330u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1751(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2335u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "ReplaceDataCapability"),
                crate::types::LocalizedText::new("", "ReplaceDataCapability"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 1u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2330u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1752(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2336u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "UpdateDataCapability"),
                crate::types::LocalizedText::new("", "UpdateDataCapability"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 1u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2330u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1753(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2337u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "DeleteRawCapability"),
                crate::types::LocalizedText::new("", "DeleteRawCapability"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 1u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2330u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1754(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2338u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "DeleteAtTimeCapability"),
                crate::types::LocalizedText::new("", "DeleteAtTimeCapability"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 1u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2330u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1755(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 11278u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "InsertEventCapability"),
                crate::types::LocalizedText::new("", "InsertEventCapability"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 1u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2330u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1756(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 11279u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "ReplaceEventCapability"),
                crate::types::LocalizedText::new("", "ReplaceEventCapability"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 1u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2330u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1757(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 11280u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "UpdateEventCapability"),
                crate::types::LocalizedText::new("", "UpdateEventCapability"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 1u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2330u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1758(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 11501u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "DeleteEventCapability"),
                crate::types::LocalizedText::new("", "DeleteEventCapability"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 1u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2330u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1759(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 11270u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "InsertAnnotationCapability"),
                crate::types::LocalizedText::new("", "InsertAnnotationCapability"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 1u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2330u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1761(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 19094u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "ServerTimestampSupported"),
                crate::types::LocalizedText::new("", "ServerTimestampSupported"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 1u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2330u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1763(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 3025u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "UpdatedNode"),
                crate::types::LocalizedText::new("", "UpdatedNode"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 17u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2999u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1764(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 3028u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "PerformInsertReplace"),
                crate::types::LocalizedText::new("", "PerformInsertReplace"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 11293u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2999u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_1765(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 3003u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "Filter"),
                crate::types::LocalizedText::new("", "Filter"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 725u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2999u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
