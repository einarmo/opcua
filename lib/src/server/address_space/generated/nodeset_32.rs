// OPCUA for Rust
// SPDX-License-Identifier: MPL-2.0
// Copyright (C) 2017-2024 Adam Lock, Einar Omang
//
// This file was autogenerated from tools/schema/schemas/1.0.4/Opc.Ua.NodeSet2.xml by opcua-codegen
//
// DO NOT EDIT THIS FILE
pub(super) fn imported_nodes<'a>(
    ns_map: &'a crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> Box<dyn Iterator<Item = crate::server::address_space::ImportedItem> + 'a> {
    Box::new(
        [
            &make_variable_321 as &dyn Fn(_) -> crate::server::address_space::ImportedItem,
            &make_variable_3211,
            &make_variable_3213,
            &make_variable_3215,
            &make_variable_3219,
            &make_variable_322,
            &make_variable_323,
            &make_variable_324,
            &make_variable_3240,
            &make_variable_3246,
            &make_variable_3248,
            &make_variable_325,
            &make_variable_3255,
            &make_variable_326,
            &make_variable_3264,
            &make_variable_327,
            &make_variable_3270,
            &make_variable_3278,
            &make_variable_328,
            &make_variable_3288,
            &make_variable_329,
            &make_variable_3290,
            &make_variable_3297,
            &make_variable_3299,
            &make_variable_330,
            &make_variable_331,
            &make_variable_3316,
            &make_variable_332,
            &make_variable_3325,
            &make_variable_333,
            &make_variable_334,
            &make_variable_335,
            &make_variable_336,
            &make_variable_337,
            &make_variable_338,
            &make_variable_339,
            &make_variable_340,
            &make_variable_341,
            &make_variable_342,
            &make_variable_343,
            &make_variable_344,
            &make_variable_345,
            &make_variable_3457,
            &make_variable_3458,
            &make_variable_3459,
            &make_variable_346,
            &make_variable_3460,
            &make_variable_3461,
            &make_variable_3462,
            &make_variable_3463,
            &make_variable_3464,
            &make_variable_3465,
            &make_variable_3466,
            &make_variable_3467,
            &make_variable_3468,
            &make_variable_3469,
            &make_variable_347,
            &make_variable_3470,
            &make_variable_3471,
            &make_variable_3472,
            &make_variable_3473,
            &make_variable_3474,
            &make_variable_3475,
            &make_variable_3476,
            &make_variable_3477,
            &make_variable_3478,
            &make_variable_3479,
            &make_variable_348,
            &make_variable_3480,
            &make_variable_3481,
            &make_variable_3482,
            &make_variable_3483,
            &make_variable_3484,
            &make_variable_3485,
            &make_variable_3486,
            &make_variable_3487,
            &make_variable_3488,
            &make_variable_3489,
            &make_variable_349,
            &make_variable_3490,
            &make_variable_3491,
            &make_variable_3492,
            &make_variable_3493,
            &make_variable_3494,
            &make_variable_3495,
            &make_variable_3496,
            &make_variable_3497,
            &make_variable_3498,
            &make_variable_3499,
            &make_variable_3500,
            &make_variable_3501,
            &make_variable_3502,
            &make_variable_3503,
            &make_variable_3504,
            &make_variable_3505,
            &make_variable_3506,
            &make_variable_3507,
            &make_variable_3508,
            &make_variable_3509,
            &make_variable_3510,
        ]
        .into_iter()
        .map(|f| f(ns_map)),
    )
}
#[allow(unused)]
fn make_variable_321(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 3161u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "CreateSubscriptionCount"),
                crate::types::LocalizedText::new("", "CreateSubscriptionCount"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 871u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 63u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2030u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3211(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15407u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "OptionSetValues"),
                crate::types::LocalizedText::new("", "OptionSetValues"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 21u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::LocalizedText::new("", "CurrentRead"),
                crate::types::LocalizedText::new("", "CurrentWrite"),
                crate::types::LocalizedText::new("", "HistoryRead"),
                crate::types::LocalizedText::new("", "HistoryWrite"),
                crate::types::LocalizedText::new("", "SemanticChange"),
                crate::types::LocalizedText::new("", "StatusWrite"),
                crate::types::LocalizedText::new("", "TimestampWrite"),
                crate::types::LocalizedText::new("", "Reserved"),
                crate::types::LocalizedText::new("", "NonatomicRead"),
                crate::types::LocalizedText::new("", "NonatomicWrite"),
                crate::types::LocalizedText::new("", "WriteFullArrayOnly"),
                crate::types::LocalizedText::new("", "NoSubDataTypes"),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15406u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3213(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15034u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "OptionSetValues"),
                crate::types::LocalizedText::new("", "OptionSetValues"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 21u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::LocalizedText::new("", "SubscribeToEvents"),
                crate::types::LocalizedText::new("", "Reserved"),
                crate::types::LocalizedText::new("", "HistoryRead"),
                crate::types::LocalizedText::new("", "HistoryWrite"),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 15033u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3215(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15035u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "OptionSetValues"),
                crate::types::LocalizedText::new("", "OptionSetValues"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 21u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::LocalizedText::new("", "SigningRequired"),
                crate::types::LocalizedText::new("", "EncryptionRequired"),
                crate::types::LocalizedText::new("", "SessionRequired"),
                crate::types::LocalizedText::new("", "ApplyRestrictionsToBrowse"),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 95u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3219(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 14528u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "EnumStrings"),
                crate::types::LocalizedText::new("", "EnumStrings"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 21u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::LocalizedText::new("", "Structure"),
                crate::types::LocalizedText::new("", "StructureWithOptionalFields"),
                crate::types::LocalizedText::new("", "Union"),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 98u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_322(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 3162u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "ModifySubscriptionCount"),
                crate::types::LocalizedText::new("", "ModifySubscriptionCount"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 871u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 63u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2030u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_323(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 3163u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "SetPublishingModeCount"),
                crate::types::LocalizedText::new("", "SetPublishingModeCount"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 871u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 63u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2030u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_324(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 3164u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "PublishCount"),
                crate::types::LocalizedText::new("", "PublishCount"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 871u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 63u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2030u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3240(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 7597u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "EnumStrings"),
                crate::types::LocalizedText::new("", "EnumStrings"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 21u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::LocalizedText::new("", "Server"),
                crate::types::LocalizedText::new("", "Client"),
                crate::types::LocalizedText::new("", "ClientAndServer"),
                crate::types::LocalizedText::new("", "DiscoveryServer"),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 307u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3246(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 7595u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "EnumStrings"),
                crate::types::LocalizedText::new("", "EnumStrings"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 21u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::LocalizedText::new("", "Invalid"),
                crate::types::LocalizedText::new("", "None"),
                crate::types::LocalizedText::new("", "Sign"),
                crate::types::LocalizedText::new("", "SignAndEncrypt"),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 302u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3248(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 7596u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "EnumStrings"),
                crate::types::LocalizedText::new("", "EnumStrings"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 21u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::LocalizedText::new("", "Anonymous"),
                crate::types::LocalizedText::new("", "UserName"),
                crate::types::LocalizedText::new("", "Certificate"),
                crate::types::LocalizedText::new("", "IssuedToken"),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 303u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_325(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 3165u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "RepublishCount"),
                crate::types::LocalizedText::new("", "RepublishCount"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 871u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 63u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2030u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3255(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 7598u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "EnumStrings"),
                crate::types::LocalizedText::new("", "EnumStrings"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 21u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::LocalizedText::new("", "Issue"),
                crate::types::LocalizedText::new("", "Renew"),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 315u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_326(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 3166u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "TransferSubscriptionsCount"),
                crate::types::LocalizedText::new("", "TransferSubscriptionsCount"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 871u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 63u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2030u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3264(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 11881u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "EnumValues"),
                crate::types::LocalizedText::new("", "EnumValues"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 7594u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::EnumValueType {
                    description: Default::default(),
                    display_name: crate::types::LocalizedText::new("", "None"),
                    value: 0i64,
                }),
                crate::types::ExtensionObject::from_message(&crate::types::EnumValueType {
                    description: Default::default(),
                    display_name: crate::types::LocalizedText::new("", "AccessLevel"),
                    value: 1i64,
                }),
                crate::types::ExtensionObject::from_message(&crate::types::EnumValueType {
                    description: Default::default(),
                    display_name: crate::types::LocalizedText::new("", "ArrayDimensions"),
                    value: 2i64,
                }),
                crate::types::ExtensionObject::from_message(&crate::types::EnumValueType {
                    description: Default::default(),
                    display_name: crate::types::LocalizedText::new("", "BrowseName"),
                    value: 4i64,
                }),
                crate::types::ExtensionObject::from_message(&crate::types::EnumValueType {
                    description: Default::default(),
                    display_name: crate::types::LocalizedText::new("", "ContainsNoLoops"),
                    value: 8i64,
                }),
                crate::types::ExtensionObject::from_message(&crate::types::EnumValueType {
                    description: Default::default(),
                    display_name: crate::types::LocalizedText::new("", "DataType"),
                    value: 16i64,
                }),
                crate::types::ExtensionObject::from_message(&crate::types::EnumValueType {
                    description: Default::default(),
                    display_name: crate::types::LocalizedText::new("", "Description"),
                    value: 32i64,
                }),
                crate::types::ExtensionObject::from_message(&crate::types::EnumValueType {
                    description: Default::default(),
                    display_name: crate::types::LocalizedText::new("", "DisplayName"),
                    value: 64i64,
                }),
                crate::types::ExtensionObject::from_message(&crate::types::EnumValueType {
                    description: Default::default(),
                    display_name: crate::types::LocalizedText::new("", "EventNotifier"),
                    value: 128i64,
                }),
                crate::types::ExtensionObject::from_message(&crate::types::EnumValueType {
                    description: Default::default(),
                    display_name: crate::types::LocalizedText::new("", "Executable"),
                    value: 256i64,
                }),
                crate::types::ExtensionObject::from_message(&crate::types::EnumValueType {
                    description: Default::default(),
                    display_name: crate::types::LocalizedText::new("", "Historizing"),
                    value: 512i64,
                }),
                crate::types::ExtensionObject::from_message(&crate::types::EnumValueType {
                    description: Default::default(),
                    display_name: crate::types::LocalizedText::new("", "InverseName"),
                    value: 1024i64,
                }),
                crate::types::ExtensionObject::from_message(&crate::types::EnumValueType {
                    description: Default::default(),
                    display_name: crate::types::LocalizedText::new("", "IsAbstract"),
                    value: 2048i64,
                }),
                crate::types::ExtensionObject::from_message(&crate::types::EnumValueType {
                    description: Default::default(),
                    display_name: crate::types::LocalizedText::new("", "MinimumSamplingInterval"),
                    value: 4096i64,
                }),
                crate::types::ExtensionObject::from_message(&crate::types::EnumValueType {
                    description: Default::default(),
                    display_name: crate::types::LocalizedText::new("", "NodeClass"),
                    value: 8192i64,
                }),
                crate::types::ExtensionObject::from_message(&crate::types::EnumValueType {
                    description: Default::default(),
                    display_name: crate::types::LocalizedText::new("", "NodeId"),
                    value: 16384i64,
                }),
                crate::types::ExtensionObject::from_message(&crate::types::EnumValueType {
                    description: Default::default(),
                    display_name: crate::types::LocalizedText::new("", "Symmetric"),
                    value: 32768i64,
                }),
                crate::types::ExtensionObject::from_message(&crate::types::EnumValueType {
                    description: Default::default(),
                    display_name: crate::types::LocalizedText::new("", "UserAccessLevel"),
                    value: 65536i64,
                }),
                crate::types::ExtensionObject::from_message(&crate::types::EnumValueType {
                    description: Default::default(),
                    display_name: crate::types::LocalizedText::new("", "UserExecutable"),
                    value: 131072i64,
                }),
                crate::types::ExtensionObject::from_message(&crate::types::EnumValueType {
                    description: Default::default(),
                    display_name: crate::types::LocalizedText::new("", "UserWriteMask"),
                    value: 262144i64,
                }),
                crate::types::ExtensionObject::from_message(&crate::types::EnumValueType {
                    description: Default::default(),
                    display_name: crate::types::LocalizedText::new("", "ValueRank"),
                    value: 524288i64,
                }),
                crate::types::ExtensionObject::from_message(&crate::types::EnumValueType {
                    description: Default::default(),
                    display_name: crate::types::LocalizedText::new("", "WriteMask"),
                    value: 1048576i64,
                }),
                crate::types::ExtensionObject::from_message(&crate::types::EnumValueType {
                    description: Default::default(),
                    display_name: crate::types::LocalizedText::new("", "Value"),
                    value: 2097152i64,
                }),
                crate::types::ExtensionObject::from_message(&crate::types::EnumValueType {
                    description: Default::default(),
                    display_name: crate::types::LocalizedText::new("", "DataTypeDefinition"),
                    value: 4194304i64,
                }),
                crate::types::ExtensionObject::from_message(&crate::types::EnumValueType {
                    description: Default::default(),
                    display_name: crate::types::LocalizedText::new("", "RolePermissions"),
                    value: 8388608i64,
                }),
                crate::types::ExtensionObject::from_message(&crate::types::EnumValueType {
                    description: Default::default(),
                    display_name: crate::types::LocalizedText::new("", "AccessRestrictions"),
                    value: 16777216i64,
                }),
                crate::types::ExtensionObject::from_message(&crate::types::EnumValueType {
                    description: Default::default(),
                    display_name: crate::types::LocalizedText::new("", "All"),
                    value: 33554431i64,
                }),
                crate::types::ExtensionObject::from_message(&crate::types::EnumValueType {
                    description: Default::default(),
                    display_name: crate::types::LocalizedText::new("", "BaseNode"),
                    value: 26501220i64,
                }),
                crate::types::ExtensionObject::from_message(&crate::types::EnumValueType {
                    description: Default::default(),
                    display_name: crate::types::LocalizedText::new("", "Object"),
                    value: 26501348i64,
                }),
                crate::types::ExtensionObject::from_message(&crate::types::EnumValueType {
                    description: Default::default(),
                    display_name: crate::types::LocalizedText::new("", "ObjectType"),
                    value: 26503268i64,
                }),
                crate::types::ExtensionObject::from_message(&crate::types::EnumValueType {
                    description: Default::default(),
                    display_name: crate::types::LocalizedText::new("", "Variable"),
                    value: 26571383i64,
                }),
                crate::types::ExtensionObject::from_message(&crate::types::EnumValueType {
                    description: Default::default(),
                    display_name: crate::types::LocalizedText::new("", "VariableType"),
                    value: 28600438i64,
                }),
                crate::types::ExtensionObject::from_message(&crate::types::EnumValueType {
                    description: Default::default(),
                    display_name: crate::types::LocalizedText::new("", "Method"),
                    value: 26632548i64,
                }),
                crate::types::ExtensionObject::from_message(&crate::types::EnumValueType {
                    description: Default::default(),
                    display_name: crate::types::LocalizedText::new("", "ReferenceType"),
                    value: 26537060i64,
                }),
                crate::types::ExtensionObject::from_message(&crate::types::EnumValueType {
                    description: Default::default(),
                    display_name: crate::types::LocalizedText::new("", "View"),
                    value: 26501356i64,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 348u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_327(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 3167u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "DeleteSubscriptionsCount"),
                crate::types::LocalizedText::new("", "DeleteSubscriptionsCount"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 871u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 63u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2030u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3270(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15036u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "OptionSetValues"),
                crate::types::LocalizedText::new("", "OptionSetValues"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 21u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::LocalizedText::new("", "AccessLevel"),
                crate::types::LocalizedText::new("", "ArrayDimensions"),
                crate::types::LocalizedText::new("", "BrowseName"),
                crate::types::LocalizedText::new("", "ContainsNoLoops"),
                crate::types::LocalizedText::new("", "DataType"),
                crate::types::LocalizedText::new("", "Description"),
                crate::types::LocalizedText::new("", "DisplayName"),
                crate::types::LocalizedText::new("", "EventNotifier"),
                crate::types::LocalizedText::new("", "Executable"),
                crate::types::LocalizedText::new("", "Historizing"),
                crate::types::LocalizedText::new("", "InverseName"),
                crate::types::LocalizedText::new("", "IsAbstract"),
                crate::types::LocalizedText::new("", "MinimumSamplingInterval"),
                crate::types::LocalizedText::new("", "NodeClass"),
                crate::types::LocalizedText::new("", "NodeId"),
                crate::types::LocalizedText::new("", "Symmetric"),
                crate::types::LocalizedText::new("", "UserAccessLevel"),
                crate::types::LocalizedText::new("", "UserExecutable"),
                crate::types::LocalizedText::new("", "UserWriteMask"),
                crate::types::LocalizedText::new("", "ValueRank"),
                crate::types::LocalizedText::new("", "WriteMask"),
                crate::types::LocalizedText::new("", "ValueForVariableType"),
                crate::types::LocalizedText::new("", "DataTypeDefinition"),
                crate::types::LocalizedText::new("", "RolePermissions"),
                crate::types::LocalizedText::new("", "AccessRestrictions"),
                crate::types::LocalizedText::new("", "AccessLevelEx"),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 347u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3278(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 7605u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "EnumStrings"),
                crate::types::LocalizedText::new("", "EnumStrings"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 21u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::LocalizedText::new("", "Equals"),
                crate::types::LocalizedText::new("", "IsNull"),
                crate::types::LocalizedText::new("", "GreaterThan"),
                crate::types::LocalizedText::new("", "LessThan"),
                crate::types::LocalizedText::new("", "GreaterThanOrEqual"),
                crate::types::LocalizedText::new("", "LessThanOrEqual"),
                crate::types::LocalizedText::new("", "Like"),
                crate::types::LocalizedText::new("", "Not"),
                crate::types::LocalizedText::new("", "Between"),
                crate::types::LocalizedText::new("", "InList"),
                crate::types::LocalizedText::new("", "And"),
                crate::types::LocalizedText::new("", "Or"),
                crate::types::LocalizedText::new("", "Cast"),
                crate::types::LocalizedText::new("", "InView"),
                crate::types::LocalizedText::new("", "OfType"),
                crate::types::LocalizedText::new("", "RelatedTo"),
                crate::types::LocalizedText::new("", "BitwiseAnd"),
                crate::types::LocalizedText::new("", "BitwiseOr"),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 576u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_328(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 3168u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "AddNodesCount"),
                crate::types::LocalizedText::new("", "AddNodesCount"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 871u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 63u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2030u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3288(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 11884u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "EnumValues"),
                crate::types::LocalizedText::new("", "EnumValues"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 7594u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::EnumValueType {
                    description: Default::default(),
                    display_name: crate::types::LocalizedText::new("", "Insert"),
                    value: 1i64,
                }),
                crate::types::ExtensionObject::from_message(&crate::types::EnumValueType {
                    description: Default::default(),
                    display_name: crate::types::LocalizedText::new("", "Replace"),
                    value: 2i64,
                }),
                crate::types::ExtensionObject::from_message(&crate::types::EnumValueType {
                    description: Default::default(),
                    display_name: crate::types::LocalizedText::new("", "Update"),
                    value: 3i64,
                }),
                crate::types::ExtensionObject::from_message(&crate::types::EnumValueType {
                    description: Default::default(),
                    display_name: crate::types::LocalizedText::new("", "Delete"),
                    value: 4i64,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11234u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_329(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 3169u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "AddReferencesCount"),
                crate::types::LocalizedText::new("", "AddReferencesCount"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 871u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 63u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2030u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3290(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 11885u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "EnumValues"),
                crate::types::LocalizedText::new("", "EnumValues"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 7594u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::ExtensionObject::from_message(&crate::types::EnumValueType {
                    description: Default::default(),
                    display_name: crate::types::LocalizedText::new("", "Insert"),
                    value: 1i64,
                }),
                crate::types::ExtensionObject::from_message(&crate::types::EnumValueType {
                    description: Default::default(),
                    display_name: crate::types::LocalizedText::new("", "Replace"),
                    value: 2i64,
                }),
                crate::types::ExtensionObject::from_message(&crate::types::EnumValueType {
                    description: Default::default(),
                    display_name: crate::types::LocalizedText::new("", "Update"),
                    value: 3i64,
                }),
                crate::types::ExtensionObject::from_message(&crate::types::EnumValueType {
                    description: Default::default(),
                    display_name: crate::types::LocalizedText::new("", "Remove"),
                    value: 4i64,
                }),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 11293u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3297(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 7611u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "EnumStrings"),
                crate::types::LocalizedText::new("", "EnumStrings"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 21u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::LocalizedText::new("", "None"),
                crate::types::LocalizedText::new("", "Cold"),
                crate::types::LocalizedText::new("", "Warm"),
                crate::types::LocalizedText::new("", "Hot"),
                crate::types::LocalizedText::new("", "Transparent"),
                crate::types::LocalizedText::new("", "HotAndMirrored"),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 851u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3299(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 7612u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "EnumStrings"),
                crate::types::LocalizedText::new("", "EnumStrings"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 21u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::LocalizedText::new("", "Running"),
                crate::types::LocalizedText::new("", "Failed"),
                crate::types::LocalizedText::new("", "NoConfiguration"),
                crate::types::LocalizedText::new("", "Suspended"),
                crate::types::LocalizedText::new("", "Shutdown"),
                crate::types::LocalizedText::new("", "Test"),
                crate::types::LocalizedText::new("", "CommunicationFault"),
                crate::types::LocalizedText::new("", "Unknown"),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 852u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_330(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 3170u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "DeleteNodesCount"),
                crate::types::LocalizedText::new("", "DeleteNodesCount"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 871u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 63u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2030u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_331(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 3171u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "DeleteReferencesCount"),
                crate::types::LocalizedText::new("", "DeleteReferencesCount"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 871u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 63u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2030u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3316(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 12078u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "EnumStrings"),
                crate::types::LocalizedText::new("", "EnumStrings"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 21u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::LocalizedText::new("", "Linear"),
                crate::types::LocalizedText::new("", "Log"),
                crate::types::LocalizedText::new("", "Ln"),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 12077u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_332(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 3172u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "BrowseCount"),
                crate::types::LocalizedText::new("", "BrowseCount"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 871u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 63u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2030u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3325(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 7614u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "EnumStrings"),
                crate::types::LocalizedText::new("", "EnumStrings"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 21u32),
            false,
            1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(vec![
                crate::types::LocalizedText::new("", "AbsoluteValue"),
                crate::types::LocalizedText::new("", "PercentOfValue"),
                crate::types::LocalizedText::new("", "PercentOfRange"),
                crate::types::LocalizedText::new("", "PercentOfEURange"),
                crate::types::LocalizedText::new("", "Unknown"),
            ])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 890u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_333(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 3173u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "BrowseNextCount"),
                crate::types::LocalizedText::new("", "BrowseNextCount"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 871u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 63u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2030u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_334(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 3174u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "TranslateBrowsePathsToNodeIdsCount"),
                crate::types::LocalizedText::new("", "TranslateBrowsePathsToNodeIdsCount"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 871u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 63u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2030u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_335(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 3175u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "QueryFirstCount"),
                crate::types::LocalizedText::new("", "QueryFirstCount"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 871u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 63u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2030u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_336(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 3176u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "QueryNextCount"),
                crate::types::LocalizedText::new("", "QueryNextCount"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 871u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 63u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2030u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_337(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 3177u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "RegisterNodesCount"),
                crate::types::LocalizedText::new("", "RegisterNodesCount"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 871u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 63u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2030u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_338(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 3178u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "UnregisterNodesCount"),
                crate::types::LocalizedText::new("", "UnregisterNodesCount"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 871u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 63u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2030u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_339(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2031u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "SessionSecurityDiagnostics"),
                crate::types::LocalizedText::new("", "SessionSecurityDiagnostics"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 868u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 3179u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 3180u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 3181u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 3182u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 3183u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 3184u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 3185u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 3186u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 3187u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2244u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2029u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_340(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 3179u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "SessionId"),
                crate::types::LocalizedText::new("", "SessionId"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 17u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 63u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2031u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_341(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 3180u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "ClientUserIdOfSession"),
                crate::types::LocalizedText::new("", "ClientUserIdOfSession"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 63u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2031u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_342(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 3181u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "ClientUserIdHistory"),
                crate::types::LocalizedText::new("", "ClientUserIdHistory"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 12u32),
            false,
            1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 63u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2031u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_343(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 3182u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "AuthenticationMechanism"),
                crate::types::LocalizedText::new("", "AuthenticationMechanism"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 63u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2031u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_344(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 3183u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "Encoding"),
                crate::types::LocalizedText::new("", "Encoding"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 63u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2031u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_345(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 3184u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "TransportProtocol"),
                crate::types::LocalizedText::new("", "TransportProtocol"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 63u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2031u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3457(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
                crate::server::address_space::Base::new_full(
                    crate::types::NodeId::new(0u16, 7617u32),
                    crate::types::NodeClass::Variable,
                    crate::types::QualifiedName::new(0u16, "Opc.Ua"),
                    crate::types::LocalizedText::new("", "Opc.Ua"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                crate::types::NodeId::new(0u16, 15u32),
                false,
                -1i32,
                crate::types::DataValue::new_now(
                    crate::types::Variant::from(
                        crate::types::ByteString::from_base64(
                                "",
                            )
                            .unwrap(),
                    ),
                ),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            crate ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 7619u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15037u32), type_id : crate
            ::types::NodeId::new(0u16, 46u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 14873u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17538u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17550u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15734u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 18824u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 18827u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 18830u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 18833u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 18836u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 18839u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 18842u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 18845u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 18848u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15738u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 23514u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12681u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15741u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 14855u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15599u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15602u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15501u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15521u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 14849u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 14852u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 14876u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15766u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15769u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 14324u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15772u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15775u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15778u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15781u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15784u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15787u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21156u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15793u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15854u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15857u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15860u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21159u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21162u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21165u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15866u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15869u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15872u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15877u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15880u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15883u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15886u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21002u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15889u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21168u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15895u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15898u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15919u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15922u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15925u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15931u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 17469u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 21171u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15524u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15940u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15943u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15946u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 23502u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 16131u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 18178u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 18181u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 18184u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 18187u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 7650u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 7656u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 14870u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12767u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12770u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8914u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 7665u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12213u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 7662u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 7668u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 7782u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12902u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12905u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 7698u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 7671u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 7674u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 7677u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 7680u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 7683u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 7728u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 7731u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 7734u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 7737u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12718u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12721u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 7686u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 7929u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 7932u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 7935u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 7938u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 7941u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 7944u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 7947u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8004u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8067u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8073u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8076u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8172u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 7692u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8208u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 11959u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 11962u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8211u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8214u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8217u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8220u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8223u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8226u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 7659u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8229u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8232u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8235u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8238u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8241u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12183u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12186u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12091u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 12094u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8247u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 15398u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 8244u32), type_id : crate
            ::types::NodeId::new(0u16, 47u32), is_forward : true, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 93u32), type_id : crate ::types::NodeId::new(0u16,
            47u32), is_forward : false, }, crate
            ::server::address_space::ImportedReference { target_id : crate
            ::types::NodeId::new(0u16, 72u32), type_id : crate ::types::NodeId::new(0u16,
            40u32), is_forward : true, }
        ],
    }
}
#[allow(unused)]
fn make_variable_3458(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 7619u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "NamespaceUri"),
                crate::types::LocalizedText::new("", "NamespaceUri"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(
                "http://opcfoundation.org/UA/",
            )),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 7617u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3459(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15037u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "Deprecated"),
                crate::types::LocalizedText::new("", "Deprecated"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 1u32),
            false,
            -1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(true)),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 68u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 7617u32),
                type_id: crate::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_346(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 3185u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "SecurityMode"),
                crate::types::LocalizedText::new("", "SecurityMode"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 302u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 63u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2031u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3460(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 14873u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "KeyValuePair"),
                crate::types::LocalizedText::new("", "KeyValuePair"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from("KeyValuePair")),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 69u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 7617u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3461(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 17538u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "AdditionalParametersType"),
                crate::types::LocalizedText::new("", "AdditionalParametersType"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(
                "AdditionalParametersType",
            )),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 69u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 7617u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3462(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 17550u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "EphemeralKeyType"),
                crate::types::LocalizedText::new("", "EphemeralKeyType"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from("EphemeralKeyType")),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 69u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 7617u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3463(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15734u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "EndpointType"),
                crate::types::LocalizedText::new("", "EndpointType"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from("EndpointType")),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 69u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 7617u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3464(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 18824u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "RationalNumber"),
                crate::types::LocalizedText::new("", "RationalNumber"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from("RationalNumber")),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 69u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 7617u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3465(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 18827u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "Vector"),
                crate::types::LocalizedText::new("", "Vector"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from("Vector")),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 69u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 7617u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3466(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 18830u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "3DVector"),
                crate::types::LocalizedText::new("", "3DVector"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from("ThreeDVector")),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 69u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 7617u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3467(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 18833u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "CartesianCoordinates"),
                crate::types::LocalizedText::new("", "CartesianCoordinates"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from("CartesianCoordinates")),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 69u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 7617u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3468(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 18836u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "3DCartesianCoordinates"),
                crate::types::LocalizedText::new("", "3DCartesianCoordinates"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(
                "ThreeDCartesianCoordinates",
            )),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 69u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 7617u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3469(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 18839u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "Orientation"),
                crate::types::LocalizedText::new("", "Orientation"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from("Orientation")),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 69u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 7617u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_347(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 3186u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "SecurityPolicyUri"),
                crate::types::LocalizedText::new("", "SecurityPolicyUri"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 63u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2031u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3470(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 18842u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "3DOrientation"),
                crate::types::LocalizedText::new("", "3DOrientation"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from("ThreeDOrientation")),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 69u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 7617u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3471(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 18845u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "Frame"),
                crate::types::LocalizedText::new("", "Frame"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from("Frame")),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 69u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 7617u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3472(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 18848u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "3DFrame"),
                crate::types::LocalizedText::new("", "3DFrame"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from("ThreeDFrame")),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 69u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 7617u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3473(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15738u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "IdentityMappingRuleType"),
                crate::types::LocalizedText::new("", "IdentityMappingRuleType"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(
                "IdentityMappingRuleType",
            )),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 69u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 7617u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3474(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 23514u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "CurrencyUnitType"),
                crate::types::LocalizedText::new("", "CurrencyUnitType"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from("CurrencyUnitType")),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 69u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 7617u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3475(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 12681u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "TrustListDataType"),
                crate::types::LocalizedText::new("", "TrustListDataType"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from("TrustListDataType")),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 69u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 7617u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3476(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15741u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "DataTypeSchemaHeader"),
                crate::types::LocalizedText::new("", "DataTypeSchemaHeader"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from("DataTypeSchemaHeader")),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 69u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 7617u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3477(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 14855u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "DataTypeDescription"),
                crate::types::LocalizedText::new("", "DataTypeDescription"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from("DataTypeDescription")),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 69u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 7617u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3478(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15599u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "StructureDescription"),
                crate::types::LocalizedText::new("", "StructureDescription"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from("StructureDescription")),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 69u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 7617u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3479(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15602u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "EnumDescription"),
                crate::types::LocalizedText::new("", "EnumDescription"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from("EnumDescription")),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 69u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 7617u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_348(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 3187u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "ClientCertificate"),
                crate::types::LocalizedText::new("", "ClientCertificate"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 15u32),
            false,
            -1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 63u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2031u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3480(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15501u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "SimpleTypeDescription"),
                crate::types::LocalizedText::new("", "SimpleTypeDescription"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from("SimpleTypeDescription")),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 69u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 7617u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3481(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15521u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "UABinaryFileDataType"),
                crate::types::LocalizedText::new("", "UABinaryFileDataType"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from("UABinaryFileDataType")),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 69u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 7617u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3482(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 14849u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "DataSetMetaDataType"),
                crate::types::LocalizedText::new("", "DataSetMetaDataType"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from("DataSetMetaDataType")),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 69u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 7617u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3483(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 14852u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "FieldMetaData"),
                crate::types::LocalizedText::new("", "FieldMetaData"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from("FieldMetaData")),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 69u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 7617u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3484(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 14876u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "ConfigurationVersionDataType"),
                crate::types::LocalizedText::new("", "ConfigurationVersionDataType"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(
                "ConfigurationVersionDataType",
            )),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 69u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 7617u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3485(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15766u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "PublishedDataSetDataType"),
                crate::types::LocalizedText::new("", "PublishedDataSetDataType"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(
                "PublishedDataSetDataType",
            )),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 69u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 7617u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3486(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15769u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "PublishedDataSetSourceDataType"),
                crate::types::LocalizedText::new("", "PublishedDataSetSourceDataType"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(
                "PublishedDataSetSourceDataType",
            )),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 69u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 7617u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3487(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 14324u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "PublishedVariableDataType"),
                crate::types::LocalizedText::new("", "PublishedVariableDataType"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(
                "PublishedVariableDataType",
            )),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 69u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 7617u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3488(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15772u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "PublishedDataItemsDataType"),
                crate::types::LocalizedText::new("", "PublishedDataItemsDataType"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(
                "PublishedDataItemsDataType",
            )),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 69u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 7617u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3489(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15775u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "PublishedEventsDataType"),
                crate::types::LocalizedText::new("", "PublishedEventsDataType"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(
                "PublishedEventsDataType",
            )),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 69u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 7617u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_349(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 2032u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "SubscriptionDiagnosticsArray"),
                crate::types::LocalizedText::new("", "SubscriptionDiagnosticsArray"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 874u32),
            false,
            1i32,
            crate::types::DataValue::null(),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2171u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 78u32),
                type_id: crate::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 2029u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3490(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15778u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "DataSetWriterDataType"),
                crate::types::LocalizedText::new("", "DataSetWriterDataType"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from("DataSetWriterDataType")),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 69u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 7617u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3491(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15781u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "DataSetWriterTransportDataType"),
                crate::types::LocalizedText::new("", "DataSetWriterTransportDataType"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(
                "DataSetWriterTransportDataType",
            )),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 69u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 7617u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3492(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15784u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "DataSetWriterMessageDataType"),
                crate::types::LocalizedText::new("", "DataSetWriterMessageDataType"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(
                "DataSetWriterMessageDataType",
            )),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 69u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 7617u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3493(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15787u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "PubSubGroupDataType"),
                crate::types::LocalizedText::new("", "PubSubGroupDataType"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from("PubSubGroupDataType")),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 69u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 7617u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3494(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 21156u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "WriterGroupDataType"),
                crate::types::LocalizedText::new("", "WriterGroupDataType"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from("WriterGroupDataType")),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 69u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 7617u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3495(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15793u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "WriterGroupTransportDataType"),
                crate::types::LocalizedText::new("", "WriterGroupTransportDataType"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(
                "WriterGroupTransportDataType",
            )),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 69u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 7617u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3496(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15854u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "WriterGroupMessageDataType"),
                crate::types::LocalizedText::new("", "WriterGroupMessageDataType"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(
                "WriterGroupMessageDataType",
            )),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 69u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 7617u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3497(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15857u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "PubSubConnectionDataType"),
                crate::types::LocalizedText::new("", "PubSubConnectionDataType"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(
                "PubSubConnectionDataType",
            )),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 69u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 7617u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3498(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15860u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "ConnectionTransportDataType"),
                crate::types::LocalizedText::new("", "ConnectionTransportDataType"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(
                "ConnectionTransportDataType",
            )),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 69u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 7617u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3499(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 21159u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "NetworkAddressDataType"),
                crate::types::LocalizedText::new("", "NetworkAddressDataType"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from("NetworkAddressDataType")),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 69u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 7617u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3500(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 21162u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "NetworkAddressUrlDataType"),
                crate::types::LocalizedText::new("", "NetworkAddressUrlDataType"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(
                "NetworkAddressUrlDataType",
            )),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 69u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 7617u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3501(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 21165u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "ReaderGroupDataType"),
                crate::types::LocalizedText::new("", "ReaderGroupDataType"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from("ReaderGroupDataType")),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 69u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 7617u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3502(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15866u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "ReaderGroupTransportDataType"),
                crate::types::LocalizedText::new("", "ReaderGroupTransportDataType"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(
                "ReaderGroupTransportDataType",
            )),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 69u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 7617u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3503(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15869u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "ReaderGroupMessageDataType"),
                crate::types::LocalizedText::new("", "ReaderGroupMessageDataType"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(
                "ReaderGroupMessageDataType",
            )),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 69u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 7617u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3504(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15872u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "DataSetReaderDataType"),
                crate::types::LocalizedText::new("", "DataSetReaderDataType"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from("DataSetReaderDataType")),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 69u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 7617u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3505(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15877u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "DataSetReaderTransportDataType"),
                crate::types::LocalizedText::new("", "DataSetReaderTransportDataType"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(
                "DataSetReaderTransportDataType",
            )),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 69u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 7617u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3506(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15880u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "DataSetReaderMessageDataType"),
                crate::types::LocalizedText::new("", "DataSetReaderMessageDataType"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(
                "DataSetReaderMessageDataType",
            )),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 69u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 7617u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3507(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15883u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "SubscribedDataSetDataType"),
                crate::types::LocalizedText::new("", "SubscribedDataSetDataType"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(
                "SubscribedDataSetDataType",
            )),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 69u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 7617u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3508(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15886u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "TargetVariablesDataType"),
                crate::types::LocalizedText::new("", "TargetVariablesDataType"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(
                "TargetVariablesDataType",
            )),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 69u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 7617u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3509(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 21002u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "FieldTargetDataType"),
                crate::types::LocalizedText::new("", "FieldTargetDataType"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from("FieldTargetDataType")),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 69u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 7617u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3510(
    ns_map: &crate::server::address_space::NodeSetNamespaceMapper<'_>,
) -> crate::server::address_space::ImportedItem {
    crate::server::address_space::ImportedItem {
        node: crate::server::address_space::Variable::new_full(
            crate::server::address_space::Base::new_full(
                crate::types::NodeId::new(0u16, 15889u32),
                crate::types::NodeClass::Variable,
                crate::types::QualifiedName::new(0u16, "SubscribedDataSetMirrorDataType"),
                crate::types::LocalizedText::new("", "SubscribedDataSetMirrorDataType"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            crate::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            crate::types::DataValue::new_now(crate::types::Variant::from(
                "SubscribedDataSetMirrorDataType",
            )),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 69u32),
                type_id: crate::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            crate::server::address_space::ImportedReference {
                target_id: crate::types::NodeId::new(0u16, 7617u32),
                type_id: crate::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
