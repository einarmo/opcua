// This file was autogenerated from schema/Opc.Ua.Pn.Types.bsd by opcua-codegen
//
// DO NOT EDIT THIS FILE

// OPCUA for Rust
// SPDX-License-Identifier: MPL-2.0
// Copyright (C) 2017-2024 Einar Omang
#![allow(non_camel_case_types)]
#![allow(clippy::upper_case_acronyms)]
#[derive(Debug, Clone, PartialEq, opcua::types::BinaryEncodable, opcua::types::BinaryDecodable)]
#[cfg_attr(
    feature = "json",
    derive(opcua::types::JsonEncodable, opcua::types::JsonDecodable)
)]
#[cfg_attr(feature = "xml", derive(opcua::types::FromXml))]
#[derive(Default)]
pub struct PnDeviceDiagnosisDataType {
    pub api: u32,
    pub slot: u16,
    pub subslot: u16,
    pub channel_number: u16,
    #[cfg_attr(any(feature = "json", feature = "xml"), opcua(rename = "Type"))]
    pub __type: super::enums::PnChannelTypeEnumeration,
    pub accumulative: super::enums::PnChannelAccumulativeEnumeration,
    pub maintenance: super::enums::PnChannelMaintenanceEnumeration,
    pub specifier: super::enums::PnChannelSpecifierEnumeration,
    pub direction: super::enums::PnChannelDirectionEnumeration,
    pub user_structure_identifier: u16,
    pub channel_error_type: u16,
    pub ext_channel_error_type: u16,
    pub ext_channel_add_value: u32,
    pub qualified_channel_qualifier: u32,
    pub manufacturer_data: opcua::types::byte_string::ByteString,
    pub message: opcua::types::localized_text::LocalizedText,
    pub help_text: opcua::types::localized_text::LocalizedText,
}
impl opcua::types::ExpandedMessageInfo for PnDeviceDiagnosisDataType {
    fn full_type_id(&self) -> opcua::types::ExpandedNodeId {
        let id: opcua::types::NodeId =
            crate::ObjectId::PnDeviceDiagnosisDataType_Encoding_DefaultBinary.into();
        opcua::types::ExpandedNodeId::from((id, "http://opcfoundation.org/UA/PROFINET/"))
    }
    fn full_json_type_id(&self) -> opcua::types::ExpandedNodeId {
        let id: opcua::types::NodeId =
            crate::ObjectId::PnDeviceDiagnosisDataType_Encoding_DefaultJson.into();
        opcua::types::ExpandedNodeId::from((id, "http://opcfoundation.org/UA/PROFINET/"))
    }
    fn full_xml_type_id(&self) -> opcua::types::ExpandedNodeId {
        let id: opcua::types::NodeId =
            crate::ObjectId::PnDeviceDiagnosisDataType_Encoding_DefaultXml.into();
        opcua::types::ExpandedNodeId::from((id, "http://opcfoundation.org/UA/PROFINET/"))
    }
    fn full_data_type_id(&self) -> opcua::types::ExpandedNodeId {
        let id: opcua::types::NodeId = crate::DataTypeId::PnDeviceDiagnosisDataType.into();
        opcua::types::ExpandedNodeId::from((id, "http://opcfoundation.org/UA/PROFINET/"))
    }
}
#[derive(Debug, Clone, PartialEq, opcua::types::BinaryEncodable, opcua::types::BinaryDecodable)]
#[cfg_attr(
    feature = "json",
    derive(opcua::types::JsonEncodable, opcua::types::JsonDecodable)
)]
#[cfg_attr(feature = "xml", derive(opcua::types::FromXml))]
#[derive(Default)]
pub struct PnDeviceRoleOptionSet {
    pub value: opcua::types::byte_string::ByteString,
    pub valid_bits: opcua::types::byte_string::ByteString,
}
impl opcua::types::ExpandedMessageInfo for PnDeviceRoleOptionSet {
    fn full_type_id(&self) -> opcua::types::ExpandedNodeId {
        let id: opcua::types::NodeId =
            crate::ObjectId::PnDeviceRoleOptionSet_Encoding_DefaultBinary.into();
        opcua::types::ExpandedNodeId::from((id, "http://opcfoundation.org/UA/PROFINET/"))
    }
    fn full_json_type_id(&self) -> opcua::types::ExpandedNodeId {
        let id: opcua::types::NodeId =
            crate::ObjectId::PnDeviceRoleOptionSet_Encoding_DefaultJson.into();
        opcua::types::ExpandedNodeId::from((id, "http://opcfoundation.org/UA/PROFINET/"))
    }
    fn full_xml_type_id(&self) -> opcua::types::ExpandedNodeId {
        let id: opcua::types::NodeId =
            crate::ObjectId::PnDeviceRoleOptionSet_Encoding_DefaultXml.into();
        opcua::types::ExpandedNodeId::from((id, "http://opcfoundation.org/UA/PROFINET/"))
    }
    fn full_data_type_id(&self) -> opcua::types::ExpandedNodeId {
        let id: opcua::types::NodeId = crate::DataTypeId::PnDeviceRoleOptionSet.into();
        opcua::types::ExpandedNodeId::from((id, "http://opcfoundation.org/UA/PROFINET/"))
    }
}
///Contains the fields of the APDU element I&M5 | I&M5Data
#[derive(Debug, Clone, PartialEq, opcua::types::BinaryEncodable, opcua::types::BinaryDecodable)]
#[cfg_attr(
    feature = "json",
    derive(opcua::types::JsonEncodable, opcua::types::JsonDecodable)
)]
#[cfg_attr(feature = "xml", derive(opcua::types::FromXml))]
#[derive(Default)]
pub struct PnIM5DataType {
    pub annotation: opcua::types::string::UAString,
    pub order_id: opcua::types::string::UAString,
    pub vendor_id: u16,
    pub serial_number: opcua::types::string::UAString,
    pub hardware_revision: opcua::types::string::UAString,
    pub software_revision: opcua::types::string::UAString,
}
impl opcua::types::ExpandedMessageInfo for PnIM5DataType {
    fn full_type_id(&self) -> opcua::types::ExpandedNodeId {
        let id: opcua::types::NodeId = crate::ObjectId::PnIM5DataType_Encoding_DefaultBinary.into();
        opcua::types::ExpandedNodeId::from((id, "http://opcfoundation.org/UA/PROFINET/"))
    }
    fn full_json_type_id(&self) -> opcua::types::ExpandedNodeId {
        let id: opcua::types::NodeId = crate::ObjectId::PnIM5DataType_Encoding_DefaultJson.into();
        opcua::types::ExpandedNodeId::from((id, "http://opcfoundation.org/UA/PROFINET/"))
    }
    fn full_xml_type_id(&self) -> opcua::types::ExpandedNodeId {
        let id: opcua::types::NodeId = crate::ObjectId::PnIM5DataType_Encoding_DefaultXml.into();
        opcua::types::ExpandedNodeId::from((id, "http://opcfoundation.org/UA/PROFINET/"))
    }
    fn full_data_type_id(&self) -> opcua::types::ExpandedNodeId {
        let id: opcua::types::NodeId = crate::DataTypeId::PnIM5DataType.into();
        opcua::types::ExpandedNodeId::from((id, "http://opcfoundation.org/UA/PROFINET/"))
    }
}
