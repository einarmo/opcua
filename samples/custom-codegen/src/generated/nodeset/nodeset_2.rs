// This file was autogenerated from schema/Opc.Ua.Pn.NodeSet2.xml by opcua-codegen
//
// DO NOT EDIT THIS FILE

// OPCUA for Rust
// SPDX-License-Identifier: MPL-2.0
// Copyright (C) 2017-2024 Einar Omang
pub(super) fn imported_nodes<'a>(
    ns_map: &'a opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> Box<dyn Iterator<Item = opcua::nodes::ImportedItem> + 'a> {
    Box::new(
        [
            &make_object_type_185 as &dyn Fn(_) -> opcua::nodes::ImportedItem,
            &make_object_type_193,
            &make_object_type_205,
            &make_object_type_218,
            &make_object_type_236,
            &make_object_type_244,
            &make_object_type_252,
            &make_object_type_275,
            &make_object_type_291,
            &make_object_type_293,
            &make_object_type_300,
            &make_object_type_309,
            &make_object_type_327,
            &make_object_type_345,
            &make_object_type_63,
            &make_object_type_80,
            &make_object_type_83,
            &make_object_type_84,
            &make_object_type_86,
            &make_reference_type_48,
            &make_reference_type_49,
            &make_reference_type_50,
            &make_reference_type_51,
            &make_reference_type_52,
            &make_reference_type_53,
            &make_reference_type_54,
            &make_reference_type_55,
            &make_reference_type_56,
            &make_reference_type_57,
            &make_reference_type_58,
            &make_reference_type_59,
            &make_reference_type_60,
            &make_reference_type_61,
            &make_reference_type_62,
            &make_variable_1,
            &make_variable_102,
            &make_variable_106,
            &make_variable_107,
            &make_variable_109,
            &make_variable_11,
            &make_variable_110,
            &make_variable_111,
            &make_variable_112,
            &make_variable_114,
            &make_variable_115,
            &make_variable_116,
            &make_variable_117,
            &make_variable_120,
            &make_variable_122,
            &make_variable_124,
            &make_variable_125,
            &make_variable_126,
            &make_variable_127,
            &make_variable_129,
            &make_variable_13,
            &make_variable_133,
            &make_variable_135,
            &make_variable_136,
            &make_variable_137,
            &make_variable_138,
            &make_variable_139,
            &make_variable_140,
            &make_variable_141,
            &make_variable_142,
            &make_variable_145,
            &make_variable_146,
            &make_variable_147,
            &make_variable_148,
            &make_variable_149,
            &make_variable_15,
            &make_variable_154,
            &make_variable_156,
            &make_variable_157,
            &make_variable_158,
            &make_variable_159,
            &make_variable_160,
            &make_variable_161,
            &make_variable_162,
            &make_variable_163,
            &make_variable_166,
            &make_variable_167,
            &make_variable_168,
            &make_variable_169,
            &make_variable_17,
            &make_variable_173,
            &make_variable_176,
            &make_variable_179,
            &make_variable_182,
            &make_variable_183,
            &make_variable_184,
            &make_variable_186,
            &make_variable_187,
            &make_variable_189,
            &make_variable_19,
            &make_variable_190,
            &make_variable_191,
            &make_variable_192,
            &make_variable_195,
            &make_variable_196,
            &make_variable_197,
        ]
        .into_iter()
        .map(|f| f(ns_map)),
    )
}
#[allow(unused)]
fn make_object_type_185(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::ObjectType::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1029u32),
                opcua::types::NodeClass::ObjectType,
                opcua::types::QualifiedName::new(
                    ns_map.get_index(1u16).unwrap(),
                    "PnApplicationRelationType",
                ),
                opcua::types::LocalizedText::new("", "PnApplicationRelationType"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            false,
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6163u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6159u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5034u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 58u32),
                type_id: opcua::types::NodeId::new(0u16, 45u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6162u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6161u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6158u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6160u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_type_193(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::ObjectType::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1007u32),
                opcua::types::NodeClass::ObjectType,
                opcua::types::QualifiedName::new(
                    ns_map.get_index(1u16).unwrap(),
                    "PnAssetContainerType",
                ),
                opcua::types::LocalizedText::new("", "PnAssetContainerType"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            false,
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5010u32),
                type_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 4006u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 58u32),
                type_id: opcua::types::NodeId::new(0u16, 45u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_type_205(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::ObjectType::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1006u32),
                opcua::types::NodeClass::ObjectType,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "PnAssetType"),
                opcua::types::LocalizedText::new("", "PnAssetType"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            false,
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6067u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6075u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6076u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6070u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6066u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6068u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6073u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1003u32),
                type_id: opcua::types::NodeId::new(0u16, 41u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 58u32),
                type_id: opcua::types::NodeId::new(0u16, 45u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6071u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6069u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6072u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6065u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6074u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_type_218(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::ObjectType::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1033u32),
                opcua::types::NodeClass::ObjectType,
                opcua::types::QualifiedName::new(
                    ns_map.get_index(1u16).unwrap(),
                    "PnEquipmentContainerType",
                ),
                opcua::types::LocalizedText::new("", "PnEquipmentContainerType"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            false,
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5042u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 58u32),
                type_id: opcua::types::NodeId::new(0u16, 45u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_type_236(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::ObjectType::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1028u32),
                opcua::types::NodeClass::ObjectType,
                opcua::types::QualifiedName::new(
                    ns_map.get_index(1u16).unwrap(),
                    "PnExpectedModuleContainerType",
                ),
                opcua::types::LocalizedText::new("", "PnExpectedModuleContainerType"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            false,
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5033u32),
                type_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 4004u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 58u32),
                type_id: opcua::types::NodeId::new(0u16, 45u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_type_244(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::ObjectType::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1023u32),
                opcua::types::NodeClass::ObjectType,
                opcua::types::QualifiedName::new(
                    ns_map.get_index(1u16).unwrap(),
                    "PnExpectedSubmoduleContainerType",
                ),
                opcua::types::LocalizedText::new("", "PnExpectedSubmoduleContainerType"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            false,
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5027u32),
                type_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 4005u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 58u32),
                type_id: opcua::types::NodeId::new(0u16, 45u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_type_252(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::ObjectType::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1005u32),
                opcua::types::NodeClass::ObjectType,
                opcua::types::QualifiedName::new(
                    ns_map.get_index(1u16).unwrap(),
                    "PnIdentificationType",
                ),
                opcua::types::LocalizedText::new("", "PnIdentificationType"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            false,
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6058u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6059u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6050u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6061u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6055u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6047u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 58u32),
                type_id: opcua::types::NodeId::new(0u16, 45u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6051u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6052u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6054u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6048u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 7002u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 7003u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 7001u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6060u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6049u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6056u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6057u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6046u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6053u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_type_275(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::ObjectType::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1009u32),
                opcua::types::NodeClass::ObjectType,
                opcua::types::QualifiedName::new(
                    ns_map.get_index(1u16).unwrap(),
                    "PnInterfaceContainerType",
                ),
                opcua::types::LocalizedText::new("", "PnInterfaceContainerType"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            false,
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5012u32),
                type_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 4007u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 58u32),
                type_id: opcua::types::NodeId::new(0u16, 45u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_type_291(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::ObjectType::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1011u32),
                opcua::types::NodeClass::ObjectType,
                opcua::types::QualifiedName::new(
                    ns_map.get_index(1u16).unwrap(),
                    "PnPortContainerType",
                ),
                opcua::types::LocalizedText::new("", "PnPortContainerType"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            false,
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5013u32),
                type_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 4008u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 58u32),
                type_id: opcua::types::NodeId::new(0u16, 45u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_type_293(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::ObjectType::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1012u32),
                opcua::types::NodeClass::ObjectType,
                opcua::types::QualifiedName::new(
                    ns_map.get_index(1u16).unwrap(),
                    "PnPortStatisticType",
                ),
                opcua::types::LocalizedText::new("", "PnPortStatisticType"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            false,
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6105u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6107u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6103u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6106u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6108u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6104u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 58u32),
                type_id: opcua::types::NodeId::new(0u16, 45u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_type_300(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::ObjectType::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1010u32),
                opcua::types::NodeClass::ObjectType,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "PnPortType"),
                opcua::types::LocalizedText::new("", "PnPortType"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            false,
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6100u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5018u32),
                type_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 4015u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6102u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6096u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6099u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 58u32),
                type_id: opcua::types::NodeId::new(0u16, 45u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1004u32),
                type_id: opcua::types::NodeId::new(0u16, 41u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6097u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6101u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5019u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_type_309(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::ObjectType::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1026u32),
                opcua::types::NodeClass::ObjectType,
                opcua::types::QualifiedName::new(
                    ns_map.get_index(1u16).unwrap(),
                    "PnRealModuleContainerType",
                ),
                opcua::types::LocalizedText::new("", "PnRealModuleContainerType"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            false,
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5031u32),
                type_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 4002u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 58u32),
                type_id: opcua::types::NodeId::new(0u16, 45u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_type_327(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::ObjectType::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1021u32),
                opcua::types::NodeClass::ObjectType,
                opcua::types::QualifiedName::new(
                    ns_map.get_index(1u16).unwrap(),
                    "PnRealSubmoduleContainerType",
                ),
                opcua::types::LocalizedText::new("", "PnRealSubmoduleContainerType"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            false,
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5025u32),
                type_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 4003u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 58u32),
                type_id: opcua::types::NodeId::new(0u16, 45u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_type_345(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::ObjectType::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1018u32),
                opcua::types::NodeClass::ObjectType,
                opcua::types::QualifiedName::new(
                    ns_map.get_index(1u16).unwrap(),
                    "PnSubmoduleStateType",
                ),
                opcua::types::LocalizedText::new("", "PnSubmoduleStateType"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            false,
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6123u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6128u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6127u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6129u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6126u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6125u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 58u32),
                type_id: opcua::types::NodeId::new(0u16, 45u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6124u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_type_63(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::ObjectType::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1002u32),
                opcua::types::NodeClass::ObjectType,
                opcua::types::QualifiedName::new(
                    ns_map.get_index(1u16).unwrap(),
                    "PnDiagnosisAlarmType",
                ),
                opcua::types::LocalizedText::new("", "PnDiagnosisAlarmType"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            false,
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6029u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6024u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6034u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6027u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6032u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6036u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6035u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6039u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6030u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6038u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 2915u32),
                type_id: opcua::types::NodeId::new(0u16, 45u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6037u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6025u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6031u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6026u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6028u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6033u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1020u32),
                type_id: opcua::types::NodeId::new(0u16, 41u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1025u32),
                type_id: opcua::types::NodeId::new(0u16, 41u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1032u32),
                type_id: opcua::types::NodeId::new(0u16, 41u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5025u32),
                type_id: opcua::types::NodeId::new(0u16, 41u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5031u32),
                type_id: opcua::types::NodeId::new(0u16, 41u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5042u32),
                type_id: opcua::types::NodeId::new(0u16, 41u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_type_80(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::ObjectType::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1003u32),
                opcua::types::NodeClass::ObjectType,
                opcua::types::QualifiedName::new(
                    ns_map.get_index(1u16).unwrap(),
                    "PnAssetChangedEventType",
                ),
                opcua::types::LocalizedText::new("", "PnAssetChangedEventType"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            false,
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6041u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6040u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 2041u32),
                type_id: opcua::types::NodeId::new(0u16, 45u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1006u32),
                type_id: opcua::types::NodeId::new(0u16, 41u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1020u32),
                type_id: opcua::types::NodeId::new(0u16, 41u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1025u32),
                type_id: opcua::types::NodeId::new(0u16, 41u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1032u32),
                type_id: opcua::types::NodeId::new(0u16, 41u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5025u32),
                type_id: opcua::types::NodeId::new(0u16, 41u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5031u32),
                type_id: opcua::types::NodeId::new(0u16, 41u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5042u32),
                type_id: opcua::types::NodeId::new(0u16, 41u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_type_83(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::ObjectType::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1004u32),
                opcua::types::NodeClass::ObjectType,
                opcua::types::QualifiedName::new(
                    ns_map.get_index(1u16).unwrap(),
                    "PnTopologyChangedEventType",
                ),
                opcua::types::LocalizedText::new("", "PnTopologyChangedEventType"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            false,
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 2041u32),
                type_id: opcua::types::NodeId::new(0u16, 45u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1010u32),
                type_id: opcua::types::NodeId::new(0u16, 41u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_type_84(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::ObjectType::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1031u32),
                opcua::types::NodeClass::ObjectType,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "IPnDomainType"),
                opcua::types::LocalizedText::new("", "IPnDomainType"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            true,
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 17602u32),
                type_id: opcua::types::NodeId::new(0u16, 45u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5036u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_object_type_86(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::ObjectType::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1032u32),
                opcua::types::NodeClass::ObjectType,
                opcua::types::QualifiedName::new(
                    ns_map.get_index(1u16).unwrap(),
                    "IPnEquipmentType",
                ),
                opcua::types::LocalizedText::new("", "IPnEquipmentType"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            true,
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5041u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5039u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6176u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5040u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5037u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 17602u32),
                type_id: opcua::types::NodeId::new(0u16, 45u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5038u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1003u32),
                type_id: opcua::types::NodeId::new(0u16, 41u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1002u32),
                type_id: opcua::types::NodeId::new(0u16, 41u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 7005u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6175u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5042u32),
                type_id: opcua::types::NodeId::new(0u16, 17603u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_reference_type_48(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::ReferenceType::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 4016u32),
                opcua::types::NodeClass::ReferenceType,
                opcua::types::QualifiedName::new(
                    ns_map.get_index(1u16).unwrap(),
                    "HasPnApplicationRelation",
                ),
                opcua::types::LocalizedText::new("", "HasPnApplicationRelation"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            false,
            false,
            Some(opcua::types::LocalizedText::new(
                "",
                "IsPnApplicationRelationOf",
            )),
        )
        .into(),
        references: vec![opcua::nodes::ImportedReference {
            target_id: opcua::types::NodeId::new(0u16, 47u32),
            type_id: opcua::types::NodeId::new(0u16, 45u32),
            is_forward: false,
        }],
    }
}
#[allow(unused)]
fn make_reference_type_49(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::ReferenceType::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 4006u32),
                opcua::types::NodeClass::ReferenceType,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "HasPnAsset"),
                opcua::types::LocalizedText::new("", "HasPnAsset"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            false,
            false,
            Some(opcua::types::LocalizedText::new("", "IsPnAssetOf")),
        )
        .into(),
        references: vec![opcua::nodes::ImportedReference {
            target_id: opcua::types::NodeId::new(0u16, 47u32),
            type_id: opcua::types::NodeId::new(0u16, 45u32),
            is_forward: false,
        }],
    }
}
#[allow(unused)]
fn make_reference_type_50(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::ReferenceType::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 4004u32),
                opcua::types::NodeClass::ReferenceType,
                opcua::types::QualifiedName::new(
                    ns_map.get_index(1u16).unwrap(),
                    "HasPnExpectedModule",
                ),
                opcua::types::LocalizedText::new("", "HasPnExpectedModule"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            false,
            false,
            Some(opcua::types::LocalizedText::new("", "IsPnExpectedModuleOf")),
        )
        .into(),
        references: vec![opcua::nodes::ImportedReference {
            target_id: opcua::types::NodeId::new(0u16, 47u32),
            type_id: opcua::types::NodeId::new(0u16, 45u32),
            is_forward: false,
        }],
    }
}
#[allow(unused)]
fn make_reference_type_51(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::ReferenceType::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 4005u32),
                opcua::types::NodeClass::ReferenceType,
                opcua::types::QualifiedName::new(
                    ns_map.get_index(1u16).unwrap(),
                    "HasPnExpectedSubmodule",
                ),
                opcua::types::LocalizedText::new("", "HasPnExpectedSubmodule"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            false,
            false,
            Some(opcua::types::LocalizedText::new(
                "",
                "IsPnExpectedSubmoduleOf",
            )),
        )
        .into(),
        references: vec![opcua::nodes::ImportedReference {
            target_id: opcua::types::NodeId::new(0u16, 47u32),
            type_id: opcua::types::NodeId::new(0u16, 45u32),
            is_forward: false,
        }],
    }
}
#[allow(unused)]
fn make_reference_type_52(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::ReferenceType::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 4007u32),
                opcua::types::NodeClass::ReferenceType,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "HasPnInterface"),
                opcua::types::LocalizedText::new("", "HasPnInterface"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            false,
            false,
            Some(opcua::types::LocalizedText::new("", "IsPnInterfaceOf")),
        )
        .into(),
        references: vec![opcua::nodes::ImportedReference {
            target_id: opcua::types::NodeId::new(0u16, 47u32),
            type_id: opcua::types::NodeId::new(0u16, 45u32),
            is_forward: false,
        }],
    }
}
#[allow(unused)]
fn make_reference_type_53(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::ReferenceType::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 4008u32),
                opcua::types::NodeClass::ReferenceType,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "HasPnPort"),
                opcua::types::LocalizedText::new("", "HasPnPort"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            false,
            false,
            Some(opcua::types::LocalizedText::new("", "IsPnPortOf")),
        )
        .into(),
        references: vec![opcua::nodes::ImportedReference {
            target_id: opcua::types::NodeId::new(0u16, 47u32),
            type_id: opcua::types::NodeId::new(0u16, 45u32),
            is_forward: false,
        }],
    }
}
#[allow(unused)]
fn make_reference_type_54(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::ReferenceType::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 4002u32),
                opcua::types::NodeClass::ReferenceType,
                opcua::types::QualifiedName::new(
                    ns_map.get_index(1u16).unwrap(),
                    "HasPnRealModule",
                ),
                opcua::types::LocalizedText::new("", "HasPnRealModule"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            false,
            false,
            Some(opcua::types::LocalizedText::new("", "IsPnRealModuleOf")),
        )
        .into(),
        references: vec![opcua::nodes::ImportedReference {
            target_id: opcua::types::NodeId::new(0u16, 47u32),
            type_id: opcua::types::NodeId::new(0u16, 45u32),
            is_forward: false,
        }],
    }
}
#[allow(unused)]
fn make_reference_type_55(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::ReferenceType::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 4003u32),
                opcua::types::NodeClass::ReferenceType,
                opcua::types::QualifiedName::new(
                    ns_map.get_index(1u16).unwrap(),
                    "HasPnRealSubmodule",
                ),
                opcua::types::LocalizedText::new("", "HasPnRealSubmodule"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            false,
            false,
            Some(opcua::types::LocalizedText::new("", "IsPnRealSubmoduleOf")),
        )
        .into(),
        references: vec![opcua::nodes::ImportedReference {
            target_id: opcua::types::NodeId::new(0u16, 47u32),
            type_id: opcua::types::NodeId::new(0u16, 45u32),
            is_forward: false,
        }],
    }
}
#[allow(unused)]
fn make_reference_type_56(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::ReferenceType::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 4015u32),
                opcua::types::NodeClass::ReferenceType,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "CommLinkTo"),
                opcua::types::LocalizedText::new("", "CommLinkTo"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            false,
            false,
            Some(opcua::types::LocalizedText::new("", "CommLinkFrom")),
        )
        .into(),
        references: vec![opcua::nodes::ImportedReference {
            target_id: opcua::types::NodeId::new(0u16, 35u32),
            type_id: opcua::types::NodeId::new(0u16, 45u32),
            is_forward: false,
        }],
    }
}
#[allow(unused)]
fn make_reference_type_57(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::ReferenceType::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 4012u32),
                opcua::types::NodeClass::ReferenceType,
                opcua::types::QualifiedName::new(
                    ns_map.get_index(1u16).unwrap(),
                    "IsPnApplicationRelationControllerInterface",
                ),
                opcua::types::LocalizedText::new("", "IsPnApplicationRelationControllerInterface"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            false,
            false,
            Some(opcua::types::LocalizedText::new(
                "",
                "UsedByPnApplicationRelation",
            )),
        )
        .into(),
        references: vec![opcua::nodes::ImportedReference {
            target_id: opcua::types::NodeId::new(0u16, 32u32),
            type_id: opcua::types::NodeId::new(0u16, 45u32),
            is_forward: false,
        }],
    }
}
#[allow(unused)]
fn make_reference_type_58(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::ReferenceType::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 4011u32),
                opcua::types::NodeClass::ReferenceType,
                opcua::types::QualifiedName::new(
                    ns_map.get_index(1u16).unwrap(),
                    "IsPnApplicationRelationDeviceInterface",
                ),
                opcua::types::LocalizedText::new("", "IsPnApplicationRelationDeviceInterface"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            false,
            false,
            Some(opcua::types::LocalizedText::new(
                "",
                "UsedByPnApplicationRelation",
            )),
        )
        .into(),
        references: vec![opcua::nodes::ImportedReference {
            target_id: opcua::types::NodeId::new(0u16, 32u32),
            type_id: opcua::types::NodeId::new(0u16, 45u32),
            is_forward: false,
        }],
    }
}
#[allow(unused)]
fn make_reference_type_59(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::ReferenceType::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 4013u32),
                opcua::types::NodeClass::ReferenceType,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "IsPnInterface"),
                opcua::types::LocalizedText::new("", "IsPnInterface"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            false,
            false,
            Some(opcua::types::LocalizedText::new(
                "",
                "RealizedByPnSubmodule",
            )),
        )
        .into(),
        references: vec![opcua::nodes::ImportedReference {
            target_id: opcua::types::NodeId::new(0u16, 32u32),
            type_id: opcua::types::NodeId::new(0u16, 45u32),
            is_forward: false,
        }],
    }
}
#[allow(unused)]
fn make_reference_type_60(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::ReferenceType::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 4014u32),
                opcua::types::NodeClass::ReferenceType,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "IsPnPort"),
                opcua::types::LocalizedText::new("", "IsPnPort"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            false,
            false,
            Some(opcua::types::LocalizedText::new(
                "",
                "RealizedByPnSubmodule",
            )),
        )
        .into(),
        references: vec![opcua::nodes::ImportedReference {
            target_id: opcua::types::NodeId::new(0u16, 32u32),
            type_id: opcua::types::NodeId::new(0u16, 45u32),
            is_forward: false,
        }],
    }
}
#[allow(unused)]
fn make_reference_type_61(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::ReferenceType::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 4009u32),
                opcua::types::NodeClass::ReferenceType,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "IsPnRealModule"),
                opcua::types::LocalizedText::new("", "IsPnRealModule"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            false,
            false,
            Some(opcua::types::LocalizedText::new("", "IsPnExpectedModule")),
        )
        .into(),
        references: vec![opcua::nodes::ImportedReference {
            target_id: opcua::types::NodeId::new(0u16, 32u32),
            type_id: opcua::types::NodeId::new(0u16, 45u32),
            is_forward: false,
        }],
    }
}
#[allow(unused)]
fn make_reference_type_62(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::ReferenceType::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 4010u32),
                opcua::types::NodeClass::ReferenceType,
                opcua::types::QualifiedName::new(
                    ns_map.get_index(1u16).unwrap(),
                    "IsPnRealSubmodule",
                ),
                opcua::types::LocalizedText::new("", "IsPnRealSubmodule"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            false,
            false,
            Some(opcua::types::LocalizedText::new(
                "",
                "IsPnExpectedSubmodule",
            )),
        )
        .into(),
        references: vec![opcua::nodes::ImportedReference {
            target_id: opcua::types::NodeId::new(0u16, 32u32),
            type_id: opcua::types::NodeId::new(0u16, 45u32),
            is_forward: false,
        }],
    }
}
#[allow(unused)]
fn make_variable_1(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6194u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "EnumStrings"),
                opcua::types::LocalizedText::new("", "EnumStrings"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 21u32),
            false,
            1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(vec![
                opcua::types::LocalizedText::new("", "FUNCTION"),
                opcua::types::LocalizedText::new("", "LOCATION"),
                opcua::types::LocalizedText::new("", "BOTH"),
            ])),
            1u8,
            1u8,
            Some(vec![3u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 3021u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_102(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6175u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "Vendor"),
                opcua::types::LocalizedText::new("", "Vendor"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 80u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1032u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_106(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6177u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "GSDDescription"),
                opcua::types::LocalizedText::new("", "GSDDescription"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1034u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 80u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_107(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6178u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "State"),
                opcua::types::LocalizedText::new("", "State"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 3003u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 63u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 80u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1034u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_109(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6091u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "DeviceId"),
                opcua::types::LocalizedText::new("", "DeviceId"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 5u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1008u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_11(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6016u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "EnumValues"),
                opcua::types::LocalizedText::new("", "EnumValues"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 7594u32),
            false,
            1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(vec![
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: opcua::types::LocalizedText::new(
                            "",
                            "Single channel \nDiagnosis only for the reported channel",
                        ),
                        display_name: opcua::types::LocalizedText::new("", "SINGLE"),
                        value: 0i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: opcua::types::LocalizedText::new(
                            "",
                            "Multiple channel \nAccumulative diagnosis from more than one channel",
                        ),
                        display_name: opcua::types::LocalizedText::new("", "ACCUMULATIVE"),
                        value: 256i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
            ])),
            1u8,
            1u8,
            Some(vec![2u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 3011u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_110(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6092u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "DeviceInstance"),
                opcua::types::LocalizedText::new("", "DeviceInstance"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 5u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1008u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 80u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_111(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6088u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "DeviceRole"),
                opcua::types::LocalizedText::new("", "DeviceRole"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 3002u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1008u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_112(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6089u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "DeviceVendor"),
                opcua::types::LocalizedText::new("", "DeviceVendor"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1008u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 80u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_114(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6115u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "MacAddress"),
                opcua::types::LocalizedText::new("", "MacAddress"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 3u32),
            false,
            1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            Some(vec![6u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 63u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5011u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_115(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6087u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "NameOfStation"),
                opcua::types::LocalizedText::new("", "NameOfStation"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1008u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_116(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6094u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "OEMDeviceId"),
                opcua::types::LocalizedText::new("", "OEMDeviceId"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 5u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1008u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 80u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_117(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6093u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "OEMVendorId"),
                opcua::types::LocalizedText::new("", "OEMVendorId"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 5u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1008u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 80u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_120(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
                opcua::nodes::Base::new_full(
                    opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6095u32),
                    opcua::types::NodeClass::Variable,
                    opcua::types::QualifiedName::new(0u16, "InputArguments"),
                    opcua::types::LocalizedText::new("", "InputArguments"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                opcua::types::NodeId::new(0u16, 296u32),
                false,
                1i32,
                opcua::types::DataValue::new_now(
                    opcua::types::Variant::from(
                        vec![
                            opcua::types::ExtensionObject::from_message_full(&
                            opcua::types::Argument { array_dimensions : None, data_type :
                            opcua::types::NodeId::new(0u16, 12u32), description :
                            opcua::types::LocalizedText::new("",
                            "String containing the new NameOfStation to be written remanent to the device. The maximum length shall be limited to 240 characters (See [PN Protocol] for details)."),
                            name : "NameOfStation".into(), value_rank : - 1i32, }, ns_map
                            .namespaces()).expect("Invalid encoding ID"),
                        ],
                    ),
                ),
                1u8,
                1u8,
                Some(vec![1u32]),
                Some(0f64),
            )
            .into(),
        references: vec![
            opcua::nodes::ImportedReference { target_id : opcua::types::NodeId::new(0u16,
            78u32), type_id : opcua::types::NodeId::new(0u16, 37u32), is_forward : true,
            }, opcua::nodes::ImportedReference { target_id :
            opcua::types::NodeId::new(0u16, 68u32), type_id :
            opcua::types::NodeId::new(0u16, 40u32), is_forward : true, },
            opcua::nodes::ImportedReference { target_id :
            opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 7004u32), type_id
            : opcua::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_122(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6090u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "VendorId"),
                opcua::types::LocalizedText::new("", "VendorId"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 5u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1008u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_124(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6147u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "GSDDescription"),
                opcua::types::LocalizedText::new("", "GSDDescription"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1024u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 80u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_125(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6146u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "GSDName"),
                opcua::types::LocalizedText::new("", "GSDName"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1024u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 80u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_126(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6145u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "IdentNumber"),
                opcua::types::LocalizedText::new("", "IdentNumber"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 7u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1024u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_127(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6144u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "Slot"),
                opcua::types::LocalizedText::new("", "Slot"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 5u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1024u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_129(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6157u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "State"),
                opcua::types::LocalizedText::new("", "State"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 3006u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 63u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1027u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_13(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6019u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "EnumValues"),
                opcua::types::LocalizedText::new("", "EnumValues"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 7594u32),
            false,
            1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(vec![
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: opcua::types::LocalizedText::new("", "Manufacturer specific"),
                        display_name: opcua::types::LocalizedText::new("", "MANUFACTURER_SPECIFIC"),
                        value: 0i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: opcua::types::LocalizedText::new("", "Input"),
                        display_name: opcua::types::LocalizedText::new("", "INPUT_CHANNEL"),
                        value: 8192i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: opcua::types::LocalizedText::new("", "Output"),
                        display_name: opcua::types::LocalizedText::new("", "OUTPUT_CHANNEL"),
                        value: 16384i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: opcua::types::LocalizedText::new("", "Input/Output"),
                        display_name: opcua::types::LocalizedText::new("", "BIDIRECTIONAL_CHANNEL"),
                        value: 24576i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
            ])),
            1u8,
            1u8,
            Some(vec![4u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 3014u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_133(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
                opcua::nodes::Base::new_full(
                    opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6156u32),
                    opcua::types::NodeClass::Variable,
                    opcua::types::QualifiedName::new(
                        ns_map.get_index(1u16).unwrap(),
                        "Diagnosis",
                    ),
                    opcua::types::LocalizedText::new("", "Diagnosis"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 3019u32),
                false,
                1i32,
                opcua::types::DataValue::new_now(
                    opcua::types::Variant::from(
                        vec![
                            opcua::types::ExtensionObject::from_message_full(& crate
                            ::generated::types::PnDeviceDiagnosisDataType { api : 0u32,
                            accumulative : crate
                            ::generated::types::PnChannelAccumulativeEnumeration::SINGLE,
                            channel_error_type : 0u16, channel_number : 0u16, direction :
                            crate
                            ::generated::types::PnChannelDirectionEnumeration::MANUFACTURER_SPECIFIC,
                            ext_channel_add_value : 0u32, ext_channel_error_type : 0u16,
                            help_text : opcua::types::LocalizedText::new("", ""),
                            maintenance : crate
                            ::generated::types::PnChannelMaintenanceEnumeration::FAULT,
                            manufacturer_data : Default::default(), message :
                            opcua::types::LocalizedText::new("", ""),
                            qualified_channel_qualifier : 0u32, slot : 0u16, specifier :
                            crate
                            ::generated::types::PnChannelSpecifierEnumeration::ALL_DISAPPEARS,
                            subslot : 0u16, __type : crate
                            ::generated::types::PnChannelTypeEnumeration::UNSPECIFIC,
                            user_structure_identifier : 0u16, }, ns_map.namespaces())
                            .expect("Invalid encoding ID"),
                        ],
                    ),
                ),
                1u8,
                1u8,
                Some(vec![0u32]),
                Some(0f64),
            )
            .into(),
        references: vec![
            opcua::nodes::ImportedReference { target_id : opcua::types::NodeId::new(0u16,
            63u32), type_id : opcua::types::NodeId::new(0u16, 40u32), is_forward : true,
            }, opcua::nodes::ImportedReference { target_id :
            opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1025u32), type_id
            : opcua::types::NodeId::new(0u16, 47u32), is_forward : false, },
            opcua::nodes::ImportedReference { target_id : opcua::types::NodeId::new(0u16,
            80u32), type_id : opcua::types::NodeId::new(0u16, 37u32), is_forward : true,
            }
        ],
    }
}
#[allow(unused)]
fn make_variable_135(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6148u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(
                    ns_map.get_index(1u16).unwrap(),
                    "HardwareRevision",
                ),
                opcua::types::LocalizedText::new("", "HardwareRevision"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5029u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_136(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6149u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "OrderId"),
                opcua::types::LocalizedText::new("", "OrderId"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5029u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_137(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6150u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "ProfileId"),
                opcua::types::LocalizedText::new("", "ProfileId"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 7u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5029u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_138(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6151u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(
                    ns_map.get_index(1u16).unwrap(),
                    "ProfileSpecificType",
                ),
                opcua::types::LocalizedText::new("", "ProfileSpecificType"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 5u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5029u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_139(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6152u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "SerialNumber"),
                opcua::types::LocalizedText::new("", "SerialNumber"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5029u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_140(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6153u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(
                    ns_map.get_index(1u16).unwrap(),
                    "SoftwareRevision",
                ),
                opcua::types::LocalizedText::new("", "SoftwareRevision"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5029u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_141(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6154u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "VendorId"),
                opcua::types::LocalizedText::new("", "VendorId"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 5u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5029u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_142(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6155u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "Version"),
                opcua::types::LocalizedText::new("", "Version"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5029u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_145(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6130u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "API"),
                opcua::types::LocalizedText::new("", "API"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 7u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1019u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_146(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6134u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "GSDDescription"),
                opcua::types::LocalizedText::new("", "GSDDescription"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1019u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 80u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_147(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6133u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "GSDName"),
                opcua::types::LocalizedText::new("", "GSDName"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1019u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 80u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_148(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6132u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "IdentNumber"),
                opcua::types::LocalizedText::new("", "IdentNumber"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 7u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1019u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_149(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6131u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "Subslot"),
                opcua::types::LocalizedText::new("", "Subslot"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 5u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1019u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_15(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6017u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "EnumValues"),
                opcua::types::LocalizedText::new("", "EnumValues"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 7594u32),
            false,
            1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(vec![
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: opcua::types::LocalizedText::new("", "Fault"),
                        display_name: opcua::types::LocalizedText::new("", "FAULT"),
                        value: 0i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: opcua::types::LocalizedText::new("", "Maintenance required"),
                        display_name: opcua::types::LocalizedText::new("", "MAINTENANCE_REQUIRED"),
                        value: 512i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: opcua::types::LocalizedText::new("", "Maintenance demanded"),
                        display_name: opcua::types::LocalizedText::new("", "MAINTENANCE_DEMANDED"),
                        value: 1024i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: opcua::types::LocalizedText::new(
                            "",
                            "Use QualifiedChannelQualifier variable",
                        ),
                        display_name: opcua::types::LocalizedText::new(
                            "",
                            "USE_QUALIFIED_CHANNEL_QUALIFIER",
                        ),
                        value: 1536i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
            ])),
            1u8,
            1u8,
            Some(vec![4u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 3012u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_154(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
                opcua::nodes::Base::new_full(
                    opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6143u32),
                    opcua::types::NodeClass::Variable,
                    opcua::types::QualifiedName::new(
                        ns_map.get_index(1u16).unwrap(),
                        "Diagnosis",
                    ),
                    opcua::types::LocalizedText::new("", "Diagnosis"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 3019u32),
                false,
                1i32,
                opcua::types::DataValue::new_now(
                    opcua::types::Variant::from(
                        vec![
                            opcua::types::ExtensionObject::from_message_full(& crate
                            ::generated::types::PnDeviceDiagnosisDataType { api : 0u32,
                            accumulative : crate
                            ::generated::types::PnChannelAccumulativeEnumeration::SINGLE,
                            channel_error_type : 0u16, channel_number : 0u16, direction :
                            crate
                            ::generated::types::PnChannelDirectionEnumeration::MANUFACTURER_SPECIFIC,
                            ext_channel_add_value : 0u32, ext_channel_error_type : 0u16,
                            help_text : opcua::types::LocalizedText::new("", ""),
                            maintenance : crate
                            ::generated::types::PnChannelMaintenanceEnumeration::FAULT,
                            manufacturer_data : Default::default(), message :
                            opcua::types::LocalizedText::new("", ""),
                            qualified_channel_qualifier : 0u32, slot : 0u16, specifier :
                            crate
                            ::generated::types::PnChannelSpecifierEnumeration::ALL_DISAPPEARS,
                            subslot : 0u16, __type : crate
                            ::generated::types::PnChannelTypeEnumeration::UNSPECIFIC,
                            user_structure_identifier : 0u16, }, ns_map.namespaces())
                            .expect("Invalid encoding ID"),
                        ],
                    ),
                ),
                1u8,
                1u8,
                Some(vec![0u32]),
                Some(0f64),
            )
            .into(),
        references: vec![
            opcua::nodes::ImportedReference { target_id : opcua::types::NodeId::new(0u16,
            63u32), type_id : opcua::types::NodeId::new(0u16, 40u32), is_forward : true,
            }, opcua::nodes::ImportedReference { target_id :
            opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1020u32), type_id
            : opcua::types::NodeId::new(0u16, 47u32), is_forward : false, },
            opcua::nodes::ImportedReference { target_id : opcua::types::NodeId::new(0u16,
            80u32), type_id : opcua::types::NodeId::new(0u16, 37u32), is_forward : true,
            }
        ],
    }
}
#[allow(unused)]
fn make_variable_156(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6135u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(
                    ns_map.get_index(1u16).unwrap(),
                    "HardwareRevision",
                ),
                opcua::types::LocalizedText::new("", "HardwareRevision"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5023u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_157(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6136u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "OrderId"),
                opcua::types::LocalizedText::new("", "OrderId"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5023u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_158(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6137u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "ProfileId"),
                opcua::types::LocalizedText::new("", "ProfileId"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 7u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5023u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_159(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6138u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(
                    ns_map.get_index(1u16).unwrap(),
                    "ProfileSpecificType",
                ),
                opcua::types::LocalizedText::new("", "ProfileSpecificType"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 5u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5023u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_160(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6139u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "SerialNumber"),
                opcua::types::LocalizedText::new("", "SerialNumber"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5023u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_161(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6140u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(
                    ns_map.get_index(1u16).unwrap(),
                    "SoftwareRevision",
                ),
                opcua::types::LocalizedText::new("", "SoftwareRevision"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5023u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_162(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6141u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "VendorId"),
                opcua::types::LocalizedText::new("", "VendorId"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 5u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5023u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_163(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6142u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "Version"),
                opcua::types::LocalizedText::new("", "Version"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5023u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_166(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6113u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "DefaultGateway"),
                opcua::types::LocalizedText::new("", "DefaultGateway"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 3u32),
            false,
            1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            Some(vec![4u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 63u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1017u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_167(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6114u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "DhcpEnabled"),
                opcua::types::LocalizedText::new("", "DhcpEnabled"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 1u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 63u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1017u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_168(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6111u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "IpAddress"),
                opcua::types::LocalizedText::new("", "IpAddress"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 3u32),
            false,
            1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            Some(vec![4u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 63u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1017u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_169(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6112u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "SubnetMask"),
                opcua::types::LocalizedText::new("", "SubnetMask"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 3u32),
            false,
            1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            Some(vec![4u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 63u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1017u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_17(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
                opcua::nodes::Base::new_full(
                    opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6018u32),
                    opcua::types::NodeClass::Variable,
                    opcua::types::QualifiedName::new(0u16, "EnumValues"),
                    opcua::types::LocalizedText::new("", "EnumValues"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                opcua::types::NodeId::new(0u16, 7594u32),
                false,
                1i32,
                opcua::types::DataValue::new_now(
                    opcua::types::Variant::from(
                        vec![
                            opcua::types::ExtensionObject::from_message_full(&
                            opcua::types::EnumValueType { description :
                            opcua::types::LocalizedText::new("",
                            "The Diagnosis ASE contains no longer any entries (of any severity) for this channel"),
                            display_name : opcua::types::LocalizedText::new("",
                            "ALL_DISAPPEARS"), value : 0i64, }, ns_map.namespaces())
                            .expect("Invalid encoding ID"),
                            opcua::types::ExtensionObject::from_message_full(&
                            opcua::types::EnumValueType { description :
                            opcua::types::LocalizedText::new("",
                            "An event appears and/or exists further\nThe Diagnosis ASE contains this and possible other entries for this channel."),
                            display_name : opcua::types::LocalizedText::new("",
                            "APPEARS"), value : 2048i64, }, ns_map.namespaces())
                            .expect("Invalid encoding ID"),
                            opcua::types::ExtensionObject::from_message_full(&
                            opcua::types::EnumValueType { description :
                            opcua::types::LocalizedText::new("",
                            "An event disappears and/or exists no longer\nThe Diagnosis ASE contains no longer any entries of the same severity for this channel"),
                            display_name : opcua::types::LocalizedText::new("",
                            "DISAPPEARS"), value : 4096i64, }, ns_map.namespaces())
                            .expect("Invalid encoding ID"),
                            opcua::types::ExtensionObject::from_message_full(&
                            opcua::types::EnumValueType { description :
                            opcua::types::LocalizedText::new("",
                            "An event disappears\nThe Diagnosis ASE still contains other entries of the same severity for this channel"),
                            display_name : opcua::types::LocalizedText::new("",
                            "DISAPPEARS_OTHER_REMAIN"), value : 6144i64, }, ns_map
                            .namespaces()).expect("Invalid encoding ID"),
                        ],
                    ),
                ),
                1u8,
                1u8,
                Some(vec![4u32]),
                Some(0f64),
            )
            .into(),
        references: vec![
            opcua::nodes::ImportedReference { target_id :
            opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 3013u32), type_id
            : opcua::types::NodeId::new(0u16, 46u32), is_forward : false, },
            opcua::nodes::ImportedReference { target_id : opcua::types::NodeId::new(0u16,
            78u32), type_id : opcua::types::NodeId::new(0u16, 37u32), is_forward : true,
            }, opcua::nodes::ImportedReference { target_id :
            opcua::types::NodeId::new(0u16, 68u32), type_id :
            opcua::types::NodeId::new(0u16, 40u32), is_forward : true, }
        ],
    }
}
#[allow(unused)]
fn make_variable_173(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6109u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "Enabled"),
                opcua::types::LocalizedText::new("", "Enabled"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 1u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 63u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1013u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 80u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_176(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6110u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "MacAddress"),
                opcua::types::LocalizedText::new("", "MacAddress"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 3u32),
            false,
            1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            Some(vec![6u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 63u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1014u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_179(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6179u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "PhysAddress"),
                opcua::types::LocalizedText::new("", "PhysAddress"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 3u32),
            false,
            1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            Some(vec![6u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 63u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 80u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1015u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_182(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6164u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "Id"),
                opcua::types::LocalizedText::new("", "Id"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 14u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5035u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_183(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6165u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "State"),
                opcua::types::LocalizedText::new("", "State"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 3004u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            3u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 63u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5035u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_184(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6166u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "Type"),
                opcua::types::LocalizedText::new("", "Type"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 3005u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5035u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_186(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6163u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "DataHoldFactor"),
                opcua::types::LocalizedText::new("", "DataHoldFactor"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 5u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1029u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 80u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_187(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6159u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "Id"),
                opcua::types::LocalizedText::new("", "Id"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 14u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1029u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_189(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6162u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "ReductionRatio"),
                opcua::types::LocalizedText::new("", "ReductionRatio"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 5u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 80u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1029u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_19(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
                opcua::nodes::Base::new_full(
                    opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6015u32),
                    opcua::types::NodeClass::Variable,
                    opcua::types::QualifiedName::new(0u16, "EnumValues"),
                    opcua::types::LocalizedText::new("", "EnumValues"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                opcua::types::NodeId::new(0u16, 7594u32),
                false,
                1i32,
                opcua::types::DataValue::new_now(
                    opcua::types::Variant::from(
                        vec![
                            opcua::types::ExtensionObject::from_message_full(&
                            opcua::types::EnumValueType { description :
                            opcua::types::LocalizedText::new("",
                            "Shall be used if the field ChannelNumber contains the value 0x8000 (submodule)\nFurthermore, it shall be used if none of the below defined types are appropriate."),
                            display_name : opcua::types::LocalizedText::new("",
                            "UNSPECIFIC"), value : 0i64, }, ns_map.namespaces())
                            .expect("Invalid encoding ID"),
                            opcua::types::ExtensionObject::from_message_full(&
                            opcua::types::EnumValueType { description :
                            opcua::types::LocalizedText::new("",
                            "The data length of this channel is 1 Bit."), display_name :
                            opcua::types::LocalizedText::new("", "1BIT"), value : 1i64,
                            }, ns_map.namespaces()).expect("Invalid encoding ID"),
                            opcua::types::ExtensionObject::from_message_full(&
                            opcua::types::EnumValueType { description :
                            opcua::types::LocalizedText::new("",
                            "The data length of this channel is 2 Bit."), display_name :
                            opcua::types::LocalizedText::new("", "2BIT"), value : 2i64,
                            }, ns_map.namespaces()).expect("Invalid encoding ID"),
                            opcua::types::ExtensionObject::from_message_full(&
                            opcua::types::EnumValueType { description :
                            opcua::types::LocalizedText::new("",
                            "The data length of this channel is 4 Bit."), display_name :
                            opcua::types::LocalizedText::new("", "4BIT"), value : 3i64,
                            }, ns_map.namespaces()).expect("Invalid encoding ID"),
                            opcua::types::ExtensionObject::from_message_full(&
                            opcua::types::EnumValueType { description :
                            opcua::types::LocalizedText::new("",
                            "The data length of this channel is 8 Bit."), display_name :
                            opcua::types::LocalizedText::new("", "8BIT"), value : 4i64,
                            }, ns_map.namespaces()).expect("Invalid encoding ID"),
                            opcua::types::ExtensionObject::from_message_full(&
                            opcua::types::EnumValueType { description :
                            opcua::types::LocalizedText::new("",
                            "The data length of this channel is 16 Bit."), display_name :
                            opcua::types::LocalizedText::new("", "16BIT"), value : 5i64,
                            }, ns_map.namespaces()).expect("Invalid encoding ID"),
                            opcua::types::ExtensionObject::from_message_full(&
                            opcua::types::EnumValueType { description :
                            opcua::types::LocalizedText::new("",
                            "The data length of this channel is 32 Bit."), display_name :
                            opcua::types::LocalizedText::new("", "32BIT"), value : 6i64,
                            }, ns_map.namespaces()).expect("Invalid encoding ID"),
                            opcua::types::ExtensionObject::from_message_full(&
                            opcua::types::EnumValueType { description :
                            opcua::types::LocalizedText::new("",
                            "The data length of this channel is 64 Bit."), display_name :
                            opcua::types::LocalizedText::new("", "64BIT"), value : 7i64,
                            }, ns_map.namespaces()).expect("Invalid encoding ID"),
                        ],
                    ),
                ),
                1u8,
                1u8,
                Some(vec![8u32]),
                Some(0f64),
            )
            .into(),
        references: vec![
            opcua::nodes::ImportedReference { target_id :
            opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 3010u32), type_id
            : opcua::types::NodeId::new(0u16, 46u32), is_forward : false, },
            opcua::nodes::ImportedReference { target_id : opcua::types::NodeId::new(0u16,
            78u32), type_id : opcua::types::NodeId::new(0u16, 37u32), is_forward : true,
            }, opcua::nodes::ImportedReference { target_id :
            opcua::types::NodeId::new(0u16, 68u32), type_id :
            opcua::types::NodeId::new(0u16, 40u32), is_forward : true, }
        ],
    }
}
#[allow(unused)]
fn make_variable_190(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6161u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(
                    ns_map.get_index(1u16).unwrap(),
                    "SendClockFactor",
                ),
                opcua::types::LocalizedText::new("", "SendClockFactor"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 5u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 80u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1029u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_191(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6158u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "State"),
                opcua::types::LocalizedText::new("", "State"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 3004u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            3u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 63u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1029u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_192(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6160u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "Type"),
                opcua::types::LocalizedText::new("", "Type"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 3005u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1029u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_195(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6077u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "Annotation"),
                opcua::types::LocalizedText::new("", "Annotation"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5010u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_196(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6078u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "DeviceId"),
                opcua::types::LocalizedText::new("", "DeviceId"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 5u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5010u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_197(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6079u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "DeviceSubId"),
                opcua::types::LocalizedText::new("", "DeviceSubId"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 5u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5010u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
