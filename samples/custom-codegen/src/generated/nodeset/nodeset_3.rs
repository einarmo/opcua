// This file was autogenerated from schema/Opc.Ua.Pn.NodeSet2.xml by opcua-codegen
//
// DO NOT EDIT THIS FILE

// OPCUA for Rust
// SPDX-License-Identifier: MPL-2.0
// Copyright (C) 2017-2024 Einar Omang
pub(super) fn imported_nodes<'a>(
    ns_map: &'a opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> Box<dyn Iterator<Item = opcua::nodes::ImportedItem> + 'a> {
    Box::new(
        [
            &make_variable_198 as &dyn Fn(_) -> opcua::nodes::ImportedItem,
            &make_variable_199,
            &make_variable_200,
            &make_variable_201,
            &make_variable_202,
            &make_variable_203,
            &make_variable_204,
            &make_variable_206,
            &make_variable_207,
            &make_variable_208,
            &make_variable_209,
            &make_variable_21,
            &make_variable_210,
            &make_variable_211,
            &make_variable_212,
            &make_variable_213,
            &make_variable_214,
            &make_variable_215,
            &make_variable_216,
            &make_variable_217,
            &make_variable_222,
            &make_variable_224,
            &make_variable_225,
            &make_variable_226,
            &make_variable_227,
            &make_variable_228,
            &make_variable_229,
            &make_variable_23,
            &make_variable_230,
            &make_variable_231,
            &make_variable_235,
            &make_variable_238,
            &make_variable_239,
            &make_variable_240,
            &make_variable_241,
            &make_variable_242,
            &make_variable_246,
            &make_variable_247,
            &make_variable_248,
            &make_variable_249,
            &make_variable_25,
            &make_variable_251,
            &make_variable_253,
            &make_variable_254,
            &make_variable_255,
            &make_variable_256,
            &make_variable_257,
            &make_variable_258,
            &make_variable_259,
            &make_variable_260,
            &make_variable_261,
            &make_variable_262,
            &make_variable_264,
            &make_variable_266,
            &make_variable_268,
            &make_variable_269,
            &make_variable_27,
            &make_variable_270,
            &make_variable_271,
            &make_variable_272,
            &make_variable_273,
            &make_variable_274,
            &make_variable_277,
            &make_variable_278,
            &make_variable_279,
            &make_variable_280,
            &make_variable_282,
            &make_variable_283,
            &make_variable_284,
            &make_variable_285,
            &make_variable_288,
            &make_variable_29,
            &make_variable_290,
            &make_variable_294,
            &make_variable_295,
            &make_variable_296,
            &make_variable_297,
            &make_variable_298,
            &make_variable_299,
            &make_variable_3,
            &make_variable_301,
            &make_variable_303,
            &make_variable_304,
            &make_variable_305,
            &make_variable_306,
            &make_variable_307,
            &make_variable_31,
            &make_variable_312,
            &make_variable_313,
            &make_variable_314,
            &make_variable_315,
            &make_variable_317,
            &make_variable_318,
            &make_variable_319,
            &make_variable_320,
            &make_variable_321,
            &make_variable_322,
            &make_variable_323,
            &make_variable_324,
            &make_variable_325,
        ]
        .into_iter()
        .map(|f| f(ns_map)),
    )
}
#[allow(unused)]
fn make_variable_198(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6080u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "Location"),
                opcua::types::LocalizedText::new("", "Location"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5010u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_199(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6081u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "OrderId"),
                opcua::types::LocalizedText::new("", "OrderId"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5010u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_200(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6082u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "Organization"),
                opcua::types::LocalizedText::new("", "Organization"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 5u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5010u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_201(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6083u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "SerialNumber"),
                opcua::types::LocalizedText::new("", "SerialNumber"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5010u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_202(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6084u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(
                    ns_map.get_index(1u16).unwrap(),
                    "TypeIdentification",
                ),
                opcua::types::LocalizedText::new("", "TypeIdentification"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 5u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5010u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_203(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6085u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(
                    ns_map.get_index(1u16).unwrap(),
                    "UniqueIdentifier",
                ),
                opcua::types::LocalizedText::new("", "UniqueIdentifier"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 14u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5010u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_204(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6086u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "VendorId"),
                opcua::types::LocalizedText::new("", "VendorId"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 5u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5010u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_206(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6067u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "Annotation"),
                opcua::types::LocalizedText::new("", "Annotation"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1006u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_207(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6075u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "DeviceId"),
                opcua::types::LocalizedText::new("", "DeviceId"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 5u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1006u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_208(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6076u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "DeviceSubId"),
                opcua::types::LocalizedText::new("", "DeviceSubId"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 5u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1006u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_209(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6070u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(
                    ns_map.get_index(1u16).unwrap(),
                    "HardwareRevision",
                ),
                opcua::types::LocalizedText::new("", "HardwareRevision"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1006u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 80u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_21(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
                opcua::nodes::Base::new_full(
                    opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6008u32),
                    opcua::types::NodeClass::Variable,
                    opcua::types::QualifiedName::new(0u16, "EnumValues"),
                    opcua::types::LocalizedText::new("", "EnumValues"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                opcua::types::NodeId::new(0u16, 7594u32),
                false,
                1i32,
                opcua::types::DataValue::new_now(
                    opcua::types::Variant::from(
                        vec![
                            opcua::types::ExtensionObject::from_message_full(&
                            opcua::types::EnumValueType { description :
                            opcua::types::LocalizedText::new("",
                            "The device is not online, or no information is available. The device is offline if no ARs other than possible Device Access AR’s exist."),
                            display_name : opcua::types::LocalizedText::new("",
                            "OFFLINE"), value : 0i64, }, ns_map.namespaces())
                            .expect("Invalid encoding ID"),
                            opcua::types::ExtensionObject::from_message_full(&
                            opcua::types::EnumValueType { description :
                            opcua::types::LocalizedText::new("",
                            "The device is a docking device and currently not online."),
                            display_name : opcua::types::LocalizedText::new("",
                            "OFFLINE_DOCKING"), value : 1i64, }, ns_map.namespaces())
                            .expect("Invalid encoding ID"),
                            opcua::types::ExtensionObject::from_message_full(&
                            opcua::types::EnumValueType { description :
                            opcua::types::LocalizedText::new("",
                            "The device is online. This is the case if at least one AR other than possible Device Access AR’s exists."),
                            display_name : opcua::types::LocalizedText::new("",
                            "ONLINE"), value : 2i64, }, ns_map.namespaces())
                            .expect("Invalid encoding ID"),
                            opcua::types::ExtensionObject::from_message_full(&
                            opcua::types::EnumValueType { description :
                            opcua::types::LocalizedText::new("",
                            "The device is a docking device and currently online."),
                            display_name : opcua::types::LocalizedText::new("",
                            "ONLINE_DOCKING"), value : 3i64, }, ns_map.namespaces())
                            .expect("Invalid encoding ID"),
                        ],
                    ),
                ),
                1u8,
                1u8,
                Some(vec![4u32]),
                Some(0f64),
            )
            .into(),
        references: vec![
            opcua::nodes::ImportedReference { target_id :
            opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 3003u32), type_id
            : opcua::types::NodeId::new(0u16, 46u32), is_forward : false, },
            opcua::nodes::ImportedReference { target_id : opcua::types::NodeId::new(0u16,
            78u32), type_id : opcua::types::NodeId::new(0u16, 37u32), is_forward : true,
            }, opcua::nodes::ImportedReference { target_id :
            opcua::types::NodeId::new(0u16, 68u32), type_id :
            opcua::types::NodeId::new(0u16, 40u32), is_forward : true, }
        ],
    }
}
#[allow(unused)]
fn make_variable_210(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6066u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "Location"),
                opcua::types::LocalizedText::new("", "Location"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1006u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_211(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6068u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "OrderId"),
                opcua::types::LocalizedText::new("", "OrderId"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1006u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_212(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6073u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "Organization"),
                opcua::types::LocalizedText::new("", "Organization"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 5u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1006u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_213(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6071u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "SerialNumber"),
                opcua::types::LocalizedText::new("", "SerialNumber"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1006u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_214(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6069u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(
                    ns_map.get_index(1u16).unwrap(),
                    "SoftwareRevision",
                ),
                opcua::types::LocalizedText::new("", "SoftwareRevision"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 80u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1006u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_215(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6072u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(
                    ns_map.get_index(1u16).unwrap(),
                    "TypeIdentification",
                ),
                opcua::types::LocalizedText::new("", "TypeIdentification"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 5u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1006u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_216(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6065u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(
                    ns_map.get_index(1u16).unwrap(),
                    "UniqueIdentifier",
                ),
                opcua::types::LocalizedText::new("", "UniqueIdentifier"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 14u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1006u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_217(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6074u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "VendorId"),
                opcua::types::LocalizedText::new("", "VendorId"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 5u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1006u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_222(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6204u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "Diagnosis"),
                opcua::types::LocalizedText::new("", "Diagnosis"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 3019u32),
            false,
            1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 63u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5042u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 80u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_224(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6195u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(
                    ns_map.get_index(1u16).unwrap(),
                    "HardwareRevision",
                ),
                opcua::types::LocalizedText::new("", "HardwareRevision"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5048u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_225(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6196u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "OrderId"),
                opcua::types::LocalizedText::new("", "OrderId"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5048u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_226(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6197u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "ProfileId"),
                opcua::types::LocalizedText::new("", "ProfileId"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 7u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5048u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_227(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6198u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(
                    ns_map.get_index(1u16).unwrap(),
                    "ProfileSpecificType",
                ),
                opcua::types::LocalizedText::new("", "ProfileSpecificType"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 5u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5048u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_228(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6199u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "SerialNumber"),
                opcua::types::LocalizedText::new("", "SerialNumber"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5048u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_229(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6200u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(
                    ns_map.get_index(1u16).unwrap(),
                    "SoftwareRevision",
                ),
                opcua::types::LocalizedText::new("", "SoftwareRevision"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5048u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_23(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6022u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "EnumValues"),
                opcua::types::LocalizedText::new("", "EnumValues"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 7594u32),
            false,
            1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(vec![
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: opcua::types::LocalizedText::new("", "Ready to pass packets"),
                        display_name: opcua::types::LocalizedText::new("", "UP"),
                        value: 1i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: opcua::types::LocalizedText::new("", "No packets are passed"),
                        display_name: opcua::types::LocalizedText::new("", "DOWN"),
                        value: 2i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: opcua::types::LocalizedText::new("", "In some test mode"),
                        display_name: opcua::types::LocalizedText::new("", "TESTING"),
                        value: 3i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: opcua::types::LocalizedText::new(
                            "",
                            "Status cannot be determined",
                        ),
                        display_name: opcua::types::LocalizedText::new("", "UNKNOWN"),
                        value: 4i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: opcua::types::LocalizedText::new(
                            "",
                            "In pending state waiting  for some external event",
                        ),
                        display_name: opcua::types::LocalizedText::new("", "DORMANT"),
                        value: 5i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: opcua::types::LocalizedText::new("", "Port not present"),
                        display_name: opcua::types::LocalizedText::new("", "NOT_PRESENT"),
                        value: 6i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: opcua::types::LocalizedText::new(
                            "",
                            "Down due to lower layer",
                        ),
                        display_name: opcua::types::LocalizedText::new("", "LOWER_LAYER_DOWN"),
                        value: 7i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
            ])),
            1u8,
            1u8,
            Some(vec![7u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 3017u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_230(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6201u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "VendorId"),
                opcua::types::LocalizedText::new("", "VendorId"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 5u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5048u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_231(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6202u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "Version"),
                opcua::types::LocalizedText::new("", "Version"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5048u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_235(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6203u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "Vendor"),
                opcua::types::LocalizedText::new("", "Vendor"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 80u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5042u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_238(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6217u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "GSDDescription"),
                opcua::types::LocalizedText::new("", "GSDDescription"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5033u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 80u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_239(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6216u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "GSDName"),
                opcua::types::LocalizedText::new("", "GSDName"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5033u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 80u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_240(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6182u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "IdentNumber"),
                opcua::types::LocalizedText::new("", "IdentNumber"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 7u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5033u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_241(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6181u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "Slot"),
                opcua::types::LocalizedText::new("", "Slot"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 5u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5033u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_242(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6183u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "State"),
                opcua::types::LocalizedText::new("", "State"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 3006u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 63u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5033u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_246(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6187u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "API"),
                opcua::types::LocalizedText::new("", "API"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 7u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5027u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_247(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6230u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "GSDDescription"),
                opcua::types::LocalizedText::new("", "GSDDescription"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5027u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 80u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_248(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6229u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "GSDName"),
                opcua::types::LocalizedText::new("", "GSDName"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5027u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 80u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_249(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6189u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "IdentNumber"),
                opcua::types::LocalizedText::new("", "IdentNumber"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 7u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5027u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_25(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
                opcua::nodes::Base::new_full(
                    opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6011u32),
                    opcua::types::NodeClass::Variable,
                    opcua::types::QualifiedName::new(0u16, "EnumValues"),
                    opcua::types::LocalizedText::new("", "EnumValues"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                opcua::types::NodeId::new(0u16, 7594u32),
                false,
                1i32,
                opcua::types::DataValue::new_now(
                    opcua::types::Variant::from(
                        vec![
                            opcua::types::ExtensionObject::from_message_full(&
                            opcua::types::EnumValueType { description :
                            opcua::types::LocalizedText::new("",
                            "For example module not plugged"), display_name :
                            opcua::types::LocalizedText::new("", "NO_MODULE"), value :
                            0i64, }, ns_map.namespaces()).expect("Invalid encoding ID"),
                            opcua::types::ExtensionObject::from_message_full(&
                            opcua::types::EnumValueType { description :
                            opcua::types::LocalizedText::new("",
                            "For example ModuleIdentNumber wrong"), display_name :
                            opcua::types::LocalizedText::new("", "WRONG_MODULE"), value :
                            1i64, }, ns_map.namespaces()).expect("Invalid encoding ID"),
                            opcua::types::ExtensionObject::from_message_full(&
                            opcua::types::EnumValueType { description :
                            opcua::types::LocalizedText::new("",
                            "Module is okay but at least one submodule is locked, wrong or missing"),
                            display_name : opcua::types::LocalizedText::new("",
                            "PROPER_MODULE"), value : 2i64, }, ns_map.namespaces())
                            .expect("Invalid encoding ID"),
                            opcua::types::ExtensionObject::from_message_full(&
                            opcua::types::EnumValueType { description :
                            opcua::types::LocalizedText::new("",
                            "Module is not the same as requested – but the IO device was able to adapt by its own knowledge"),
                            display_name : opcua::types::LocalizedText::new("",
                            "SUBSTITUTE"), value : 3i64, }, ns_map.namespaces())
                            .expect("Invalid encoding ID"),
                            opcua::types::ExtensionObject::from_message_full(&
                            opcua::types::EnumValueType { description :
                            opcua::types::LocalizedText::new("", "Default state"),
                            display_name : opcua::types::LocalizedText::new("", "OK"),
                            value : 4i64, }, ns_map.namespaces())
                            .expect("Invalid encoding ID"),
                        ],
                    ),
                ),
                1u8,
                1u8,
                Some(vec![5u32]),
                Some(0f64),
            )
            .into(),
        references: vec![
            opcua::nodes::ImportedReference { target_id :
            opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 3006u32), type_id
            : opcua::types::NodeId::new(0u16, 46u32), is_forward : false, },
            opcua::nodes::ImportedReference { target_id : opcua::types::NodeId::new(0u16,
            78u32), type_id : opcua::types::NodeId::new(0u16, 37u32), is_forward : true,
            }, opcua::nodes::ImportedReference { target_id :
            opcua::types::NodeId::new(0u16, 68u32), type_id :
            opcua::types::NodeId::new(0u16, 40u32), is_forward : true, }
        ],
    }
}
#[allow(unused)]
fn make_variable_251(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6188u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "Subslot"),
                opcua::types::LocalizedText::new("", "Subslot"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 5u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5027u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_253(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6058u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "Date"),
                opcua::types::LocalizedText::new("", "Date"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 13u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1005u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 80u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_254(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6059u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "Descriptor"),
                opcua::types::LocalizedText::new("", "Descriptor"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1005u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 80u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_255(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6050u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(
                    ns_map.get_index(1u16).unwrap(),
                    "HardwareRevision",
                ),
                opcua::types::LocalizedText::new("", "HardwareRevision"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1005u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_256(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6061u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "IM5"),
                opcua::types::LocalizedText::new("", "IM5"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 3020u32),
            false,
            1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1005u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 80u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_257(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6055u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "IMSupported"),
                opcua::types::LocalizedText::new("", "IMSupported"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 5u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1005u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 80u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_258(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6047u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "OrderId"),
                opcua::types::LocalizedText::new("", "OrderId"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1005u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_259(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6051u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "ProfileId"),
                opcua::types::LocalizedText::new("", "ProfileId"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 7u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1005u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_260(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6052u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(
                    ns_map.get_index(1u16).unwrap(),
                    "ProfileSpecificType",
                ),
                opcua::types::LocalizedText::new("", "ProfileSpecificType"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 5u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1005u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_261(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6054u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(
                    ns_map.get_index(1u16).unwrap(),
                    "RevisionCounter",
                ),
                opcua::types::LocalizedText::new("", "RevisionCounter"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 5u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 80u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1005u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_262(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6048u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "SerialNumber"),
                opcua::types::LocalizedText::new("", "SerialNumber"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1005u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_264(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6063u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "InputArguments"),
                opcua::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(vec![
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::Argument {
                        array_dimensions: None,
                        data_type: opcua::types::NodeId::new(0u16, 13u32),
                        description: opcua::types::LocalizedText::new(
                            "",
                            "New I&M2 | IM_Date to be written remanent to the device.",
                        ),
                        name: "Date".into(),
                        value_rank: -1i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
            ])),
            1u8,
            1u8,
            Some(vec![1u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 7002u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_266(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6064u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "InputArguments"),
                opcua::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(vec![
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::Argument {
                        array_dimensions: None,
                        data_type: opcua::types::NodeId::new(0u16, 12u32),
                        description: opcua::types::LocalizedText::new(
                            "",
                            "New I&M3 | IM_Descriptor to be written remanent to the device.",
                        ),
                        name: "Descriptor".into(),
                        value_rank: -1i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
            ])),
            1u8,
            1u8,
            Some(vec![1u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 7003u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_268(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
                opcua::nodes::Base::new_full(
                    opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6062u32),
                    opcua::types::NodeClass::Variable,
                    opcua::types::QualifiedName::new(0u16, "InputArguments"),
                    opcua::types::LocalizedText::new("", "InputArguments"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                opcua::types::NodeId::new(0u16, 296u32),
                false,
                1i32,
                opcua::types::DataValue::new_now(
                    opcua::types::Variant::from(
                        vec![
                            opcua::types::ExtensionObject::from_message_full(&
                            opcua::types::Argument { array_dimensions : None, data_type :
                            opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(),
                            3021u32), description : opcua::types::LocalizedText::new("",
                            "If 1, Tag_Function shall be written, If 2, Tag_Location shall be written, if 3 both."),
                            name : "Tag_Selector".into(), value_rank : - 1i32, }, ns_map
                            .namespaces()).expect("Invalid encoding ID"),
                            opcua::types::ExtensionObject::from_message_full(&
                            opcua::types::Argument { array_dimensions : None, data_type :
                            opcua::types::NodeId::new(0u16, 12u32), description :
                            opcua::types::LocalizedText::new("",
                            "String containing the new I&M1 | IM_Tag_Function to be written remanent to the device."),
                            name : "Tag_Function".into(), value_rank : - 1i32, }, ns_map
                            .namespaces()).expect("Invalid encoding ID"),
                            opcua::types::ExtensionObject::from_message_full(&
                            opcua::types::Argument { array_dimensions : None, data_type :
                            opcua::types::NodeId::new(0u16, 12u32), description :
                            opcua::types::LocalizedText::new("",
                            "String containing the new I&M1 | IM_Tag_Location to be written remanent to the device."),
                            name : "Tag_Location".into(), value_rank : - 1i32, }, ns_map
                            .namespaces()).expect("Invalid encoding ID"),
                        ],
                    ),
                ),
                1u8,
                1u8,
                Some(vec![3u32]),
                Some(0f64),
            )
            .into(),
        references: vec![
            opcua::nodes::ImportedReference { target_id : opcua::types::NodeId::new(0u16,
            78u32), type_id : opcua::types::NodeId::new(0u16, 37u32), is_forward : true,
            }, opcua::nodes::ImportedReference { target_id :
            opcua::types::NodeId::new(0u16, 68u32), type_id :
            opcua::types::NodeId::new(0u16, 40u32), is_forward : true, },
            opcua::nodes::ImportedReference { target_id :
            opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 7001u32), type_id
            : opcua::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_269(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6060u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "Signature"),
                opcua::types::LocalizedText::new("", "Signature"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 15u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 80u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1005u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_27(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
                opcua::nodes::Base::new_full(
                    opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6023u32),
                    opcua::types::NodeClass::Variable,
                    opcua::types::QualifiedName::new(0u16, "EnumValues"),
                    opcua::types::LocalizedText::new("", "EnumValues"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                opcua::types::NodeId::new(0u16, 7594u32),
                false,
                1i32,
                opcua::types::DataValue::new_now(
                    opcua::types::Variant::from(
                        vec![
                            opcua::types::ExtensionObject::from_message_full(&
                            opcua::types::EnumValueType { description :
                            opcua::types::LocalizedText::new("",
                            "Status cannot be determined"), display_name :
                            opcua::types::LocalizedText::new("", "UNKNOWN"), value :
                            0i64, }, ns_map.namespaces()).expect("Invalid encoding ID"),
                            opcua::types::ExtensionObject::from_message_full(&
                            opcua::types::EnumValueType { description :
                            opcua::types::LocalizedText::new("",
                            "The port is administratively disabled and discarding frames"),
                            display_name : opcua::types::LocalizedText::new("",
                            "DISABLED_DISCARDING"), value : 1i64, }, ns_map.namespaces())
                            .expect("Invalid encoding ID"),
                            opcua::types::ExtensionObject::from_message_full(&
                            opcua::types::EnumValueType { description :
                            opcua::types::LocalizedText::new("",
                            "The port blocks incoming frames"), display_name :
                            opcua::types::LocalizedText::new("", "BLOCKING"), value :
                            2i64, }, ns_map.namespaces()).expect("Invalid encoding ID"),
                            opcua::types::ExtensionObject::from_message_full(&
                            opcua::types::EnumValueType { description :
                            opcua::types::LocalizedText::new("",
                            "The port is listening to and sending BPDUs (Bridge Protocol Data Units)."),
                            display_name : opcua::types::LocalizedText::new("",
                            "LISTENING"), value : 3i64, }, ns_map.namespaces())
                            .expect("Invalid encoding ID"),
                            opcua::types::ExtensionObject::from_message_full(&
                            opcua::types::EnumValueType { description :
                            opcua::types::LocalizedText::new("", ""), display_name :
                            opcua::types::LocalizedText::new("", "LEARNING"), value :
                            4i64, }, ns_map.namespaces()).expect("Invalid encoding ID"),
                            opcua::types::ExtensionObject::from_message_full(&
                            opcua::types::EnumValueType { description :
                            opcua::types::LocalizedText::new("", ""), display_name :
                            opcua::types::LocalizedText::new("", "FORWARDING"), value :
                            5i64, }, ns_map.namespaces()).expect("Invalid encoding ID"),
                            opcua::types::ExtensionObject::from_message_full(&
                            opcua::types::EnumValueType { description :
                            opcua::types::LocalizedText::new("", ""), display_name :
                            opcua::types::LocalizedText::new("", "BROKEN"), value : 6i64,
                            }, ns_map.namespaces()).expect("Invalid encoding ID"),
                        ],
                    ),
                ),
                1u8,
                1u8,
                Some(vec![7u32]),
                Some(0f64),
            )
            .into(),
        references: vec![
            opcua::nodes::ImportedReference { target_id :
            opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 3018u32), type_id
            : opcua::types::NodeId::new(0u16, 46u32), is_forward : false, },
            opcua::nodes::ImportedReference { target_id : opcua::types::NodeId::new(0u16,
            78u32), type_id : opcua::types::NodeId::new(0u16, 37u32), is_forward : true,
            }, opcua::nodes::ImportedReference { target_id :
            opcua::types::NodeId::new(0u16, 68u32), type_id :
            opcua::types::NodeId::new(0u16, 40u32), is_forward : true, }
        ],
    }
}
#[allow(unused)]
fn make_variable_270(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6049u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(
                    ns_map.get_index(1u16).unwrap(),
                    "SoftwareRevision",
                ),
                opcua::types::LocalizedText::new("", "SoftwareRevision"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1005u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_271(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6056u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "TagFunction"),
                opcua::types::LocalizedText::new("", "TagFunction"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 80u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1005u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_272(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6057u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "TagLocation"),
                opcua::types::LocalizedText::new("", "TagLocation"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 80u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1005u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_273(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6046u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "VendorId"),
                opcua::types::LocalizedText::new("", "VendorId"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 5u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1005u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_274(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6053u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "Version"),
                opcua::types::LocalizedText::new("", "Version"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1005u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_277(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6193u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "DeviceId"),
                opcua::types::LocalizedText::new("", "DeviceId"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 5u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5012u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_278(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6232u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "DeviceInstance"),
                opcua::types::LocalizedText::new("", "DeviceInstance"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 5u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5012u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 80u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_279(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6191u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "DeviceRole"),
                opcua::types::LocalizedText::new("", "DeviceRole"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 3002u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5012u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_280(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6231u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "DeviceVendor"),
                opcua::types::LocalizedText::new("", "DeviceVendor"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5012u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 80u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_282(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6235u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "MacAddress"),
                opcua::types::LocalizedText::new("", "MacAddress"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 3u32),
            false,
            1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            Some(vec![6u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 63u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5057u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_283(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6190u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "NameOfStation"),
                opcua::types::LocalizedText::new("", "NameOfStation"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5012u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_284(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6234u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "OEMDeviceId"),
                opcua::types::LocalizedText::new("", "OEMDeviceId"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 5u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5012u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 80u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_285(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6233u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "OEMVendorId"),
                opcua::types::LocalizedText::new("", "OEMVendorId"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 5u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5012u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 80u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_288(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
                opcua::nodes::Base::new_full(
                    opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6236u32),
                    opcua::types::NodeClass::Variable,
                    opcua::types::QualifiedName::new(0u16, "InputArguments"),
                    opcua::types::LocalizedText::new("", "InputArguments"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                opcua::types::NodeId::new(0u16, 296u32),
                false,
                1i32,
                opcua::types::DataValue::new_now(
                    opcua::types::Variant::from(
                        vec![
                            opcua::types::ExtensionObject::from_message_full(&
                            opcua::types::Argument { array_dimensions : None, data_type :
                            opcua::types::NodeId::new(0u16, 12u32), description :
                            opcua::types::LocalizedText::new("",
                            "String containing the new NameOfStation to be written remanent to the device. The maximum length shall be limited to 240 characters (See [PN Protocol] for details)."),
                            name : "NameOfStation".into(), value_rank : - 1i32, }, ns_map
                            .namespaces()).expect("Invalid encoding ID"),
                        ],
                    ),
                ),
                1u8,
                1u8,
                Some(vec![1u32]),
                Some(0f64),
            )
            .into(),
        references: vec![
            opcua::nodes::ImportedReference { target_id : opcua::types::NodeId::new(0u16,
            78u32), type_id : opcua::types::NodeId::new(0u16, 37u32), is_forward : true,
            }, opcua::nodes::ImportedReference { target_id :
            opcua::types::NodeId::new(0u16, 68u32), type_id :
            opcua::types::NodeId::new(0u16, 40u32), is_forward : true, },
            opcua::nodes::ImportedReference { target_id :
            opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 7007u32), type_id
            : opcua::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_29(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6012u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "EnumValues"),
                opcua::types::LocalizedText::new("", "EnumValues"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 7594u32),
            false,
            1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(vec![
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: opcua::types::LocalizedText::new("", ""),
                        display_name: opcua::types::LocalizedText::new("", "NO_ADD_INFO"),
                        value: 0i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: opcua::types::LocalizedText::new(
                            "",
                            "This Submodule is not available for takeover by IOSAR.",
                        ),
                        display_name: opcua::types::LocalizedText::new("", "TAKEOVER_NOT_ALLOWED"),
                        value: 1i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
            ])),
            1u8,
            1u8,
            Some(vec![2u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 3007u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_290(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6192u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "VendorId"),
                opcua::types::LocalizedText::new("", "VendorId"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 5u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5012u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_294(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6105u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "InDiscards"),
                opcua::types::LocalizedText::new("", "InDiscards"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 7u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 63u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1012u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 80u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_295(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6107u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "InErrors"),
                opcua::types::LocalizedText::new("", "InErrors"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 7u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 63u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1012u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 80u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_296(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6103u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "InOctets"),
                opcua::types::LocalizedText::new("", "InOctets"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 7u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 63u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1012u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 80u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_297(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6106u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "OutDiscards"),
                opcua::types::LocalizedText::new("", "OutDiscards"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 7u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 63u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 80u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1012u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_298(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6108u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "OutErrors"),
                opcua::types::LocalizedText::new("", "OutErrors"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 7u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 63u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 80u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1012u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_299(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6104u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "OutOctets"),
                opcua::types::LocalizedText::new("", "OutOctets"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 7u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 63u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 80u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1012u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
                opcua::nodes::Base::new_full(
                    opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6009u32),
                    opcua::types::NodeClass::Variable,
                    opcua::types::QualifiedName::new(0u16, "EnumValues"),
                    opcua::types::LocalizedText::new("", "EnumValues"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                opcua::types::NodeId::new(0u16, 7594u32),
                false,
                1i32,
                opcua::types::DataValue::new_now(
                    opcua::types::Variant::from(
                        vec![
                            opcua::types::ExtensionObject::from_message_full(&
                            opcua::types::EnumValueType { description :
                            opcua::types::LocalizedText::new("",
                            "The AR connection to the device is established"),
                            display_name : opcua::types::LocalizedText::new("",
                            "CONNECTED"), value : 0i64, }, ns_map.namespaces())
                            .expect("Invalid encoding ID"),
                            opcua::types::ExtensionObject::from_message_full(&
                            opcua::types::EnumValueType { description :
                            opcua::types::LocalizedText::new("",
                            "The AR connection to the device is not established"),
                            display_name : opcua::types::LocalizedText::new("",
                            "UNCONNECTED"), value : 1i64, }, ns_map.namespaces())
                            .expect("Invalid encoding ID"),
                            opcua::types::ExtensionObject::from_message_full(&
                            opcua::types::EnumValueType { description :
                            opcua::types::LocalizedText::new("",
                            "The AR connection to the device is not established because the device is not available in the network"),
                            display_name : opcua::types::LocalizedText::new("",
                            "UNCONNECTED_ERR_DEVICE_NOT_FOUND"), value : 2i64, }, ns_map
                            .namespaces()).expect("Invalid encoding ID"),
                            opcua::types::ExtensionObject::from_message_full(&
                            opcua::types::EnumValueType { description :
                            opcua::types::LocalizedText::new("",
                            "The AR connection to the device is not established because the IP address of the device exists multiple times"),
                            display_name : opcua::types::LocalizedText::new("",
                            "UNCONNECTED_ERR_DUPLICATE_IP"), value : 3i64, }, ns_map
                            .namespaces()).expect("Invalid encoding ID"),
                            opcua::types::ExtensionObject::from_message_full(&
                            opcua::types::EnumValueType { description :
                            opcua::types::LocalizedText::new("",
                            "The AR connection to the device is not established because the Name of Station of the device exists multiple times"),
                            display_name : opcua::types::LocalizedText::new("",
                            "UNCONNECTED_ERR_DUPLICATE_NOS"), value : 4i64, }, ns_map
                            .namespaces()).expect("Invalid encoding ID"),
                        ],
                    ),
                ),
                1u8,
                1u8,
                Some(vec![5u32]),
                Some(0f64),
            )
            .into(),
        references: vec![
            opcua::nodes::ImportedReference { target_id :
            opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 3004u32), type_id
            : opcua::types::NodeId::new(0u16, 46u32), is_forward : false, },
            opcua::nodes::ImportedReference { target_id : opcua::types::NodeId::new(0u16,
            78u32), type_id : opcua::types::NodeId::new(0u16, 37u32), is_forward : true,
            }, opcua::nodes::ImportedReference { target_id :
            opcua::types::NodeId::new(0u16, 68u32), type_id :
            opcua::types::NodeId::new(0u16, 40u32), is_forward : true, }
        ],
    }
}
#[allow(unused)]
fn make_variable_301(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6100u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "CableDelay"),
                opcua::types::LocalizedText::new("", "CableDelay"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 7u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 63u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1010u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 80u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_303(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6102u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "IsWireless"),
                opcua::types::LocalizedText::new("", "IsWireless"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 1u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 63u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1010u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 80u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_304(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6096u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "LinkState"),
                opcua::types::LocalizedText::new("", "LinkState"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 3017u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 63u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1010u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 80u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_305(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6099u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "MAUType"),
                opcua::types::LocalizedText::new("", "MAUType"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 5u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 63u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1010u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 80u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_306(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6097u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "PortState"),
                opcua::types::LocalizedText::new("", "PortState"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 3018u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 63u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 80u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1010u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_307(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6101u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "PowerBudget"),
                opcua::types::LocalizedText::new("", "PowerBudget"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 7u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 63u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 80u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1010u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_31(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
                opcua::nodes::Base::new_full(
                    opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6013u32),
                    opcua::types::NodeClass::Variable,
                    opcua::types::QualifiedName::new(0u16, "EnumValues"),
                    opcua::types::LocalizedText::new("", "EnumValues"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                opcua::types::NodeId::new(0u16, 7594u32),
                false,
                1i32,
                opcua::types::DataValue::new_now(
                    opcua::types::Variant::from(
                        vec![
                            opcua::types::ExtensionObject::from_message_full(&
                            opcua::types::EnumValueType { description :
                            opcua::types::LocalizedText::new("",
                            "This AR is owner of the submodule"), display_name :
                            opcua::types::LocalizedText::new("", "OWN"), value : 0i64, },
                            ns_map.namespaces()).expect("Invalid encoding ID"),
                            opcua::types::ExtensionObject::from_message_full(&
                            opcua::types::EnumValueType { description :
                            opcua::types::LocalizedText::new("",
                            "This AR is owner of the submodule but it is blocked. For example parameter checking pending"),
                            display_name : opcua::types::LocalizedText::new("",
                            "APPLICATION_READY_PENDING"), value : 128i64, }, ns_map
                            .namespaces()).expect("Invalid encoding ID"),
                            opcua::types::ExtensionObject::from_message_full(&
                            opcua::types::EnumValueType { description :
                            opcua::types::LocalizedText::new("",
                            "This AR is not owner of the submodule. It is blocked by superordinated means"),
                            display_name : opcua::types::LocalizedText::new("",
                            "SUPERORDINATED_LOCKED"), value : 256i64, }, ns_map
                            .namespaces()).expect("Invalid encoding ID"),
                            opcua::types::ExtensionObject::from_message_full(&
                            opcua::types::EnumValueType { description :
                            opcua::types::LocalizedText::new("",
                            "This AR is not owner of the submodule. It is owned by another IOAR"),
                            display_name : opcua::types::LocalizedText::new("",
                            "LOCKED_BY_IO_CONTROLLER"), value : 384i64, }, ns_map
                            .namespaces()).expect("Invalid encoding ID"),
                            opcua::types::ExtensionObject::from_message_full(&
                            opcua::types::EnumValueType { description :
                            opcua::types::LocalizedText::new("",
                            "This AR is not owner of the submodule. It is owned by another IOSAR"),
                            display_name : opcua::types::LocalizedText::new("",
                            "LOCKED_BY_IO_SUPERVISOR"), value : 512i64, }, ns_map
                            .namespaces()).expect("Invalid encoding ID"),
                        ],
                    ),
                ),
                1u8,
                1u8,
                Some(vec![5u32]),
                Some(0f64),
            )
            .into(),
        references: vec![
            opcua::nodes::ImportedReference { target_id :
            opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 3008u32), type_id
            : opcua::types::NodeId::new(0u16, 46u32), is_forward : false, },
            opcua::nodes::ImportedReference { target_id : opcua::types::NodeId::new(0u16,
            78u32), type_id : opcua::types::NodeId::new(0u16, 37u32), is_forward : true,
            }, opcua::nodes::ImportedReference { target_id :
            opcua::types::NodeId::new(0u16, 68u32), type_id :
            opcua::types::NodeId::new(0u16, 40u32), is_forward : true, }
        ],
    }
}
#[allow(unused)]
fn make_variable_312(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6215u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "Diagnosis"),
                opcua::types::LocalizedText::new("", "Diagnosis"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 3019u32),
            false,
            1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 63u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5031u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 80u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_313(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6206u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "GSDDescription"),
                opcua::types::LocalizedText::new("", "GSDDescription"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5031u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 80u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_314(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6205u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "GSDName"),
                opcua::types::LocalizedText::new("", "GSDName"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5031u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 80u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_315(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6180u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "IdentNumber"),
                opcua::types::LocalizedText::new("", "IdentNumber"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 7u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5031u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_317(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6207u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(
                    ns_map.get_index(1u16).unwrap(),
                    "HardwareRevision",
                ),
                opcua::types::LocalizedText::new("", "HardwareRevision"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5051u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_318(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6208u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "OrderId"),
                opcua::types::LocalizedText::new("", "OrderId"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5051u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_319(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6209u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "ProfileId"),
                opcua::types::LocalizedText::new("", "ProfileId"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 7u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5051u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_320(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6210u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(
                    ns_map.get_index(1u16).unwrap(),
                    "ProfileSpecificType",
                ),
                opcua::types::LocalizedText::new("", "ProfileSpecificType"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 5u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5051u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_321(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6211u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "SerialNumber"),
                opcua::types::LocalizedText::new("", "SerialNumber"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5051u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_322(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6212u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(
                    ns_map.get_index(1u16).unwrap(),
                    "SoftwareRevision",
                ),
                opcua::types::LocalizedText::new("", "SoftwareRevision"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5051u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_323(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6213u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "VendorId"),
                opcua::types::LocalizedText::new("", "VendorId"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 5u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5051u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_324(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6214u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "Version"),
                opcua::types::LocalizedText::new("", "Version"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5051u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_325(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6098u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "Slot"),
                opcua::types::LocalizedText::new("", "Slot"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 5u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5031u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
