// This file was autogenerated from schema/Opc.Ua.Pn.NodeSet2.xml by opcua-codegen
//
// DO NOT EDIT THIS FILE

// OPCUA for Rust
// SPDX-License-Identifier: MPL-2.0
// Copyright (C) 2017-2024 Einar Omang
pub(super) fn imported_nodes<'a>(
    ns_map: &'a opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> Box<dyn Iterator<Item = opcua::nodes::ImportedItem> + 'a> {
    Box::new(
        [
            &make_variable_33 as &dyn Fn(_) -> opcua::nodes::ImportedItem,
            &make_variable_330,
            &make_variable_331,
            &make_variable_332,
            &make_variable_333,
            &make_variable_334,
            &make_variable_336,
            &make_variable_337,
            &make_variable_338,
            &make_variable_339,
            &make_variable_340,
            &make_variable_341,
            &make_variable_342,
            &make_variable_343,
            &make_variable_344,
            &make_variable_346,
            &make_variable_347,
            &make_variable_348,
            &make_variable_349,
            &make_variable_35,
            &make_variable_350,
            &make_variable_351,
            &make_variable_352,
            &make_variable_354,
            &make_variable_355,
            &make_variable_356,
            &make_variable_357,
            &make_variable_358,
            &make_variable_359,
            &make_variable_360,
            &make_variable_37,
            &make_variable_38,
            &make_variable_40,
            &make_variable_41,
            &make_variable_42,
            &make_variable_43,
            &make_variable_44,
            &make_variable_45,
            &make_variable_46,
            &make_variable_47,
            &make_variable_5,
            &make_variable_64,
            &make_variable_65,
            &make_variable_66,
            &make_variable_67,
            &make_variable_68,
            &make_variable_69,
            &make_variable_7,
            &make_variable_70,
            &make_variable_71,
            &make_variable_72,
            &make_variable_73,
            &make_variable_74,
            &make_variable_75,
            &make_variable_76,
            &make_variable_77,
            &make_variable_78,
            &make_variable_79,
            &make_variable_81,
            &make_variable_82,
            &make_variable_89,
            &make_variable_9,
            &make_variable_91,
            &make_variable_92,
            &make_variable_93,
            &make_variable_94,
            &make_variable_95,
            &make_variable_96,
            &make_variable_97,
            &make_variable_98,
        ]
        .into_iter()
        .map(|f| f(ns_map)),
    )
}
#[allow(unused)]
fn make_variable_33(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6014u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "EnumValues"),
                opcua::types::LocalizedText::new("", "EnumValues"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 7594u32),
            false,
            1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(vec![
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: opcua::types::LocalizedText::new("", "OK"),
                        display_name: opcua::types::LocalizedText::new("", "OK"),
                        value: 0i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: opcua::types::LocalizedText::new("", "Substitute (SU)"),
                        display_name: opcua::types::LocalizedText::new("", "SUBSTITUTE"),
                        value: 2048i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: opcua::types::LocalizedText::new("", "Wrong (WR)"),
                        display_name: opcua::types::LocalizedText::new("", "WRONG"),
                        value: 4096i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: opcua::types::LocalizedText::new("", "NoSubmodule (NO)"),
                        display_name: opcua::types::LocalizedText::new("", "NO_SUBMODULE"),
                        value: 6144i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
            ])),
            1u8,
            1u8,
            Some(vec![4u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 3009u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_330(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6184u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "API"),
                opcua::types::LocalizedText::new("", "API"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 7u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5025u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_331(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6228u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "Diagnosis"),
                opcua::types::LocalizedText::new("", "Diagnosis"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 3019u32),
            false,
            1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 63u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5025u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 80u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_332(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6219u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "GSDDescription"),
                opcua::types::LocalizedText::new("", "GSDDescription"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5025u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 80u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_333(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6218u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "GSDName"),
                opcua::types::LocalizedText::new("", "GSDName"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5025u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 80u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_334(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6186u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "IdentNumber"),
                opcua::types::LocalizedText::new("", "IdentNumber"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 7u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5025u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_336(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6220u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(
                    ns_map.get_index(1u16).unwrap(),
                    "HardwareRevision",
                ),
                opcua::types::LocalizedText::new("", "HardwareRevision"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5054u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_337(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6221u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "OrderId"),
                opcua::types::LocalizedText::new("", "OrderId"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5054u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_338(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6222u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "ProfileId"),
                opcua::types::LocalizedText::new("", "ProfileId"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 7u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5054u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_339(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6223u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(
                    ns_map.get_index(1u16).unwrap(),
                    "ProfileSpecificType",
                ),
                opcua::types::LocalizedText::new("", "ProfileSpecificType"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 5u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5054u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_340(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6224u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "SerialNumber"),
                opcua::types::LocalizedText::new("", "SerialNumber"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5054u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_341(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6225u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(
                    ns_map.get_index(1u16).unwrap(),
                    "SoftwareRevision",
                ),
                opcua::types::LocalizedText::new("", "SoftwareRevision"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5054u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_342(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6226u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "VendorId"),
                opcua::types::LocalizedText::new("", "VendorId"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 5u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5054u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_343(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6227u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "Version"),
                opcua::types::LocalizedText::new("", "Version"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5054u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_344(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6185u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "Subslot"),
                opcua::types::LocalizedText::new("", "Subslot"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 5u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5025u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_346(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6123u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "AddInfo"),
                opcua::types::LocalizedText::new("", "AddInfo"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 3007u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1018u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 63u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 80u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_347(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6128u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "ARInfo"),
                opcua::types::LocalizedText::new("", "ARInfo"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 3008u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1018u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 63u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 80u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_348(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6127u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "DiagInfo"),
                opcua::types::LocalizedText::new("", "DiagInfo"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 1u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 63u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1018u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 80u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_349(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6129u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "IdentInfo"),
                opcua::types::LocalizedText::new("", "IdentInfo"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 3009u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 63u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1018u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 80u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_35(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6001u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "OptionSetValues"),
                opcua::types::LocalizedText::new("", "OptionSetValues"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 21u32),
            false,
            1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(vec![
                opcua::types::LocalizedText::new("", "IO_DEVICE"),
                opcua::types::LocalizedText::new("", "IO_CONTROLLER"),
                opcua::types::LocalizedText::new("", "IO_MULTIDEVICE"),
                opcua::types::LocalizedText::new("", "IO_SUPERVISOR"),
                opcua::types::LocalizedText::new("", "IO_CIM"),
            ])),
            1u8,
            1u8,
            Some(vec![5u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 3002u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_350(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6126u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(
                    ns_map.get_index(1u16).unwrap(),
                    "MaintenanceDemanded",
                ),
                opcua::types::LocalizedText::new("", "MaintenanceDemanded"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 1u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 63u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1018u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 80u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_351(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6125u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(
                    ns_map.get_index(1u16).unwrap(),
                    "MaintenanceRequired",
                ),
                opcua::types::LocalizedText::new("", "MaintenanceRequired"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 1u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 63u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1018u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 80u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_352(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6124u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "QualifiedInfo"),
                opcua::types::LocalizedText::new("", "QualifiedInfo"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 1u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 63u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 80u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1018u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_354(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6116u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "IsNamespaceSubset"),
                opcua::types::LocalizedText::new("", "IsNamespaceSubset"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 1u32),
            false,
            -1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(false)),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5022u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_355(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6117u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "NamespacePublicationDate"),
                opcua::types::LocalizedText::new("", "NamespacePublicationDate"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 13u32),
            false,
            -1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(
                opcua::types::DateTimeUtc::from_timestamp_micros(1618272000000000i64).unwrap(),
            )),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5022u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_356(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6118u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "NamespaceUri"),
                opcua::types::LocalizedText::new("", "NamespaceUri"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(
                "http://opcfoundation.org/UA/PROFINET/",
            )),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5022u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_357(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6119u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "NamespaceVersion"),
                opcua::types::LocalizedText::new("", "NamespaceVersion"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from("1.0.1")),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5022u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_358(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6120u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "StaticNodeIdTypes"),
                opcua::types::LocalizedText::new("", "StaticNodeIdTypes"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 256u32),
            false,
            1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(vec![0i32])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5022u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_359(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6121u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "StaticNumericNodeIdRange"),
                opcua::types::LocalizedText::new("", "StaticNumericNodeIdRange"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 291u32),
            false,
            1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(vec!["1:2147483647"])),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5022u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_360(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6122u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "StaticStringNodeIdPattern"),
                opcua::types::LocalizedText::new("", "StaticStringNodeIdPattern"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from("")),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5022u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_37(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6042u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(
                    ns_map.get_index(1u16).unwrap(),
                    "PnDeviceDiagnosisDataType",
                ),
                opcua::types::LocalizedText::new("", "PnDeviceDiagnosisDataType"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(
                "PnDeviceDiagnosisDataType",
            )),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 69u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5004u32),
                type_id: opcua::types::NodeId::new(0u16, 39u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6002u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_38(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6043u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(
                    ns_map.get_index(1u16).unwrap(),
                    "PnDeviceDiagnosisDataType",
                ),
                opcua::types::LocalizedText::new("", "PnDeviceDiagnosisDataType"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(
                "//xs:element[@name='PnDeviceDiagnosisDataType']",
            )),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 69u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5005u32),
                type_id: opcua::types::NodeId::new(0u16, 39u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6004u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_40(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6044u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "PnIM5DataType"),
                opcua::types::LocalizedText::new("", "PnIM5DataType"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from("PnIM5DataType")),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 69u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5007u32),
                type_id: opcua::types::NodeId::new(0u16, 39u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6002u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_41(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6045u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "PnIM5DataType"),
                opcua::types::LocalizedText::new("", "PnIM5DataType"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(
                "//xs:element[@name='PnIM5DataType']",
            )),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 69u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5008u32),
                type_id: opcua::types::NodeId::new(0u16, 39u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6004u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_42(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
                opcua::nodes::Base::new_full(
                    opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6002u32),
                    opcua::types::NodeClass::Variable,
                    opcua::types::QualifiedName::new(
                        ns_map.get_index(1u16).unwrap(),
                        "TypeDictionary",
                    ),
                    opcua::types::LocalizedText::new("", "TypeDictionary"),
                    Some(
                        opcua::types::LocalizedText::new(
                            "",
                            "Collects the data type descriptions of http://opcfoundation.org/UA/PROFINET/",
                        ),
                    ),
                    Some(0u32),
                    Some(0u32),
                ),
                opcua::types::NodeId::new(0u16, 15u32),
                false,
                -1i32,
                opcua::types::DataValue::new_now(
                    opcua::types::Variant::from(
                        opcua::types::ByteString::from_base64(
                                "PG9wYzpUeXBlRGljdGlvbmFyeSB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZ        W1hLWluc3RhbmNlIiB4bWxuczp0bnM9Imh0dHA6Ly9vcGNmb3VuZGF0aW9uLm9yZy9VQS9QU        k9GSU5FVC8iIERlZmF1bHRCeXRlT3JkZXI9IkxpdHRsZUVuZGlhbiIgeG1sbnM6b3BjPSJod        HRwOi8vb3BjZm91bmRhdGlvbi5vcmcvQmluYXJ5U2NoZW1hLyIgeG1sbnM6dWE9Imh0dHA6L        y9vcGNmb3VuZGF0aW9uLm9yZy9VQS8iIFRhcmdldE5hbWVzcGFjZT0iaHR0cDovL29wY2Zvd        W5kYXRpb24ub3JnL1VBL1BST0ZJTkVULyI+CiA8b3BjOkltcG9ydCBOYW1lc3BhY2U9Imh0d        HA6Ly9vcGNmb3VuZGF0aW9uLm9yZy9VQS8iLz4KIDxvcGM6U3RydWN0dXJlZFR5cGUgQmFzZ        VR5cGU9InVhOk9wdGlvblNldCIgTmFtZT0iUG5EZXZpY2VSb2xlT3B0aW9uU2V0Ij4KICA8b        3BjOkZpZWxkIFR5cGVOYW1lPSJvcGM6Qnl0ZVN0cmluZyIgTmFtZT0iVmFsdWUiLz4KICA8b        3BjOkZpZWxkIFR5cGVOYW1lPSJvcGM6Qnl0ZVN0cmluZyIgTmFtZT0iVmFsaWRCaXRzIi8+C        iA8L29wYzpTdHJ1Y3R1cmVkVHlwZT4KIDxvcGM6U3RydWN0dXJlZFR5cGUgQmFzZVR5cGU9I        nVhOkV4dGVuc2lvbk9iamVjdCIgTmFtZT0iUG5EZXZpY2VEaWFnbm9zaXNEYXRhVHlwZSI+C        iAgPG9wYzpGaWVsZCBUeXBlTmFtZT0ib3BjOlVJbnQzMiIgTmFtZT0iQVBJIi8+CiAgPG9wY        zpGaWVsZCBUeXBlTmFtZT0ib3BjOlVJbnQxNiIgTmFtZT0iU2xvdCIvPgogIDxvcGM6Rmllb        GQgVHlwZU5hbWU9Im9wYzpVSW50MTYiIE5hbWU9IlN1YnNsb3QiLz4KICA8b3BjOkZpZWxkI        FR5cGVOYW1lPSJvcGM6VUludDE2IiBOYW1lPSJDaGFubmVsTnVtYmVyIi8+CiAgPG9wYzpGa        WVsZCBUeXBlTmFtZT0idG5zOlBuQ2hhbm5lbFR5cGVFbnVtZXJhdGlvbiIgTmFtZT0iVHlwZ        SIvPgogIDxvcGM6RmllbGQgVHlwZU5hbWU9InRuczpQbkNoYW5uZWxBY2N1bXVsYXRpdmVFb        nVtZXJhdGlvbiIgTmFtZT0iQWNjdW11bGF0aXZlIi8+CiAgPG9wYzpGaWVsZCBUeXBlTmFtZ        T0idG5zOlBuQ2hhbm5lbE1haW50ZW5hbmNlRW51bWVyYXRpb24iIE5hbWU9Ik1haW50ZW5hb        mNlIi8+CiAgPG9wYzpGaWVsZCBUeXBlTmFtZT0idG5zOlBuQ2hhbm5lbFNwZWNpZmllckVud        W1lcmF0aW9uIiBOYW1lPSJTcGVjaWZpZXIiLz4KICA8b3BjOkZpZWxkIFR5cGVOYW1lPSJ0b        nM6UG5DaGFubmVsRGlyZWN0aW9uRW51bWVyYXRpb24iIE5hbWU9IkRpcmVjdGlvbiIvPgogI        DxvcGM6RmllbGQgVHlwZU5hbWU9Im9wYzpVSW50MTYiIE5hbWU9IlVzZXJTdHJ1Y3R1cmVJZ        GVudGlmaWVyIi8+CiAgPG9wYzpGaWVsZCBUeXBlTmFtZT0ib3BjOlVJbnQxNiIgTmFtZT0iQ        2hhbm5lbEVycm9yVHlwZSIvPgogIDxvcGM6RmllbGQgVHlwZU5hbWU9Im9wYzpVSW50MTYiI        E5hbWU9IkV4dENoYW5uZWxFcnJvclR5cGUiLz4KICA8b3BjOkZpZWxkIFR5cGVOYW1lPSJvc        GM6VUludDMyIiBOYW1lPSJFeHRDaGFubmVsQWRkVmFsdWUiLz4KICA8b3BjOkZpZWxkIFR5c        GVOYW1lPSJvcGM6VUludDMyIiBOYW1lPSJRdWFsaWZpZWRDaGFubmVsUXVhbGlmaWVyIi8+C        iAgPG9wYzpGaWVsZCBUeXBlTmFtZT0ib3BjOkJ5dGVTdHJpbmciIE5hbWU9Ik1hbnVmYWN0d        XJlckRhdGEiLz4KICA8b3BjOkZpZWxkIFR5cGVOYW1lPSJ1YTpMb2NhbGl6ZWRUZXh0IiBOY        W1lPSJNZXNzYWdlIi8+CiAgPG9wYzpGaWVsZCBUeXBlTmFtZT0idWE6TG9jYWxpemVkVGV4d        CIgTmFtZT0iSGVscFRleHQiLz4KIDwvb3BjOlN0cnVjdHVyZWRUeXBlPgogPG9wYzpTdHJ1Y        3R1cmVkVHlwZSBCYXNlVHlwZT0idWE6RXh0ZW5zaW9uT2JqZWN0IiBOYW1lPSJQbklNNURhd        GFUeXBlIj4KICA8b3BjOkRvY3VtZW50YXRpb24+Q29udGFpbnMgdGhlIGZpZWxkcyBvZiB0a        GUgQVBEVSBlbGVtZW50IEkmYW1wO001IHwgSSZhbXA7TTVEYXRhPC9vcGM6RG9jdW1lbnRhd        Glvbj4KICA8b3BjOkZpZWxkIFR5cGVOYW1lPSJvcGM6Q2hhckFycmF5IiBOYW1lPSJBbm5vd        GF0aW9uIi8+CiAgPG9wYzpGaWVsZCBUeXBlTmFtZT0ib3BjOkNoYXJBcnJheSIgTmFtZT0iT        3JkZXJJZCIvPgogIDxvcGM6RmllbGQgVHlwZU5hbWU9Im9wYzpVSW50MTYiIE5hbWU9IlZlb        mRvcklkIi8+CiAgPG9wYzpGaWVsZCBUeXBlTmFtZT0ib3BjOkNoYXJBcnJheSIgTmFtZT0iU        2VyaWFsTnVtYmVyIi8+CiAgPG9wYzpGaWVsZCBUeXBlTmFtZT0ib3BjOkNoYXJBcnJheSIgT        mFtZT0iSGFyZHdhcmVSZXZpc2lvbiIvPgogIDxvcGM6RmllbGQgVHlwZU5hbWU9Im9wYzpDa        GFyQXJyYXkiIE5hbWU9IlNvZnR3YXJlUmV2aXNpb24iLz4KIDwvb3BjOlN0cnVjdHVyZWRUe        XBlPgogPG9wYzpFbnVtZXJhdGVkVHlwZSBMZW5ndGhJbkJpdHM9IjMyIiBOYW1lPSJJTVRhZ        1NlbGVjdG9yRW51bWVyYXRpb24iPgogIDxvcGM6RW51bWVyYXRlZFZhbHVlIE5hbWU9IkZVT        kNUSU9OIiBWYWx1ZT0iMCIvPgogIDxvcGM6RW51bWVyYXRlZFZhbHVlIE5hbWU9IkxPQ0FUS        U9OIiBWYWx1ZT0iMSIvPgogIDxvcGM6RW51bWVyYXRlZFZhbHVlIE5hbWU9IkJPVEgiIFZhb        HVlPSIyIi8+CiA8L29wYzpFbnVtZXJhdGVkVHlwZT4KIDxvcGM6RW51bWVyYXRlZFR5cGUgT        GVuZ3RoSW5CaXRzPSIzMiIgTmFtZT0iUG5BUlN0YXRlRW51bWVyYXRpb24iPgogIDxvcGM6R        W51bWVyYXRlZFZhbHVlIE5hbWU9IkNPTk5FQ1RFRCIgVmFsdWU9IjAiLz4KICA8b3BjOkVud        W1lcmF0ZWRWYWx1ZSBOYW1lPSJVTkNPTk5FQ1RFRCIgVmFsdWU9IjEiLz4KICA8b3BjOkVud        W1lcmF0ZWRWYWx1ZSBOYW1lPSJVTkNPTk5FQ1RFRF9FUlJfREVWSUNFX05PVF9GT1VORCIgV        mFsdWU9IjIiLz4KICA8b3BjOkVudW1lcmF0ZWRWYWx1ZSBOYW1lPSJVTkNPTk5FQ1RFRF9FU        lJfRFVQTElDQVRFX0lQIiBWYWx1ZT0iMyIvPgogIDxvcGM6RW51bWVyYXRlZFZhbHVlIE5hb        WU9IlVOQ09OTkVDVEVEX0VSUl9EVVBMSUNBVEVfTk9TIiBWYWx1ZT0iNCIvPgogPC9vcGM6R        W51bWVyYXRlZFR5cGU+CiA8b3BjOkVudW1lcmF0ZWRUeXBlIExlbmd0aEluQml0cz0iMzIiI        E5hbWU9IlBuQVJUeXBlRW51bWVyYXRpb24iPgogIDxvcGM6RW51bWVyYXRlZFZhbHVlIE5hb        WU9IklPQ0FSU2luZ2xlIiBWYWx1ZT0iMCIvPgogIDxvcGM6RW51bWVyYXRlZFZhbHVlIE5hb        WU9IklPU0FSIiBWYWx1ZT0iNiIvPgogIDxvcGM6RW51bWVyYXRlZFZhbHVlIE5hbWU9IklPQ        0FSU2luZ2xlVXNpbmdSVF9DTEFTU18zIiBWYWx1ZT0iMTYiLz4KICA8b3BjOkVudW1lcmF0Z        WRWYWx1ZSBOYW1lPSJJT0NBUlNSIiBWYWx1ZT0iMzIiLz4KIDwvb3BjOkVudW1lcmF0ZWRUe        XBlPgogPG9wYzpFbnVtZXJhdGVkVHlwZSBMZW5ndGhJbkJpdHM9IjMyIiBOYW1lPSJQbkFzc        2V0Q2hhbmdlRW51bWVyYXRpb24iPgogIDxvcGM6RW51bWVyYXRlZFZhbHVlIE5hbWU9IklOU        0VSVEVEIiBWYWx1ZT0iMCIvPgogIDxvcGM6RW51bWVyYXRlZFZhbHVlIE5hbWU9IlJFTU9WR        UQiIFZhbHVlPSIxIi8+CiAgPG9wYzpFbnVtZXJhdGVkVmFsdWUgTmFtZT0iQ0hBTkdFRCIgV        mFsdWU9IjIiLz4KIDwvb3BjOkVudW1lcmF0ZWRUeXBlPgogPG9wYzpFbnVtZXJhdGVkVHlwZ        SBMZW5ndGhJbkJpdHM9IjMyIiBOYW1lPSJQbkFzc2V0VHlwZUVudW1lcmF0aW9uIj4KICA8b        3BjOkVudW1lcmF0ZWRWYWx1ZSBOYW1lPSJERVZJQ0UiIFZhbHVlPSIwIi8+CiAgPG9wYzpFb        nVtZXJhdGVkVmFsdWUgTmFtZT0iTU9EVUxFIiBWYWx1ZT0iMSIvPgogIDxvcGM6RW51bWVyY        XRlZFZhbHVlIE5hbWU9IlNVQk1PRFVMRSIgVmFsdWU9IjIiLz4KICA8b3BjOkVudW1lcmF0Z        WRWYWx1ZSBOYW1lPSJBU1NFVCIgVmFsdWU9IjMiLz4KIDwvb3BjOkVudW1lcmF0ZWRUeXBlP        gogPG9wYzpFbnVtZXJhdGVkVHlwZSBMZW5ndGhJbkJpdHM9IjMyIiBOYW1lPSJQbkNoYW5uZ        WxBY2N1bXVsYXRpdmVFbnVtZXJhdGlvbiI+CiAgPG9wYzpFbnVtZXJhdGVkVmFsdWUgTmFtZ        T0iU0lOR0xFIiBWYWx1ZT0iMCIvPgogIDxvcGM6RW51bWVyYXRlZFZhbHVlIE5hbWU9IkFDQ        1VNVUxBVElWRSIgVmFsdWU9IjI1NiIvPgogPC9vcGM6RW51bWVyYXRlZFR5cGU+CiA8b3BjO        kVudW1lcmF0ZWRUeXBlIExlbmd0aEluQml0cz0iMzIiIE5hbWU9IlBuQ2hhbm5lbERpcmVjd        GlvbkVudW1lcmF0aW9uIj4KICA8b3BjOkVudW1lcmF0ZWRWYWx1ZSBOYW1lPSJNQU5VRkFDV        FVSRVJfU1BFQ0lGSUMiIFZhbHVlPSIwIi8+CiAgPG9wYzpFbnVtZXJhdGVkVmFsdWUgTmFtZ        T0iSU5QVVRfQ0hBTk5FTCIgVmFsdWU9IjgxOTIiLz4KICA8b3BjOkVudW1lcmF0ZWRWYWx1Z        SBOYW1lPSJPVVRQVVRfQ0hBTk5FTCIgVmFsdWU9IjE2Mzg0Ii8+CiAgPG9wYzpFbnVtZXJhd        GVkVmFsdWUgTmFtZT0iQklESVJFQ1RJT05BTF9DSEFOTkVMIiBWYWx1ZT0iMjQ1NzYiLz4KI        Dwvb3BjOkVudW1lcmF0ZWRUeXBlPgogPG9wYzpFbnVtZXJhdGVkVHlwZSBMZW5ndGhJbkJpd        HM9IjMyIiBOYW1lPSJQbkNoYW5uZWxNYWludGVuYW5jZUVudW1lcmF0aW9uIj4KICA8b3BjO        kVudW1lcmF0ZWRWYWx1ZSBOYW1lPSJGQVVMVCIgVmFsdWU9IjAiLz4KICA8b3BjOkVudW1lc        mF0ZWRWYWx1ZSBOYW1lPSJNQUlOVEVOQU5DRV9SRVFVSVJFRCIgVmFsdWU9IjUxMiIvPgogI        DxvcGM6RW51bWVyYXRlZFZhbHVlIE5hbWU9Ik1BSU5URU5BTkNFX0RFTUFOREVEIiBWYWx1Z        T0iMTAyNCIvPgogIDxvcGM6RW51bWVyYXRlZFZhbHVlIE5hbWU9IlVTRV9RVUFMSUZJRURfQ        0hBTk5FTF9RVUFMSUZJRVIiIFZhbHVlPSIxNTM2Ii8+CiA8L29wYzpFbnVtZXJhdGVkVHlwZ        T4KIDxvcGM6RW51bWVyYXRlZFR5cGUgTGVuZ3RoSW5CaXRzPSIzMiIgTmFtZT0iUG5DaGFub        mVsU3BlY2lmaWVyRW51bWVyYXRpb24iPgogIDxvcGM6RW51bWVyYXRlZFZhbHVlIE5hbWU9I        kFMTF9ESVNBUFBFQVJTIiBWYWx1ZT0iMCIvPgogIDxvcGM6RW51bWVyYXRlZFZhbHVlIE5hb        WU9IkFQUEVBUlMiIFZhbHVlPSIyMDQ4Ii8+CiAgPG9wYzpFbnVtZXJhdGVkVmFsdWUgTmFtZ        T0iRElTQVBQRUFSUyIgVmFsdWU9IjQwOTYiLz4KICA8b3BjOkVudW1lcmF0ZWRWYWx1ZSBOY        W1lPSJESVNBUFBFQVJTX09USEVSX1JFTUFJTiIgVmFsdWU9IjYxNDQiLz4KIDwvb3BjOkVud        W1lcmF0ZWRUeXBlPgogPG9wYzpFbnVtZXJhdGVkVHlwZSBMZW5ndGhJbkJpdHM9IjMyIiBOY        W1lPSJQbkNoYW5uZWxUeXBlRW51bWVyYXRpb24iPgogIDxvcGM6RW51bWVyYXRlZFZhbHVlI        E5hbWU9IlVOU1BFQ0lGSUMiIFZhbHVlPSIwIi8+CiAgPG9wYzpFbnVtZXJhdGVkVmFsdWUgT        mFtZT0iMUJJVCIgVmFsdWU9IjEiLz4KICA8b3BjOkVudW1lcmF0ZWRWYWx1ZSBOYW1lPSIyQ        klUIiBWYWx1ZT0iMiIvPgogIDxvcGM6RW51bWVyYXRlZFZhbHVlIE5hbWU9IjRCSVQiIFZhb        HVlPSIzIi8+CiAgPG9wYzpFbnVtZXJhdGVkVmFsdWUgTmFtZT0iOEJJVCIgVmFsdWU9IjQiL        z4KICA8b3BjOkVudW1lcmF0ZWRWYWx1ZSBOYW1lPSIxNkJJVCIgVmFsdWU9IjUiLz4KICA8b        3BjOkVudW1lcmF0ZWRWYWx1ZSBOYW1lPSIzMkJJVCIgVmFsdWU9IjYiLz4KICA8b3BjOkVud        W1lcmF0ZWRWYWx1ZSBOYW1lPSI2NEJJVCIgVmFsdWU9IjciLz4KIDwvb3BjOkVudW1lcmF0Z        WRUeXBlPgogPG9wYzpFbnVtZXJhdGVkVHlwZSBMZW5ndGhJbkJpdHM9IjMyIiBOYW1lPSJQb        kRldmljZVN0YXRlRW51bWVyYXRpb24iPgogIDxvcGM6RW51bWVyYXRlZFZhbHVlIE5hbWU9I        k9GRkxJTkUiIFZhbHVlPSIwIi8+CiAgPG9wYzpFbnVtZXJhdGVkVmFsdWUgTmFtZT0iT0ZGT        ElORV9ET0NLSU5HIiBWYWx1ZT0iMSIvPgogIDxvcGM6RW51bWVyYXRlZFZhbHVlIE5hbWU9I        k9OTElORSIgVmFsdWU9IjIiLz4KICA8b3BjOkVudW1lcmF0ZWRWYWx1ZSBOYW1lPSJPTkxJT        kVfRE9DS0lORyIgVmFsdWU9IjMiLz4KIDwvb3BjOkVudW1lcmF0ZWRUeXBlPgogPG9wYzpFb        nVtZXJhdGVkVHlwZSBMZW5ndGhJbkJpdHM9IjMyIiBOYW1lPSJQbkxpbmtTdGF0ZUVudW1lc        mF0aW9uIj4KICA8b3BjOkVudW1lcmF0ZWRWYWx1ZSBOYW1lPSJVUCIgVmFsdWU9IjEiLz4KI        CA8b3BjOkVudW1lcmF0ZWRWYWx1ZSBOYW1lPSJET1dOIiBWYWx1ZT0iMiIvPgogIDxvcGM6R        W51bWVyYXRlZFZhbHVlIE5hbWU9IlRFU1RJTkciIFZhbHVlPSIzIi8+CiAgPG9wYzpFbnVtZ        XJhdGVkVmFsdWUgTmFtZT0iVU5LTk9XTiIgVmFsdWU9IjQiLz4KICA8b3BjOkVudW1lcmF0Z        WRWYWx1ZSBOYW1lPSJET1JNQU5UIiBWYWx1ZT0iNSIvPgogIDxvcGM6RW51bWVyYXRlZFZhb        HVlIE5hbWU9Ik5PVF9QUkVTRU5UIiBWYWx1ZT0iNiIvPgogIDxvcGM6RW51bWVyYXRlZFZhb        HVlIE5hbWU9IkxPV0VSX0xBWUVSX0RPV04iIFZhbHVlPSI3Ii8+CiA8L29wYzpFbnVtZXJhd        GVkVHlwZT4KIDxvcGM6RW51bWVyYXRlZFR5cGUgTGVuZ3RoSW5CaXRzPSIzMiIgTmFtZT0iU        G5Nb2R1bGVTdGF0ZUVudW1lcmF0aW9uIj4KICA8b3BjOkVudW1lcmF0ZWRWYWx1ZSBOYW1lP        SJOT19NT0RVTEUiIFZhbHVlPSIwIi8+CiAgPG9wYzpFbnVtZXJhdGVkVmFsdWUgTmFtZT0iV        1JPTkdfTU9EVUxFIiBWYWx1ZT0iMSIvPgogIDxvcGM6RW51bWVyYXRlZFZhbHVlIE5hbWU9I        lBST1BFUl9NT0RVTEUiIFZhbHVlPSIyIi8+CiAgPG9wYzpFbnVtZXJhdGVkVmFsdWUgTmFtZ        T0iU1VCU1RJVFVURSIgVmFsdWU9IjMiLz4KICA8b3BjOkVudW1lcmF0ZWRWYWx1ZSBOYW1lP        SJPSyIgVmFsdWU9IjQiLz4KIDwvb3BjOkVudW1lcmF0ZWRUeXBlPgogPG9wYzpFbnVtZXJhd        GVkVHlwZSBMZW5ndGhJbkJpdHM9IjMyIiBOYW1lPSJQblBvcnRTdGF0ZUVudW1lcmF0aW9uI        j4KICA8b3BjOkVudW1lcmF0ZWRWYWx1ZSBOYW1lPSJVTktOT1dOIiBWYWx1ZT0iMCIvPgogI        DxvcGM6RW51bWVyYXRlZFZhbHVlIE5hbWU9IkRJU0FCTEVEX0RJU0NBUkRJTkciIFZhbHVlP        SIxIi8+CiAgPG9wYzpFbnVtZXJhdGVkVmFsdWUgTmFtZT0iQkxPQ0tJTkciIFZhbHVlPSIyI        i8+CiAgPG9wYzpFbnVtZXJhdGVkVmFsdWUgTmFtZT0iTElTVEVOSU5HIiBWYWx1ZT0iMyIvP        gogIDxvcGM6RW51bWVyYXRlZFZhbHVlIE5hbWU9IkxFQVJOSU5HIiBWYWx1ZT0iNCIvPgogI        DxvcGM6RW51bWVyYXRlZFZhbHVlIE5hbWU9IkZPUldBUkRJTkciIFZhbHVlPSI1Ii8+CiAgP        G9wYzpFbnVtZXJhdGVkVmFsdWUgTmFtZT0iQlJPS0VOIiBWYWx1ZT0iNiIvPgogPC9vcGM6R        W51bWVyYXRlZFR5cGU+CiA8b3BjOkVudW1lcmF0ZWRUeXBlIExlbmd0aEluQml0cz0iMzIiI        E5hbWU9IlBuU3VibW9kdWxlQWRkSW5mb0VudW1lcmF0aW9uIj4KICA8b3BjOkVudW1lcmF0Z        WRWYWx1ZSBOYW1lPSJOT19BRERfSU5GTyIgVmFsdWU9IjAiLz4KICA8b3BjOkVudW1lcmF0Z        WRWYWx1ZSBOYW1lPSJUQUtFT1ZFUl9OT1RfQUxMT1dFRCIgVmFsdWU9IjEiLz4KIDwvb3BjO        kVudW1lcmF0ZWRUeXBlPgogPG9wYzpFbnVtZXJhdGVkVHlwZSBMZW5ndGhJbkJpdHM9IjMyI        iBOYW1lPSJQblN1Ym1vZHVsZUFSSW5mb0VudW1lcmF0aW9uIj4KICA8b3BjOkVudW1lcmF0Z        WRWYWx1ZSBOYW1lPSJPV04iIFZhbHVlPSIwIi8+CiAgPG9wYzpFbnVtZXJhdGVkVmFsdWUgT        mFtZT0iQVBQTElDQVRJT05fUkVBRFlfUEVORElORyIgVmFsdWU9IjEyOCIvPgogIDxvcGM6R        W51bWVyYXRlZFZhbHVlIE5hbWU9IlNVUEVST1JESU5BVEVEX0xPQ0tFRCIgVmFsdWU9IjI1N        iIvPgogIDxvcGM6RW51bWVyYXRlZFZhbHVlIE5hbWU9IkxPQ0tFRF9CWV9JT19DT05UUk9MT        EVSIiBWYWx1ZT0iMzg0Ii8+CiAgPG9wYzpFbnVtZXJhdGVkVmFsdWUgTmFtZT0iTE9DS0VEX        0JZX0lPX1NVUEVSVklTT1IiIFZhbHVlPSI1MTIiLz4KIDwvb3BjOkVudW1lcmF0ZWRUeXBlP        gogPG9wYzpFbnVtZXJhdGVkVHlwZSBMZW5ndGhJbkJpdHM9IjMyIiBOYW1lPSJQblN1Ym1vZ        HVsZUlkZW50SW5mb0VudW1lcmF0aW9uIj4KICA8b3BjOkVudW1lcmF0ZWRWYWx1ZSBOYW1lP        SJPSyIgVmFsdWU9IjAiLz4KICA8b3BjOkVudW1lcmF0ZWRWYWx1ZSBOYW1lPSJTVUJTVElUV        VRFIiBWYWx1ZT0iMjA0OCIvPgogIDxvcGM6RW51bWVyYXRlZFZhbHVlIE5hbWU9IldST05HI        iBWYWx1ZT0iNDA5NiIvPgogIDxvcGM6RW51bWVyYXRlZFZhbHVlIE5hbWU9Ik5PX1NVQk1PR        FVMRSIgVmFsdWU9IjYxNDQiLz4KIDwvb3BjOkVudW1lcmF0ZWRUeXBlPgo8L29wYzpUeXBlR        GljdGlvbmFyeT4K",
                            )
                            .unwrap(),
                    ),
                ),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            opcua::nodes::ImportedReference { target_id : opcua::types::NodeId::new(0u16,
            72u32), type_id : opcua::types::NodeId::new(0u16, 40u32), is_forward : true,
            }, opcua::nodes::ImportedReference { target_id :
            opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6003u32), type_id
            : opcua::types::NodeId::new(0u16, 46u32), is_forward : true, },
            opcua::nodes::ImportedReference { target_id :
            opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6042u32), type_id
            : opcua::types::NodeId::new(0u16, 47u32), is_forward : true, },
            opcua::nodes::ImportedReference { target_id :
            opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6006u32), type_id
            : opcua::types::NodeId::new(0u16, 47u32), is_forward : true, },
            opcua::nodes::ImportedReference { target_id :
            opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6044u32), type_id
            : opcua::types::NodeId::new(0u16, 47u32), is_forward : true, },
            opcua::nodes::ImportedReference { target_id : opcua::types::NodeId::new(0u16,
            93u32), type_id : opcua::types::NodeId::new(0u16, 47u32), is_forward : false,
            }
        ],
    }
}
#[allow(unused)]
fn make_variable_43(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6003u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "NamespaceUri"),
                opcua::types::LocalizedText::new("", "NamespaceUri"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(
                "http://opcfoundation.org/UA/PROFINET/",
            )),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6002u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_44(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6006u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(
                    ns_map.get_index(1u16).unwrap(),
                    "PnDeviceRoleOptionSet",
                ),
                opcua::types::LocalizedText::new("", "PnDeviceRoleOptionSet"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from("PnDeviceRoleOptionSet")),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 69u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5001u32),
                type_id: opcua::types::NodeId::new(0u16, 39u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6002u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_45(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
                opcua::nodes::Base::new_full(
                    opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6004u32),
                    opcua::types::NodeClass::Variable,
                    opcua::types::QualifiedName::new(
                        ns_map.get_index(1u16).unwrap(),
                        "TypeDictionary",
                    ),
                    opcua::types::LocalizedText::new("", "TypeDictionary"),
                    Some(
                        opcua::types::LocalizedText::new(
                            "",
                            "Collects the data type descriptions of http://opcfoundation.org/UA/PROFINET/",
                        ),
                    ),
                    Some(0u32),
                    Some(0u32),
                ),
                opcua::types::NodeId::new(0u16, 15u32),
                false,
                -1i32,
                opcua::types::DataValue::new_now(
                    opcua::types::Variant::from(
                        opcua::types::ByteString::from_base64(
                                "PHhzOnNjaGVtYSBlbGVtZW50Rm9ybURlZmF1bHQ9InF1YWxpZmllZCIgdGFyZ2V0TmFtZXNwYWNlPSJod        HRwOi8vb3BjZm91bmRhdGlvbi5vcmcvVUEvUFJPRklORVQvVHlwZXMueHNkIiB4bWxuczp0b        nM9Imh0dHA6Ly9vcGNmb3VuZGF0aW9uLm9yZy9VQS9QUk9GSU5FVC9UeXBlcy54c2QiIHhtb        G5zOnVhPSJodHRwOi8vb3BjZm91bmRhdGlvbi5vcmcvVUEvMjAwOC8wMi9UeXBlcy54c2QiI        HhtbG5zOnhzPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYSI+CiA8eHM6aW1wb        3J0IG5hbWVzcGFjZT0iaHR0cDovL29wY2ZvdW5kYXRpb24ub3JnL1VBLzIwMDgvMDIvVHlwZ        XMueHNkIi8+CiA8eHM6c2ltcGxlVHlwZSBuYW1lPSJJTVRhZ1NlbGVjdG9yRW51bWVyYXRpb        24iPgogIDx4czpyZXN0cmljdGlvbiBiYXNlPSJ4czpzdHJpbmciPgogICA8eHM6ZW51bWVyY        XRpb24gdmFsdWU9IkZVTkNUSU9OXzAiLz4KICAgPHhzOmVudW1lcmF0aW9uIHZhbHVlPSJMT        0NBVElPTl8xIi8+CiAgIDx4czplbnVtZXJhdGlvbiB2YWx1ZT0iQk9USF8yIi8+CiAgPC94c        zpyZXN0cmljdGlvbj4KIDwveHM6c2ltcGxlVHlwZT4KIDx4czplbGVtZW50IHR5cGU9InRuc        zpJTVRhZ1NlbGVjdG9yRW51bWVyYXRpb24iIG5hbWU9IklNVGFnU2VsZWN0b3JFbnVtZXJhd        GlvbiIvPgogPHhzOmNvbXBsZXhUeXBlIG5hbWU9Ikxpc3RPZklNVGFnU2VsZWN0b3JFbnVtZ        XJhdGlvbiI+CiAgPHhzOnNlcXVlbmNlPgogICA8eHM6ZWxlbWVudCBtaW5PY2N1cnM9IjAiI        G1heE9jY3Vycz0idW5ib3VuZGVkIiB0eXBlPSJ0bnM6SU1UYWdTZWxlY3RvckVudW1lcmF0a        W9uIiBuYW1lPSJJTVRhZ1NlbGVjdG9yRW51bWVyYXRpb24iIG5pbGxhYmxlPSJ0cnVlIi8+C        iAgPC94czpzZXF1ZW5jZT4KIDwveHM6Y29tcGxleFR5cGU+CiA8eHM6ZWxlbWVudCB0eXBlP        SJ0bnM6TGlzdE9mSU1UYWdTZWxlY3RvckVudW1lcmF0aW9uIiBuYW1lPSJMaXN0T2ZJTVRhZ        1NlbGVjdG9yRW51bWVyYXRpb24iIG5pbGxhYmxlPSJ0cnVlIi8+CiA8eHM6c2ltcGxlVHlwZ        SBuYW1lPSJQbkFSU3RhdGVFbnVtZXJhdGlvbiI+CiAgPHhzOnJlc3RyaWN0aW9uIGJhc2U9I        nhzOnN0cmluZyI+CiAgIDx4czplbnVtZXJhdGlvbiB2YWx1ZT0iQ09OTkVDVEVEXzAiLz4KI        CAgPHhzOmVudW1lcmF0aW9uIHZhbHVlPSJVTkNPTk5FQ1RFRF8xIi8+CiAgIDx4czplbnVtZ        XJhdGlvbiB2YWx1ZT0iVU5DT05ORUNURURfRVJSX0RFVklDRV9OT1RfRk9VTkRfMiIvPgogI        CA8eHM6ZW51bWVyYXRpb24gdmFsdWU9IlVOQ09OTkVDVEVEX0VSUl9EVVBMSUNBVEVfSVBfM        yIvPgogICA8eHM6ZW51bWVyYXRpb24gdmFsdWU9IlVOQ09OTkVDVEVEX0VSUl9EVVBMSUNBV        EVfTk9TXzQiLz4KICA8L3hzOnJlc3RyaWN0aW9uPgogPC94czpzaW1wbGVUeXBlPgogPHhzO        mVsZW1lbnQgdHlwZT0idG5zOlBuQVJTdGF0ZUVudW1lcmF0aW9uIiBuYW1lPSJQbkFSU3Rhd        GVFbnVtZXJhdGlvbiIvPgogPHhzOmNvbXBsZXhUeXBlIG5hbWU9Ikxpc3RPZlBuQVJTdGF0Z        UVudW1lcmF0aW9uIj4KICA8eHM6c2VxdWVuY2U+CiAgIDx4czplbGVtZW50IG1pbk9jY3Vyc        z0iMCIgbWF4T2NjdXJzPSJ1bmJvdW5kZWQiIHR5cGU9InRuczpQbkFSU3RhdGVFbnVtZXJhd        GlvbiIgbmFtZT0iUG5BUlN0YXRlRW51bWVyYXRpb24iIG5pbGxhYmxlPSJ0cnVlIi8+CiAgP        C94czpzZXF1ZW5jZT4KIDwveHM6Y29tcGxleFR5cGU+CiA8eHM6ZWxlbWVudCB0eXBlPSJ0b        nM6TGlzdE9mUG5BUlN0YXRlRW51bWVyYXRpb24iIG5hbWU9Ikxpc3RPZlBuQVJTdGF0ZUVud        W1lcmF0aW9uIiBuaWxsYWJsZT0idHJ1ZSIvPgogPHhzOnNpbXBsZVR5cGUgbmFtZT0iUG5BU        lR5cGVFbnVtZXJhdGlvbiI+CiAgPHhzOnJlc3RyaWN0aW9uIGJhc2U9InhzOnN0cmluZyI+C        iAgIDx4czplbnVtZXJhdGlvbiB2YWx1ZT0iSU9DQVJTaW5nbGVfMCIvPgogICA8eHM6ZW51b        WVyYXRpb24gdmFsdWU9IklPU0FSXzYiLz4KICAgPHhzOmVudW1lcmF0aW9uIHZhbHVlPSJJT        0NBUlNpbmdsZVVzaW5nUlRfQ0xBU1NfM18xNiIvPgogICA8eHM6ZW51bWVyYXRpb24gdmFsd        WU9IklPQ0FSU1JfMzIiLz4KICA8L3hzOnJlc3RyaWN0aW9uPgogPC94czpzaW1wbGVUeXBlP        gogPHhzOmVsZW1lbnQgdHlwZT0idG5zOlBuQVJUeXBlRW51bWVyYXRpb24iIG5hbWU9IlBuQ        VJUeXBlRW51bWVyYXRpb24iLz4KIDx4czpjb21wbGV4VHlwZSBuYW1lPSJMaXN0T2ZQbkFSV        HlwZUVudW1lcmF0aW9uIj4KICA8eHM6c2VxdWVuY2U+CiAgIDx4czplbGVtZW50IG1pbk9jY        3Vycz0iMCIgbWF4T2NjdXJzPSJ1bmJvdW5kZWQiIHR5cGU9InRuczpQbkFSVHlwZUVudW1lc        mF0aW9uIiBuYW1lPSJQbkFSVHlwZUVudW1lcmF0aW9uIiBuaWxsYWJsZT0idHJ1ZSIvPgogI        DwveHM6c2VxdWVuY2U+CiA8L3hzOmNvbXBsZXhUeXBlPgogPHhzOmVsZW1lbnQgdHlwZT0id        G5zOkxpc3RPZlBuQVJUeXBlRW51bWVyYXRpb24iIG5hbWU9Ikxpc3RPZlBuQVJUeXBlRW51b        WVyYXRpb24iIG5pbGxhYmxlPSJ0cnVlIi8+CiA8eHM6c2ltcGxlVHlwZSBuYW1lPSJQbkFzc        2V0Q2hhbmdlRW51bWVyYXRpb24iPgogIDx4czpyZXN0cmljdGlvbiBiYXNlPSJ4czpzdHJpb        mciPgogICA8eHM6ZW51bWVyYXRpb24gdmFsdWU9IklOU0VSVEVEXzAiLz4KICAgPHhzOmVud        W1lcmF0aW9uIHZhbHVlPSJSRU1PVkVEXzEiLz4KICAgPHhzOmVudW1lcmF0aW9uIHZhbHVlP        SJDSEFOR0VEXzIiLz4KICA8L3hzOnJlc3RyaWN0aW9uPgogPC94czpzaW1wbGVUeXBlPgogP        HhzOmVsZW1lbnQgdHlwZT0idG5zOlBuQXNzZXRDaGFuZ2VFbnVtZXJhdGlvbiIgbmFtZT0iU        G5Bc3NldENoYW5nZUVudW1lcmF0aW9uIi8+CiA8eHM6Y29tcGxleFR5cGUgbmFtZT0iTGlzd        E9mUG5Bc3NldENoYW5nZUVudW1lcmF0aW9uIj4KICA8eHM6c2VxdWVuY2U+CiAgIDx4czplb        GVtZW50IG1pbk9jY3Vycz0iMCIgbWF4T2NjdXJzPSJ1bmJvdW5kZWQiIHR5cGU9InRuczpQb        kFzc2V0Q2hhbmdlRW51bWVyYXRpb24iIG5hbWU9IlBuQXNzZXRDaGFuZ2VFbnVtZXJhdGlvb        iIgbmlsbGFibGU9InRydWUiLz4KICA8L3hzOnNlcXVlbmNlPgogPC94czpjb21wbGV4VHlwZ        T4KIDx4czplbGVtZW50IHR5cGU9InRuczpMaXN0T2ZQbkFzc2V0Q2hhbmdlRW51bWVyYXRpb        24iIG5hbWU9Ikxpc3RPZlBuQXNzZXRDaGFuZ2VFbnVtZXJhdGlvbiIgbmlsbGFibGU9InRyd        WUiLz4KIDx4czpzaW1wbGVUeXBlIG5hbWU9IlBuQXNzZXRUeXBlRW51bWVyYXRpb24iPgogI        Dx4czpyZXN0cmljdGlvbiBiYXNlPSJ4czpzdHJpbmciPgogICA8eHM6ZW51bWVyYXRpb24gd        mFsdWU9IkRFVklDRV8wIi8+CiAgIDx4czplbnVtZXJhdGlvbiB2YWx1ZT0iTU9EVUxFXzEiL        z4KICAgPHhzOmVudW1lcmF0aW9uIHZhbHVlPSJTVUJNT0RVTEVfMiIvPgogICA8eHM6ZW51b        WVyYXRpb24gdmFsdWU9IkFTU0VUXzMiLz4KICA8L3hzOnJlc3RyaWN0aW9uPgogPC94czpza        W1wbGVUeXBlPgogPHhzOmVsZW1lbnQgdHlwZT0idG5zOlBuQXNzZXRUeXBlRW51bWVyYXRpb        24iIG5hbWU9IlBuQXNzZXRUeXBlRW51bWVyYXRpb24iLz4KIDx4czpjb21wbGV4VHlwZSBuY        W1lPSJMaXN0T2ZQbkFzc2V0VHlwZUVudW1lcmF0aW9uIj4KICA8eHM6c2VxdWVuY2U+CiAgI        Dx4czplbGVtZW50IG1pbk9jY3Vycz0iMCIgbWF4T2NjdXJzPSJ1bmJvdW5kZWQiIHR5cGU9I        nRuczpQbkFzc2V0VHlwZUVudW1lcmF0aW9uIiBuYW1lPSJQbkFzc2V0VHlwZUVudW1lcmF0a        W9uIiBuaWxsYWJsZT0idHJ1ZSIvPgogIDwveHM6c2VxdWVuY2U+CiA8L3hzOmNvbXBsZXhUe        XBlPgogPHhzOmVsZW1lbnQgdHlwZT0idG5zOkxpc3RPZlBuQXNzZXRUeXBlRW51bWVyYXRpb        24iIG5hbWU9Ikxpc3RPZlBuQXNzZXRUeXBlRW51bWVyYXRpb24iIG5pbGxhYmxlPSJ0cnVlI        i8+CiA8eHM6c2ltcGxlVHlwZSBuYW1lPSJQbkNoYW5uZWxBY2N1bXVsYXRpdmVFbnVtZXJhd        GlvbiI+CiAgPHhzOnJlc3RyaWN0aW9uIGJhc2U9InhzOnN0cmluZyI+CiAgIDx4czplbnVtZ        XJhdGlvbiB2YWx1ZT0iU0lOR0xFXzAiLz4KICAgPHhzOmVudW1lcmF0aW9uIHZhbHVlPSJBQ        0NVTVVMQVRJVkVfMjU2Ii8+CiAgPC94czpyZXN0cmljdGlvbj4KIDwveHM6c2ltcGxlVHlwZ        T4KIDx4czplbGVtZW50IHR5cGU9InRuczpQbkNoYW5uZWxBY2N1bXVsYXRpdmVFbnVtZXJhd        GlvbiIgbmFtZT0iUG5DaGFubmVsQWNjdW11bGF0aXZlRW51bWVyYXRpb24iLz4KIDx4czpjb        21wbGV4VHlwZSBuYW1lPSJMaXN0T2ZQbkNoYW5uZWxBY2N1bXVsYXRpdmVFbnVtZXJhdGlvb        iI+CiAgPHhzOnNlcXVlbmNlPgogICA8eHM6ZWxlbWVudCBtaW5PY2N1cnM9IjAiIG1heE9jY        3Vycz0idW5ib3VuZGVkIiB0eXBlPSJ0bnM6UG5DaGFubmVsQWNjdW11bGF0aXZlRW51bWVyY        XRpb24iIG5hbWU9IlBuQ2hhbm5lbEFjY3VtdWxhdGl2ZUVudW1lcmF0aW9uIiBuaWxsYWJsZ        T0idHJ1ZSIvPgogIDwveHM6c2VxdWVuY2U+CiA8L3hzOmNvbXBsZXhUeXBlPgogPHhzOmVsZ        W1lbnQgdHlwZT0idG5zOkxpc3RPZlBuQ2hhbm5lbEFjY3VtdWxhdGl2ZUVudW1lcmF0aW9uI        iBuYW1lPSJMaXN0T2ZQbkNoYW5uZWxBY2N1bXVsYXRpdmVFbnVtZXJhdGlvbiIgbmlsbGFib        GU9InRydWUiLz4KIDx4czpzaW1wbGVUeXBlIG5hbWU9IlBuQ2hhbm5lbERpcmVjdGlvbkVud        W1lcmF0aW9uIj4KICA8eHM6cmVzdHJpY3Rpb24gYmFzZT0ieHM6c3RyaW5nIj4KICAgPHhzO        mVudW1lcmF0aW9uIHZhbHVlPSJNQU5VRkFDVFVSRVJfU1BFQ0lGSUNfMCIvPgogICA8eHM6Z        W51bWVyYXRpb24gdmFsdWU9IklOUFVUX0NIQU5ORUxfODE5MiIvPgogICA8eHM6ZW51bWVyY        XRpb24gdmFsdWU9Ik9VVFBVVF9DSEFOTkVMXzE2Mzg0Ii8+CiAgIDx4czplbnVtZXJhdGlvb        iB2YWx1ZT0iQklESVJFQ1RJT05BTF9DSEFOTkVMXzI0NTc2Ii8+CiAgPC94czpyZXN0cmljd        Glvbj4KIDwveHM6c2ltcGxlVHlwZT4KIDx4czplbGVtZW50IHR5cGU9InRuczpQbkNoYW5uZ        WxEaXJlY3Rpb25FbnVtZXJhdGlvbiIgbmFtZT0iUG5DaGFubmVsRGlyZWN0aW9uRW51bWVyY        XRpb24iLz4KIDx4czpjb21wbGV4VHlwZSBuYW1lPSJMaXN0T2ZQbkNoYW5uZWxEaXJlY3Rpb        25FbnVtZXJhdGlvbiI+CiAgPHhzOnNlcXVlbmNlPgogICA8eHM6ZWxlbWVudCBtaW5PY2N1c        nM9IjAiIG1heE9jY3Vycz0idW5ib3VuZGVkIiB0eXBlPSJ0bnM6UG5DaGFubmVsRGlyZWN0a        W9uRW51bWVyYXRpb24iIG5hbWU9IlBuQ2hhbm5lbERpcmVjdGlvbkVudW1lcmF0aW9uIiBua        WxsYWJsZT0idHJ1ZSIvPgogIDwveHM6c2VxdWVuY2U+CiA8L3hzOmNvbXBsZXhUeXBlPgogP        HhzOmVsZW1lbnQgdHlwZT0idG5zOkxpc3RPZlBuQ2hhbm5lbERpcmVjdGlvbkVudW1lcmF0a        W9uIiBuYW1lPSJMaXN0T2ZQbkNoYW5uZWxEaXJlY3Rpb25FbnVtZXJhdGlvbiIgbmlsbGFib        GU9InRydWUiLz4KIDx4czpzaW1wbGVUeXBlIG5hbWU9IlBuQ2hhbm5lbE1haW50ZW5hbmNlR        W51bWVyYXRpb24iPgogIDx4czpyZXN0cmljdGlvbiBiYXNlPSJ4czpzdHJpbmciPgogICA8e        HM6ZW51bWVyYXRpb24gdmFsdWU9IkZBVUxUXzAiLz4KICAgPHhzOmVudW1lcmF0aW9uIHZhb        HVlPSJNQUlOVEVOQU5DRV9SRVFVSVJFRF81MTIiLz4KICAgPHhzOmVudW1lcmF0aW9uIHZhb        HVlPSJNQUlOVEVOQU5DRV9ERU1BTkRFRF8xMDI0Ii8+CiAgIDx4czplbnVtZXJhdGlvbiB2Y        Wx1ZT0iVVNFX1FVQUxJRklFRF9DSEFOTkVMX1FVQUxJRklFUl8xNTM2Ii8+CiAgPC94czpyZ        XN0cmljdGlvbj4KIDwveHM6c2ltcGxlVHlwZT4KIDx4czplbGVtZW50IHR5cGU9InRuczpQb        kNoYW5uZWxNYWludGVuYW5jZUVudW1lcmF0aW9uIiBuYW1lPSJQbkNoYW5uZWxNYWludGVuY        W5jZUVudW1lcmF0aW9uIi8+CiA8eHM6Y29tcGxleFR5cGUgbmFtZT0iTGlzdE9mUG5DaGFub        mVsTWFpbnRlbmFuY2VFbnVtZXJhdGlvbiI+CiAgPHhzOnNlcXVlbmNlPgogICA8eHM6ZWxlb        WVudCBtaW5PY2N1cnM9IjAiIG1heE9jY3Vycz0idW5ib3VuZGVkIiB0eXBlPSJ0bnM6UG5Da        GFubmVsTWFpbnRlbmFuY2VFbnVtZXJhdGlvbiIgbmFtZT0iUG5DaGFubmVsTWFpbnRlbmFuY        2VFbnVtZXJhdGlvbiIgbmlsbGFibGU9InRydWUiLz4KICA8L3hzOnNlcXVlbmNlPgogPC94c        zpjb21wbGV4VHlwZT4KIDx4czplbGVtZW50IHR5cGU9InRuczpMaXN0T2ZQbkNoYW5uZWxNY        WludGVuYW5jZUVudW1lcmF0aW9uIiBuYW1lPSJMaXN0T2ZQbkNoYW5uZWxNYWludGVuYW5jZ        UVudW1lcmF0aW9uIiBuaWxsYWJsZT0idHJ1ZSIvPgogPHhzOnNpbXBsZVR5cGUgbmFtZT0iU        G5DaGFubmVsU3BlY2lmaWVyRW51bWVyYXRpb24iPgogIDx4czpyZXN0cmljdGlvbiBiYXNlP        SJ4czpzdHJpbmciPgogICA8eHM6ZW51bWVyYXRpb24gdmFsdWU9IkFMTF9ESVNBUFBFQVJTX        zAiLz4KICAgPHhzOmVudW1lcmF0aW9uIHZhbHVlPSJBUFBFQVJTXzIwNDgiLz4KICAgPHhzO        mVudW1lcmF0aW9uIHZhbHVlPSJESVNBUFBFQVJTXzQwOTYiLz4KICAgPHhzOmVudW1lcmF0a        W9uIHZhbHVlPSJESVNBUFBFQVJTX09USEVSX1JFTUFJTl82MTQ0Ii8+CiAgPC94czpyZXN0c        mljdGlvbj4KIDwveHM6c2ltcGxlVHlwZT4KIDx4czplbGVtZW50IHR5cGU9InRuczpQbkNoY        W5uZWxTcGVjaWZpZXJFbnVtZXJhdGlvbiIgbmFtZT0iUG5DaGFubmVsU3BlY2lmaWVyRW51b        WVyYXRpb24iLz4KIDx4czpjb21wbGV4VHlwZSBuYW1lPSJMaXN0T2ZQbkNoYW5uZWxTcGVja        WZpZXJFbnVtZXJhdGlvbiI+CiAgPHhzOnNlcXVlbmNlPgogICA8eHM6ZWxlbWVudCBtaW5PY        2N1cnM9IjAiIG1heE9jY3Vycz0idW5ib3VuZGVkIiB0eXBlPSJ0bnM6UG5DaGFubmVsU3BlY        2lmaWVyRW51bWVyYXRpb24iIG5hbWU9IlBuQ2hhbm5lbFNwZWNpZmllckVudW1lcmF0aW9uI        iBuaWxsYWJsZT0idHJ1ZSIvPgogIDwveHM6c2VxdWVuY2U+CiA8L3hzOmNvbXBsZXhUeXBlP        gogPHhzOmVsZW1lbnQgdHlwZT0idG5zOkxpc3RPZlBuQ2hhbm5lbFNwZWNpZmllckVudW1lc        mF0aW9uIiBuYW1lPSJMaXN0T2ZQbkNoYW5uZWxTcGVjaWZpZXJFbnVtZXJhdGlvbiIgbmlsb        GFibGU9InRydWUiLz4KIDx4czpzaW1wbGVUeXBlIG5hbWU9IlBuQ2hhbm5lbFR5cGVFbnVtZ        XJhdGlvbiI+CiAgPHhzOnJlc3RyaWN0aW9uIGJhc2U9InhzOnN0cmluZyI+CiAgIDx4czplb        nVtZXJhdGlvbiB2YWx1ZT0iVU5TUEVDSUZJQ18wIi8+CiAgIDx4czplbnVtZXJhdGlvbiB2Y        Wx1ZT0iMUJJVF8xIi8+CiAgIDx4czplbnVtZXJhdGlvbiB2YWx1ZT0iMkJJVF8yIi8+CiAgI        Dx4czplbnVtZXJhdGlvbiB2YWx1ZT0iNEJJVF8zIi8+CiAgIDx4czplbnVtZXJhdGlvbiB2Y        Wx1ZT0iOEJJVF80Ii8+CiAgIDx4czplbnVtZXJhdGlvbiB2YWx1ZT0iMTZCSVRfNSIvPgogI        CA8eHM6ZW51bWVyYXRpb24gdmFsdWU9IjMyQklUXzYiLz4KICAgPHhzOmVudW1lcmF0aW9uI        HZhbHVlPSI2NEJJVF83Ii8+CiAgPC94czpyZXN0cmljdGlvbj4KIDwveHM6c2ltcGxlVHlwZ        T4KIDx4czplbGVtZW50IHR5cGU9InRuczpQbkNoYW5uZWxUeXBlRW51bWVyYXRpb24iIG5hb        WU9IlBuQ2hhbm5lbFR5cGVFbnVtZXJhdGlvbiIvPgogPHhzOmNvbXBsZXhUeXBlIG5hbWU9I        kxpc3RPZlBuQ2hhbm5lbFR5cGVFbnVtZXJhdGlvbiI+CiAgPHhzOnNlcXVlbmNlPgogICA8e        HM6ZWxlbWVudCBtaW5PY2N1cnM9IjAiIG1heE9jY3Vycz0idW5ib3VuZGVkIiB0eXBlPSJ0b        nM6UG5DaGFubmVsVHlwZUVudW1lcmF0aW9uIiBuYW1lPSJQbkNoYW5uZWxUeXBlRW51bWVyY        XRpb24iIG5pbGxhYmxlPSJ0cnVlIi8+CiAgPC94czpzZXF1ZW5jZT4KIDwveHM6Y29tcGxle        FR5cGU+CiA8eHM6ZWxlbWVudCB0eXBlPSJ0bnM6TGlzdE9mUG5DaGFubmVsVHlwZUVudW1lc        mF0aW9uIiBuYW1lPSJMaXN0T2ZQbkNoYW5uZWxUeXBlRW51bWVyYXRpb24iIG5pbGxhYmxlP        SJ0cnVlIi8+CiA8eHM6c2ltcGxlVHlwZSBuYW1lPSJQbkRldmljZVN0YXRlRW51bWVyYXRpb        24iPgogIDx4czpyZXN0cmljdGlvbiBiYXNlPSJ4czpzdHJpbmciPgogICA8eHM6ZW51bWVyY        XRpb24gdmFsdWU9Ik9GRkxJTkVfMCIvPgogICA8eHM6ZW51bWVyYXRpb24gdmFsdWU9Ik9GR        kxJTkVfRE9DS0lOR18xIi8+CiAgIDx4czplbnVtZXJhdGlvbiB2YWx1ZT0iT05MSU5FXzIiL        z4KICAgPHhzOmVudW1lcmF0aW9uIHZhbHVlPSJPTkxJTkVfRE9DS0lOR18zIi8+CiAgPC94c        zpyZXN0cmljdGlvbj4KIDwveHM6c2ltcGxlVHlwZT4KIDx4czplbGVtZW50IHR5cGU9InRuc        zpQbkRldmljZVN0YXRlRW51bWVyYXRpb24iIG5hbWU9IlBuRGV2aWNlU3RhdGVFbnVtZXJhd        GlvbiIvPgogPHhzOmNvbXBsZXhUeXBlIG5hbWU9Ikxpc3RPZlBuRGV2aWNlU3RhdGVFbnVtZ        XJhdGlvbiI+CiAgPHhzOnNlcXVlbmNlPgogICA8eHM6ZWxlbWVudCBtaW5PY2N1cnM9IjAiI        G1heE9jY3Vycz0idW5ib3VuZGVkIiB0eXBlPSJ0bnM6UG5EZXZpY2VTdGF0ZUVudW1lcmF0a        W9uIiBuYW1lPSJQbkRldmljZVN0YXRlRW51bWVyYXRpb24iIG5pbGxhYmxlPSJ0cnVlIi8+C        iAgPC94czpzZXF1ZW5jZT4KIDwveHM6Y29tcGxleFR5cGU+CiA8eHM6ZWxlbWVudCB0eXBlP        SJ0bnM6TGlzdE9mUG5EZXZpY2VTdGF0ZUVudW1lcmF0aW9uIiBuYW1lPSJMaXN0T2ZQbkRld        mljZVN0YXRlRW51bWVyYXRpb24iIG5pbGxhYmxlPSJ0cnVlIi8+CiA8eHM6c2ltcGxlVHlwZ        SBuYW1lPSJQbkxpbmtTdGF0ZUVudW1lcmF0aW9uIj4KICA8eHM6cmVzdHJpY3Rpb24gYmFzZ        T0ieHM6c3RyaW5nIj4KICAgPHhzOmVudW1lcmF0aW9uIHZhbHVlPSJVUF8xIi8+CiAgIDx4c        zplbnVtZXJhdGlvbiB2YWx1ZT0iRE9XTl8yIi8+CiAgIDx4czplbnVtZXJhdGlvbiB2YWx1Z        T0iVEVTVElOR18zIi8+CiAgIDx4czplbnVtZXJhdGlvbiB2YWx1ZT0iVU5LTk9XTl80Ii8+C        iAgIDx4czplbnVtZXJhdGlvbiB2YWx1ZT0iRE9STUFOVF81Ii8+CiAgIDx4czplbnVtZXJhd        GlvbiB2YWx1ZT0iTk9UX1BSRVNFTlRfNiIvPgogICA8eHM6ZW51bWVyYXRpb24gdmFsdWU9I        kxPV0VSX0xBWUVSX0RPV05fNyIvPgogIDwveHM6cmVzdHJpY3Rpb24+CiA8L3hzOnNpbXBsZ        VR5cGU+CiA8eHM6ZWxlbWVudCB0eXBlPSJ0bnM6UG5MaW5rU3RhdGVFbnVtZXJhdGlvbiIgb        mFtZT0iUG5MaW5rU3RhdGVFbnVtZXJhdGlvbiIvPgogPHhzOmNvbXBsZXhUeXBlIG5hbWU9I        kxpc3RPZlBuTGlua1N0YXRlRW51bWVyYXRpb24iPgogIDx4czpzZXF1ZW5jZT4KICAgPHhzO        mVsZW1lbnQgbWluT2NjdXJzPSIwIiBtYXhPY2N1cnM9InVuYm91bmRlZCIgdHlwZT0idG5zO        lBuTGlua1N0YXRlRW51bWVyYXRpb24iIG5hbWU9IlBuTGlua1N0YXRlRW51bWVyYXRpb24iI        G5pbGxhYmxlPSJ0cnVlIi8+CiAgPC94czpzZXF1ZW5jZT4KIDwveHM6Y29tcGxleFR5cGU+C        iA8eHM6ZWxlbWVudCB0eXBlPSJ0bnM6TGlzdE9mUG5MaW5rU3RhdGVFbnVtZXJhdGlvbiIgb        mFtZT0iTGlzdE9mUG5MaW5rU3RhdGVFbnVtZXJhdGlvbiIgbmlsbGFibGU9InRydWUiLz4KI        Dx4czpzaW1wbGVUeXBlIG5hbWU9IlBuTW9kdWxlU3RhdGVFbnVtZXJhdGlvbiI+CiAgPHhzO        nJlc3RyaWN0aW9uIGJhc2U9InhzOnN0cmluZyI+CiAgIDx4czplbnVtZXJhdGlvbiB2YWx1Z        T0iTk9fTU9EVUxFXzAiLz4KICAgPHhzOmVudW1lcmF0aW9uIHZhbHVlPSJXUk9OR19NT0RVT        EVfMSIvPgogICA8eHM6ZW51bWVyYXRpb24gdmFsdWU9IlBST1BFUl9NT0RVTEVfMiIvPgogI        CA8eHM6ZW51bWVyYXRpb24gdmFsdWU9IlNVQlNUSVRVVEVfMyIvPgogICA8eHM6ZW51bWVyY        XRpb24gdmFsdWU9Ik9LXzQiLz4KICA8L3hzOnJlc3RyaWN0aW9uPgogPC94czpzaW1wbGVUe        XBlPgogPHhzOmVsZW1lbnQgdHlwZT0idG5zOlBuTW9kdWxlU3RhdGVFbnVtZXJhdGlvbiIgb        mFtZT0iUG5Nb2R1bGVTdGF0ZUVudW1lcmF0aW9uIi8+CiA8eHM6Y29tcGxleFR5cGUgbmFtZ        T0iTGlzdE9mUG5Nb2R1bGVTdGF0ZUVudW1lcmF0aW9uIj4KICA8eHM6c2VxdWVuY2U+CiAgI        Dx4czplbGVtZW50IG1pbk9jY3Vycz0iMCIgbWF4T2NjdXJzPSJ1bmJvdW5kZWQiIHR5cGU9I        nRuczpQbk1vZHVsZVN0YXRlRW51bWVyYXRpb24iIG5hbWU9IlBuTW9kdWxlU3RhdGVFbnVtZ        XJhdGlvbiIgbmlsbGFibGU9InRydWUiLz4KICA8L3hzOnNlcXVlbmNlPgogPC94czpjb21wb        GV4VHlwZT4KIDx4czplbGVtZW50IHR5cGU9InRuczpMaXN0T2ZQbk1vZHVsZVN0YXRlRW51b        WVyYXRpb24iIG5hbWU9Ikxpc3RPZlBuTW9kdWxlU3RhdGVFbnVtZXJhdGlvbiIgbmlsbGFib        GU9InRydWUiLz4KIDx4czpzaW1wbGVUeXBlIG5hbWU9IlBuUG9ydFN0YXRlRW51bWVyYXRpb        24iPgogIDx4czpyZXN0cmljdGlvbiBiYXNlPSJ4czpzdHJpbmciPgogICA8eHM6ZW51bWVyY        XRpb24gdmFsdWU9IlVOS05PV05fMCIvPgogICA8eHM6ZW51bWVyYXRpb24gdmFsdWU9IkRJU        0FCTEVEX0RJU0NBUkRJTkdfMSIvPgogICA8eHM6ZW51bWVyYXRpb24gdmFsdWU9IkJMT0NLS        U5HXzIiLz4KICAgPHhzOmVudW1lcmF0aW9uIHZhbHVlPSJMSVNURU5JTkdfMyIvPgogICA8e        HM6ZW51bWVyYXRpb24gdmFsdWU9IkxFQVJOSU5HXzQiLz4KICAgPHhzOmVudW1lcmF0aW9uI        HZhbHVlPSJGT1JXQVJESU5HXzUiLz4KICAgPHhzOmVudW1lcmF0aW9uIHZhbHVlPSJCUk9LR        U5fNiIvPgogIDwveHM6cmVzdHJpY3Rpb24+CiA8L3hzOnNpbXBsZVR5cGU+CiA8eHM6ZWxlb        WVudCB0eXBlPSJ0bnM6UG5Qb3J0U3RhdGVFbnVtZXJhdGlvbiIgbmFtZT0iUG5Qb3J0U3Rhd        GVFbnVtZXJhdGlvbiIvPgogPHhzOmNvbXBsZXhUeXBlIG5hbWU9Ikxpc3RPZlBuUG9ydFN0Y        XRlRW51bWVyYXRpb24iPgogIDx4czpzZXF1ZW5jZT4KICAgPHhzOmVsZW1lbnQgbWluT2Njd        XJzPSIwIiBtYXhPY2N1cnM9InVuYm91bmRlZCIgdHlwZT0idG5zOlBuUG9ydFN0YXRlRW51b        WVyYXRpb24iIG5hbWU9IlBuUG9ydFN0YXRlRW51bWVyYXRpb24iIG5pbGxhYmxlPSJ0cnVlI        i8+CiAgPC94czpzZXF1ZW5jZT4KIDwveHM6Y29tcGxleFR5cGU+CiA8eHM6ZWxlbWVudCB0e        XBlPSJ0bnM6TGlzdE9mUG5Qb3J0U3RhdGVFbnVtZXJhdGlvbiIgbmFtZT0iTGlzdE9mUG5Qb        3J0U3RhdGVFbnVtZXJhdGlvbiIgbmlsbGFibGU9InRydWUiLz4KIDx4czpzaW1wbGVUeXBlI        G5hbWU9IlBuU3VibW9kdWxlQWRkSW5mb0VudW1lcmF0aW9uIj4KICA8eHM6cmVzdHJpY3Rpb        24gYmFzZT0ieHM6c3RyaW5nIj4KICAgPHhzOmVudW1lcmF0aW9uIHZhbHVlPSJOT19BRERfS        U5GT18wIi8+CiAgIDx4czplbnVtZXJhdGlvbiB2YWx1ZT0iVEFLRU9WRVJfTk9UX0FMTE9XR        URfMSIvPgogIDwveHM6cmVzdHJpY3Rpb24+CiA8L3hzOnNpbXBsZVR5cGU+CiA8eHM6ZWxlb        WVudCB0eXBlPSJ0bnM6UG5TdWJtb2R1bGVBZGRJbmZvRW51bWVyYXRpb24iIG5hbWU9IlBuU        3VibW9kdWxlQWRkSW5mb0VudW1lcmF0aW9uIi8+CiA8eHM6Y29tcGxleFR5cGUgbmFtZT0iT        GlzdE9mUG5TdWJtb2R1bGVBZGRJbmZvRW51bWVyYXRpb24iPgogIDx4czpzZXF1ZW5jZT4KI        CAgPHhzOmVsZW1lbnQgbWluT2NjdXJzPSIwIiBtYXhPY2N1cnM9InVuYm91bmRlZCIgdHlwZ        T0idG5zOlBuU3VibW9kdWxlQWRkSW5mb0VudW1lcmF0aW9uIiBuYW1lPSJQblN1Ym1vZHVsZ        UFkZEluZm9FbnVtZXJhdGlvbiIgbmlsbGFibGU9InRydWUiLz4KICA8L3hzOnNlcXVlbmNlP        gogPC94czpjb21wbGV4VHlwZT4KIDx4czplbGVtZW50IHR5cGU9InRuczpMaXN0T2ZQblN1Y        m1vZHVsZUFkZEluZm9FbnVtZXJhdGlvbiIgbmFtZT0iTGlzdE9mUG5TdWJtb2R1bGVBZGRJb        mZvRW51bWVyYXRpb24iIG5pbGxhYmxlPSJ0cnVlIi8+CiA8eHM6c2ltcGxlVHlwZSBuYW1lP        SJQblN1Ym1vZHVsZUFSSW5mb0VudW1lcmF0aW9uIj4KICA8eHM6cmVzdHJpY3Rpb24gYmFzZ        T0ieHM6c3RyaW5nIj4KICAgPHhzOmVudW1lcmF0aW9uIHZhbHVlPSJPV05fMCIvPgogICA8e        HM6ZW51bWVyYXRpb24gdmFsdWU9IkFQUExJQ0FUSU9OX1JFQURZX1BFTkRJTkdfMTI4Ii8+C        iAgIDx4czplbnVtZXJhdGlvbiB2YWx1ZT0iU1VQRVJPUkRJTkFURURfTE9DS0VEXzI1NiIvP        gogICA8eHM6ZW51bWVyYXRpb24gdmFsdWU9IkxPQ0tFRF9CWV9JT19DT05UUk9MTEVSXzM4N        CIvPgogICA8eHM6ZW51bWVyYXRpb24gdmFsdWU9IkxPQ0tFRF9CWV9JT19TVVBFUlZJU09SX        zUxMiIvPgogIDwveHM6cmVzdHJpY3Rpb24+CiA8L3hzOnNpbXBsZVR5cGU+CiA8eHM6ZWxlb        WVudCB0eXBlPSJ0bnM6UG5TdWJtb2R1bGVBUkluZm9FbnVtZXJhdGlvbiIgbmFtZT0iUG5Td        WJtb2R1bGVBUkluZm9FbnVtZXJhdGlvbiIvPgogPHhzOmNvbXBsZXhUeXBlIG5hbWU9Ikxpc        3RPZlBuU3VibW9kdWxlQVJJbmZvRW51bWVyYXRpb24iPgogIDx4czpzZXF1ZW5jZT4KICAgP        HhzOmVsZW1lbnQgbWluT2NjdXJzPSIwIiBtYXhPY2N1cnM9InVuYm91bmRlZCIgdHlwZT0id        G5zOlBuU3VibW9kdWxlQVJJbmZvRW51bWVyYXRpb24iIG5hbWU9IlBuU3VibW9kdWxlQVJJb        mZvRW51bWVyYXRpb24iIG5pbGxhYmxlPSJ0cnVlIi8+CiAgPC94czpzZXF1ZW5jZT4KIDwve        HM6Y29tcGxleFR5cGU+CiA8eHM6ZWxlbWVudCB0eXBlPSJ0bnM6TGlzdE9mUG5TdWJtb2R1b        GVBUkluZm9FbnVtZXJhdGlvbiIgbmFtZT0iTGlzdE9mUG5TdWJtb2R1bGVBUkluZm9FbnVtZ        XJhdGlvbiIgbmlsbGFibGU9InRydWUiLz4KIDx4czpzaW1wbGVUeXBlIG5hbWU9IlBuU3Vib        W9kdWxlSWRlbnRJbmZvRW51bWVyYXRpb24iPgogIDx4czpyZXN0cmljdGlvbiBiYXNlPSJ4c        zpzdHJpbmciPgogICA8eHM6ZW51bWVyYXRpb24gdmFsdWU9Ik9LXzAiLz4KICAgPHhzOmVud        W1lcmF0aW9uIHZhbHVlPSJTVUJTVElUVVRFXzIwNDgiLz4KICAgPHhzOmVudW1lcmF0aW9uI        HZhbHVlPSJXUk9OR180MDk2Ii8+CiAgIDx4czplbnVtZXJhdGlvbiB2YWx1ZT0iTk9fU1VCT        U9EVUxFXzYxNDQiLz4KICA8L3hzOnJlc3RyaWN0aW9uPgogPC94czpzaW1wbGVUeXBlPgogP        HhzOmVsZW1lbnQgdHlwZT0idG5zOlBuU3VibW9kdWxlSWRlbnRJbmZvRW51bWVyYXRpb24iI        G5hbWU9IlBuU3VibW9kdWxlSWRlbnRJbmZvRW51bWVyYXRpb24iLz4KIDx4czpjb21wbGV4V        HlwZSBuYW1lPSJMaXN0T2ZQblN1Ym1vZHVsZUlkZW50SW5mb0VudW1lcmF0aW9uIj4KICA8e        HM6c2VxdWVuY2U+CiAgIDx4czplbGVtZW50IG1pbk9jY3Vycz0iMCIgbWF4T2NjdXJzPSJ1b        mJvdW5kZWQiIHR5cGU9InRuczpQblN1Ym1vZHVsZUlkZW50SW5mb0VudW1lcmF0aW9uIiBuY        W1lPSJQblN1Ym1vZHVsZUlkZW50SW5mb0VudW1lcmF0aW9uIiBuaWxsYWJsZT0idHJ1ZSIvP        gogIDwveHM6c2VxdWVuY2U+CiA8L3hzOmNvbXBsZXhUeXBlPgogPHhzOmVsZW1lbnQgdHlwZ        T0idG5zOkxpc3RPZlBuU3VibW9kdWxlSWRlbnRJbmZvRW51bWVyYXRpb24iIG5hbWU9Ikxpc        3RPZlBuU3VibW9kdWxlSWRlbnRJbmZvRW51bWVyYXRpb24iIG5pbGxhYmxlPSJ0cnVlIi8+C        iA8eHM6Y29tcGxleFR5cGUgbmFtZT0iUG5EZXZpY2VSb2xlT3B0aW9uU2V0Ij4KICA8eHM6Y        29tcGxleENvbnRlbnQgbWl4ZWQ9ImZhbHNlIj4KICAgPHhzOmV4dGVuc2lvbiBiYXNlPSJ1Y        TpPcHRpb25TZXQiPgogICAgPHhzOnNlcXVlbmNlLz4KICAgPC94czpleHRlbnNpb24+CiAgP        C94czpjb21wbGV4Q29udGVudD4KIDwveHM6Y29tcGxleFR5cGU+CiA8eHM6ZWxlbWVudCB0e        XBlPSJ0bnM6UG5EZXZpY2VSb2xlT3B0aW9uU2V0IiBuYW1lPSJQbkRldmljZVJvbGVPcHRpb        25TZXQiLz4KIDx4czpjb21wbGV4VHlwZSBuYW1lPSJMaXN0T2ZQbkRldmljZVJvbGVPcHRpb        25TZXQiPgogIDx4czpzZXF1ZW5jZT4KICAgPHhzOmVsZW1lbnQgbWluT2NjdXJzPSIwIiBtY        XhPY2N1cnM9InVuYm91bmRlZCIgdHlwZT0idG5zOlBuRGV2aWNlUm9sZU9wdGlvblNldCIgb        mFtZT0iUG5EZXZpY2VSb2xlT3B0aW9uU2V0IiBuaWxsYWJsZT0idHJ1ZSIvPgogIDwveHM6c        2VxdWVuY2U+CiA8L3hzOmNvbXBsZXhUeXBlPgogPHhzOmVsZW1lbnQgdHlwZT0idG5zOkxpc        3RPZlBuRGV2aWNlUm9sZU9wdGlvblNldCIgbmFtZT0iTGlzdE9mUG5EZXZpY2VSb2xlT3B0a        W9uU2V0IiBuaWxsYWJsZT0idHJ1ZSIvPgogPHhzOmNvbXBsZXhUeXBlIG5hbWU9IlBuRGV2a        WNlRGlhZ25vc2lzRGF0YVR5cGUiPgogIDx4czpzZXF1ZW5jZT4KICAgPHhzOmVsZW1lbnQgb        WluT2NjdXJzPSIwIiBtYXhPY2N1cnM9IjEiIHR5cGU9InhzOnVuc2lnbmVkSW50IiBuYW1lP        SJBUEkiLz4KICAgPHhzOmVsZW1lbnQgbWluT2NjdXJzPSIwIiBtYXhPY2N1cnM9IjEiIHR5c        GU9InhzOnVuc2lnbmVkU2hvcnQiIG5hbWU9IlNsb3QiLz4KICAgPHhzOmVsZW1lbnQgbWluT        2NjdXJzPSIwIiBtYXhPY2N1cnM9IjEiIHR5cGU9InhzOnVuc2lnbmVkU2hvcnQiIG5hbWU9I        lN1YnNsb3QiLz4KICAgPHhzOmVsZW1lbnQgbWluT2NjdXJzPSIwIiBtYXhPY2N1cnM9IjEiI        HR5cGU9InhzOnVuc2lnbmVkU2hvcnQiIG5hbWU9IkNoYW5uZWxOdW1iZXIiLz4KICAgPHhzO        mVsZW1lbnQgbWluT2NjdXJzPSIwIiBtYXhPY2N1cnM9IjEiIHR5cGU9InRuczpQbkNoYW5uZ        WxUeXBlRW51bWVyYXRpb24iIG5hbWU9IlR5cGUiLz4KICAgPHhzOmVsZW1lbnQgbWluT2Njd        XJzPSIwIiBtYXhPY2N1cnM9IjEiIHR5cGU9InRuczpQbkNoYW5uZWxBY2N1bXVsYXRpdmVFb        nVtZXJhdGlvbiIgbmFtZT0iQWNjdW11bGF0aXZlIi8+CiAgIDx4czplbGVtZW50IG1pbk9jY        3Vycz0iMCIgbWF4T2NjdXJzPSIxIiB0eXBlPSJ0bnM6UG5DaGFubmVsTWFpbnRlbmFuY2VFb        nVtZXJhdGlvbiIgbmFtZT0iTWFpbnRlbmFuY2UiLz4KICAgPHhzOmVsZW1lbnQgbWluT2Njd        XJzPSIwIiBtYXhPY2N1cnM9IjEiIHR5cGU9InRuczpQbkNoYW5uZWxTcGVjaWZpZXJFbnVtZ        XJhdGlvbiIgbmFtZT0iU3BlY2lmaWVyIi8+CiAgIDx4czplbGVtZW50IG1pbk9jY3Vycz0iM        CIgbWF4T2NjdXJzPSIxIiB0eXBlPSJ0bnM6UG5DaGFubmVsRGlyZWN0aW9uRW51bWVyYXRpb        24iIG5hbWU9IkRpcmVjdGlvbiIvPgogICA8eHM6ZWxlbWVudCBtaW5PY2N1cnM9IjAiIG1he        E9jY3Vycz0iMSIgdHlwZT0ieHM6dW5zaWduZWRTaG9ydCIgbmFtZT0iVXNlclN0cnVjdHVyZ        UlkZW50aWZpZXIiLz4KICAgPHhzOmVsZW1lbnQgbWluT2NjdXJzPSIwIiBtYXhPY2N1cnM9I        jEiIHR5cGU9InhzOnVuc2lnbmVkU2hvcnQiIG5hbWU9IkNoYW5uZWxFcnJvclR5cGUiLz4KI        CAgPHhzOmVsZW1lbnQgbWluT2NjdXJzPSIwIiBtYXhPY2N1cnM9IjEiIHR5cGU9InhzOnVuc        2lnbmVkU2hvcnQiIG5hbWU9IkV4dENoYW5uZWxFcnJvclR5cGUiLz4KICAgPHhzOmVsZW1lb        nQgbWluT2NjdXJzPSIwIiBtYXhPY2N1cnM9IjEiIHR5cGU9InhzOnVuc2lnbmVkSW50IiBuY        W1lPSJFeHRDaGFubmVsQWRkVmFsdWUiLz4KICAgPHhzOmVsZW1lbnQgbWluT2NjdXJzPSIwI        iBtYXhPY2N1cnM9IjEiIHR5cGU9InhzOnVuc2lnbmVkSW50IiBuYW1lPSJRdWFsaWZpZWRDa        GFubmVsUXVhbGlmaWVyIi8+CiAgIDx4czplbGVtZW50IG1pbk9jY3Vycz0iMCIgbWF4T2Njd        XJzPSIxIiB0eXBlPSJ4czpiYXNlNjRCaW5hcnkiIG5hbWU9Ik1hbnVmYWN0dXJlckRhdGEiL        z4KICAgPHhzOmVsZW1lbnQgbWluT2NjdXJzPSIwIiBtYXhPY2N1cnM9IjEiIHR5cGU9InVhO        kxvY2FsaXplZFRleHQiIG5hbWU9Ik1lc3NhZ2UiLz4KICAgPHhzOmVsZW1lbnQgbWluT2Njd        XJzPSIwIiBtYXhPY2N1cnM9IjEiIHR5cGU9InVhOkxvY2FsaXplZFRleHQiIG5hbWU9Ikhlb        HBUZXh0Ii8+CiAgPC94czpzZXF1ZW5jZT4KIDwveHM6Y29tcGxleFR5cGU+CiA8eHM6ZWxlb        WVudCB0eXBlPSJ0bnM6UG5EZXZpY2VEaWFnbm9zaXNEYXRhVHlwZSIgbmFtZT0iUG5EZXZpY        2VEaWFnbm9zaXNEYXRhVHlwZSIvPgogPHhzOmNvbXBsZXhUeXBlIG5hbWU9Ikxpc3RPZlBuR        GV2aWNlRGlhZ25vc2lzRGF0YVR5cGUiPgogIDx4czpzZXF1ZW5jZT4KICAgPHhzOmVsZW1lb        nQgbWluT2NjdXJzPSIwIiBtYXhPY2N1cnM9InVuYm91bmRlZCIgdHlwZT0idG5zOlBuRGV2a        WNlRGlhZ25vc2lzRGF0YVR5cGUiIG5hbWU9IlBuRGV2aWNlRGlhZ25vc2lzRGF0YVR5cGUiI        G5pbGxhYmxlPSJ0cnVlIi8+CiAgPC94czpzZXF1ZW5jZT4KIDwveHM6Y29tcGxleFR5cGU+C        iA8eHM6ZWxlbWVudCB0eXBlPSJ0bnM6TGlzdE9mUG5EZXZpY2VEaWFnbm9zaXNEYXRhVHlwZ        SIgbmFtZT0iTGlzdE9mUG5EZXZpY2VEaWFnbm9zaXNEYXRhVHlwZSIgbmlsbGFibGU9InRyd        WUiLz4KIDx4czpjb21wbGV4VHlwZSBuYW1lPSJQbklNNURhdGFUeXBlIj4KICA8eHM6YW5ub        3RhdGlvbj4KICAgPHhzOmRvY3VtZW50YXRpb24+Q29udGFpbnMgdGhlIGZpZWxkcyBvZiB0a        GUgQVBEVSBlbGVtZW50IEkmYW1wO001IHwgSSZhbXA7TTVEYXRhPC94czpkb2N1bWVudGF0a        W9uPgogIDwveHM6YW5ub3RhdGlvbj4KICA8eHM6c2VxdWVuY2U+CiAgIDx4czplbGVtZW50I        G1pbk9jY3Vycz0iMCIgbWF4T2NjdXJzPSIxIiB0eXBlPSJ4czpzdHJpbmciIG5hbWU9IkFub        m90YXRpb24iLz4KICAgPHhzOmVsZW1lbnQgbWluT2NjdXJzPSIwIiBtYXhPY2N1cnM9IjEiI        HR5cGU9InhzOnN0cmluZyIgbmFtZT0iT3JkZXJJZCIvPgogICA8eHM6ZWxlbWVudCBtaW5PY        2N1cnM9IjAiIG1heE9jY3Vycz0iMSIgdHlwZT0ieHM6dW5zaWduZWRTaG9ydCIgbmFtZT0iV        mVuZG9ySWQiLz4KICAgPHhzOmVsZW1lbnQgbWluT2NjdXJzPSIwIiBtYXhPY2N1cnM9IjEiI        HR5cGU9InhzOnN0cmluZyIgbmFtZT0iU2VyaWFsTnVtYmVyIi8+CiAgIDx4czplbGVtZW50I        G1pbk9jY3Vycz0iMCIgbWF4T2NjdXJzPSIxIiB0eXBlPSJ4czpzdHJpbmciIG5hbWU9Ikhhc        mR3YXJlUmV2aXNpb24iLz4KICAgPHhzOmVsZW1lbnQgbWluT2NjdXJzPSIwIiBtYXhPY2N1c        nM9IjEiIHR5cGU9InhzOnN0cmluZyIgbmFtZT0iU29mdHdhcmVSZXZpc2lvbiIvPgogIDwve        HM6c2VxdWVuY2U+CiA8L3hzOmNvbXBsZXhUeXBlPgogPHhzOmVsZW1lbnQgdHlwZT0idG5zO        lBuSU01RGF0YVR5cGUiIG5hbWU9IlBuSU01RGF0YVR5cGUiLz4KIDx4czpjb21wbGV4VHlwZ        SBuYW1lPSJMaXN0T2ZQbklNNURhdGFUeXBlIj4KICA8eHM6c2VxdWVuY2U+CiAgIDx4czplb        GVtZW50IG1pbk9jY3Vycz0iMCIgbWF4T2NjdXJzPSJ1bmJvdW5kZWQiIHR5cGU9InRuczpQb        klNNURhdGFUeXBlIiBuYW1lPSJQbklNNURhdGFUeXBlIiBuaWxsYWJsZT0idHJ1ZSIvPgogI        DwveHM6c2VxdWVuY2U+CiA8L3hzOmNvbXBsZXhUeXBlPgogPHhzOmVsZW1lbnQgdHlwZT0id        G5zOkxpc3RPZlBuSU01RGF0YVR5cGUiIG5hbWU9Ikxpc3RPZlBuSU01RGF0YVR5cGUiIG5pb        GxhYmxlPSJ0cnVlIi8+CjwveHM6c2NoZW1hPgo=",
                            )
                            .unwrap(),
                    ),
                ),
                1u8,
                1u8,
                None,
                Some(0f64),
            )
            .into(),
        references: vec![
            opcua::nodes::ImportedReference { target_id : opcua::types::NodeId::new(0u16,
            72u32), type_id : opcua::types::NodeId::new(0u16, 40u32), is_forward : true,
            }, opcua::nodes::ImportedReference { target_id :
            opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6005u32), type_id
            : opcua::types::NodeId::new(0u16, 46u32), is_forward : true, },
            opcua::nodes::ImportedReference { target_id :
            opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6043u32), type_id
            : opcua::types::NodeId::new(0u16, 47u32), is_forward : true, },
            opcua::nodes::ImportedReference { target_id :
            opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6007u32), type_id
            : opcua::types::NodeId::new(0u16, 47u32), is_forward : true, },
            opcua::nodes::ImportedReference { target_id :
            opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6045u32), type_id
            : opcua::types::NodeId::new(0u16, 47u32), is_forward : true, },
            opcua::nodes::ImportedReference { target_id : opcua::types::NodeId::new(0u16,
            92u32), type_id : opcua::types::NodeId::new(0u16, 47u32), is_forward : false,
            }
        ],
    }
}
#[allow(unused)]
fn make_variable_46(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6005u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "NamespaceUri"),
                opcua::types::LocalizedText::new("", "NamespaceUri"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(
                "http://opcfoundation.org/UA/PROFINET/Types.xsd",
            )),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6004u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_47(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6007u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(
                    ns_map.get_index(1u16).unwrap(),
                    "PnDeviceRoleOptionSet",
                ),
                opcua::types::LocalizedText::new("", "PnDeviceRoleOptionSet"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(
                "//xs:element[@name='PnDeviceRoleOptionSet']",
            )),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 69u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5002u32),
                type_id: opcua::types::NodeId::new(0u16, 39u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6004u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_5(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
                opcua::nodes::Base::new_full(
                    opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6010u32),
                    opcua::types::NodeClass::Variable,
                    opcua::types::QualifiedName::new(0u16, "EnumValues"),
                    opcua::types::LocalizedText::new("", "EnumValues"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                opcua::types::NodeId::new(0u16, 7594u32),
                false,
                1i32,
                opcua::types::DataValue::new_now(
                    opcua::types::Variant::from(
                        vec![
                            opcua::types::ExtensionObject::from_message_full(&
                            opcua::types::EnumValueType { description :
                            opcua::types::LocalizedText::new("", ""), display_name :
                            opcua::types::LocalizedText::new("", "IOCARSingle"), value :
                            0i64, }, ns_map.namespaces()).expect("Invalid encoding ID"),
                            opcua::types::ExtensionObject::from_message_full(&
                            opcua::types::EnumValueType { description :
                            opcua::types::LocalizedText::new("",
                            "The supervisor AR is a special form of the IOCARSingle allowing takeover of the ownership of a submodule"),
                            display_name : opcua::types::LocalizedText::new("", "IOSAR"),
                            value : 6i64, }, ns_map.namespaces())
                            .expect("Invalid encoding ID"),
                            opcua::types::ExtensionObject::from_message_full(&
                            opcua::types::EnumValueType { description :
                            opcua::types::LocalizedText::new("",
                            "This is a special form of the IOCARSingle indicating RT_CLASS_3 communication"),
                            display_name : opcua::types::LocalizedText::new("",
                            "IOCARSingleUsingRT_CLASS_3"), value : 16i64, }, ns_map
                            .namespaces()).expect("Invalid encoding ID"),
                            opcua::types::ExtensionObject::from_message_full(&
                            opcua::types::EnumValueType { description :
                            opcua::types::LocalizedText::new("",
                            "The SR AR is a special form of the IOCARSingle indicating system redundancy or dynamic reconfiguration usage"),
                            display_name : opcua::types::LocalizedText::new("",
                            "IOCARSR"), value : 32i64, }, ns_map.namespaces())
                            .expect("Invalid encoding ID"),
                        ],
                    ),
                ),
                1u8,
                1u8,
                Some(vec![4u32]),
                Some(0f64),
            )
            .into(),
        references: vec![
            opcua::nodes::ImportedReference { target_id :
            opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 3005u32), type_id
            : opcua::types::NodeId::new(0u16, 46u32), is_forward : false, },
            opcua::nodes::ImportedReference { target_id : opcua::types::NodeId::new(0u16,
            78u32), type_id : opcua::types::NodeId::new(0u16, 37u32), is_forward : true,
            }, opcua::nodes::ImportedReference { target_id :
            opcua::types::NodeId::new(0u16, 68u32), type_id :
            opcua::types::NodeId::new(0u16, 40u32), is_forward : true, }
        ],
    }
}
#[allow(unused)]
fn make_variable_64(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6029u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "Accumulative"),
                opcua::types::LocalizedText::new("", "Accumulative"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 3011u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1002u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_65(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6024u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "API"),
                opcua::types::LocalizedText::new("", "API"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 7u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1002u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_66(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6034u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(
                    ns_map.get_index(1u16).unwrap(),
                    "ChannelErrorType",
                ),
                opcua::types::LocalizedText::new("", "ChannelErrorType"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 5u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1002u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_67(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6027u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "ChannelNumber"),
                opcua::types::LocalizedText::new("", "ChannelNumber"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 5u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1002u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_68(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6032u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "Direction"),
                opcua::types::LocalizedText::new("", "Direction"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 3014u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1002u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_69(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6036u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(
                    ns_map.get_index(1u16).unwrap(),
                    "ExtChannelAddValue",
                ),
                opcua::types::LocalizedText::new("", "ExtChannelAddValue"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 7u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1002u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 80u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_7(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6021u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "EnumValues"),
                opcua::types::LocalizedText::new("", "EnumValues"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 7594u32),
            false,
            1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(vec![
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: opcua::types::LocalizedText::new("", "Asset has been added"),
                        display_name: opcua::types::LocalizedText::new("", "INSERTED"),
                        value: 0i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: opcua::types::LocalizedText::new("", "Asset has been removed"),
                        display_name: opcua::types::LocalizedText::new("", "REMOVED"),
                        value: 1i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: opcua::types::LocalizedText::new("", "Asset has been changed"),
                        display_name: opcua::types::LocalizedText::new("", "CHANGED"),
                        value: 2i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
            ])),
            1u8,
            1u8,
            Some(vec![3u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 3016u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_70(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6035u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(
                    ns_map.get_index(1u16).unwrap(),
                    "ExtChannelErrorType",
                ),
                opcua::types::LocalizedText::new("", "ExtChannelErrorType"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 5u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1002u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 80u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_71(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6039u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "HelpText"),
                opcua::types::LocalizedText::new("", "HelpText"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 21u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1002u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 80u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_72(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6030u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "Maintenance"),
                opcua::types::LocalizedText::new("", "Maintenance"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 3012u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1002u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 80u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_73(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6038u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(
                    ns_map.get_index(1u16).unwrap(),
                    "ManufacturerData",
                ),
                opcua::types::LocalizedText::new("", "ManufacturerData"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 15u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1002u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 80u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_74(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6037u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(
                    ns_map.get_index(1u16).unwrap(),
                    "QualifiedChannelQualifier",
                ),
                opcua::types::LocalizedText::new("", "QualifiedChannelQualifier"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 7u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 80u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1002u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_75(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6025u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "Slot"),
                opcua::types::LocalizedText::new("", "Slot"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 5u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1002u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_76(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6031u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "Specifier"),
                opcua::types::LocalizedText::new("", "Specifier"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 3013u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1002u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_77(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6026u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "Subslot"),
                opcua::types::LocalizedText::new("", "Subslot"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 5u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1002u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_78(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6028u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "Type"),
                opcua::types::LocalizedText::new("", "Type"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 3010u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1002u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_79(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6033u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(
                    ns_map.get_index(1u16).unwrap(),
                    "UserStructureIdentifier",
                ),
                opcua::types::LocalizedText::new("", "UserStructureIdentifier"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 5u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1002u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_81(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6041u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "AssetChange"),
                opcua::types::LocalizedText::new("", "AssetChange"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 3016u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1003u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_82(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6040u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "AssetType"),
                opcua::types::LocalizedText::new("", "AssetType"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 3015u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1003u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_89(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
                opcua::nodes::Base::new_full(
                    opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6176u32),
                    opcua::types::NodeClass::Variable,
                    opcua::types::QualifiedName::new(
                        ns_map.get_index(1u16).unwrap(),
                        "Diagnosis",
                    ),
                    opcua::types::LocalizedText::new("", "Diagnosis"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 3019u32),
                false,
                1i32,
                opcua::types::DataValue::new_now(
                    opcua::types::Variant::from(
                        vec![
                            opcua::types::ExtensionObject::from_message_full(& crate
                            ::generated::types::PnDeviceDiagnosisDataType { api : 0u32,
                            accumulative : crate
                            ::generated::types::PnChannelAccumulativeEnumeration::SINGLE,
                            channel_error_type : 0u16, channel_number : 0u16, direction :
                            crate
                            ::generated::types::PnChannelDirectionEnumeration::MANUFACTURER_SPECIFIC,
                            ext_channel_add_value : 0u32, ext_channel_error_type : 0u16,
                            help_text : opcua::types::LocalizedText::new("", ""),
                            maintenance : crate
                            ::generated::types::PnChannelMaintenanceEnumeration::FAULT,
                            manufacturer_data : Default::default(), message :
                            opcua::types::LocalizedText::new("", ""),
                            qualified_channel_qualifier : 0u32, slot : 0u16, specifier :
                            crate
                            ::generated::types::PnChannelSpecifierEnumeration::ALL_DISAPPEARS,
                            subslot : 0u16, __type : crate
                            ::generated::types::PnChannelTypeEnumeration::UNSPECIFIC,
                            user_structure_identifier : 0u16, }, ns_map.namespaces())
                            .expect("Invalid encoding ID"),
                        ],
                    ),
                ),
                1u8,
                1u8,
                Some(vec![0u32]),
                Some(0f64),
            )
            .into(),
        references: vec![
            opcua::nodes::ImportedReference { target_id : opcua::types::NodeId::new(0u16,
            63u32), type_id : opcua::types::NodeId::new(0u16, 40u32), is_forward : true,
            }, opcua::nodes::ImportedReference { target_id :
            opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 1032u32), type_id
            : opcua::types::NodeId::new(0u16, 47u32), is_forward : false, },
            opcua::nodes::ImportedReference { target_id : opcua::types::NodeId::new(0u16,
            80u32), type_id : opcua::types::NodeId::new(0u16, 37u32), is_forward : true,
            }
        ],
    }
}
#[allow(unused)]
fn make_variable_9(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6020u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "EnumValues"),
                opcua::types::LocalizedText::new("", "EnumValues"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 7594u32),
            false,
            1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(vec![
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: opcua::types::LocalizedText::new("", "Device"),
                        display_name: opcua::types::LocalizedText::new("", "DEVICE"),
                        value: 0i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: opcua::types::LocalizedText::new("", "Real Module"),
                        display_name: opcua::types::LocalizedText::new("", "MODULE"),
                        value: 1i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: opcua::types::LocalizedText::new("", "Real Submodule"),
                        display_name: opcua::types::LocalizedText::new("", "SUBMODULE"),
                        value: 2i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: opcua::types::LocalizedText::new("", "Asset"),
                        display_name: opcua::types::LocalizedText::new("", "ASSET"),
                        value: 3i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
            ])),
            1u8,
            1u8,
            Some(vec![4u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 3015u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_91(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6167u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(
                    ns_map.get_index(1u16).unwrap(),
                    "HardwareRevision",
                ),
                opcua::types::LocalizedText::new("", "HardwareRevision"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5040u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_92(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6168u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "OrderId"),
                opcua::types::LocalizedText::new("", "OrderId"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5040u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_93(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6169u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "ProfileId"),
                opcua::types::LocalizedText::new("", "ProfileId"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 7u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5040u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_94(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6170u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(
                    ns_map.get_index(1u16).unwrap(),
                    "ProfileSpecificType",
                ),
                opcua::types::LocalizedText::new("", "ProfileSpecificType"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 5u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5040u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_95(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6171u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "SerialNumber"),
                opcua::types::LocalizedText::new("", "SerialNumber"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5040u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_96(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6172u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(
                    ns_map.get_index(1u16).unwrap(),
                    "SoftwareRevision",
                ),
                opcua::types::LocalizedText::new("", "SoftwareRevision"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5040u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_97(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6173u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "VendorId"),
                opcua::types::LocalizedText::new("", "VendorId"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 5u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5040u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_98(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 6174u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(ns_map.get_index(1u16).unwrap(), "Version"),
                opcua::types::LocalizedText::new("", "Version"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(ns_map.get_index(1u16).unwrap(), 5040u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
