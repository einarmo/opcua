// This file was autogenerated from schemas/1.05/Opc.Ua.NodeSet2.xml by opcua-codegen
//
// DO NOT EDIT THIS FILE

// OPCUA for Rust
// SPDX-License-Identifier: MPL-2.0
// Copyright (C) 2017-2024 Adam Lock, Einar Omang
#[allow(unused)]
mod opcua {
    pub use opcua_nodes as nodes;
    pub use opcua_types as types;
}
pub(super) fn imported_nodes<'a>(
    ns_map: &'a opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> Box<dyn Iterator<Item = opcua::nodes::ImportedItem> + 'a> {
    Box::new(
        [
            &make_variable_3763 as &dyn Fn(_) -> opcua::nodes::ImportedItem,
            &make_variable_3764,
            &make_variable_3765,
            &make_variable_3766,
            &make_variable_3768,
            &make_variable_3769,
            &make_variable_3770,
            &make_variable_3771,
            &make_variable_3772,
            &make_variable_3774,
            &make_variable_3775,
            &make_variable_3777,
            &make_variable_378,
            &make_variable_3783,
            &make_variable_3784,
            &make_variable_3785,
            &make_variable_3787,
            &make_variable_3788,
            &make_variable_3789,
            &make_variable_379,
            &make_variable_3794,
            &make_variable_3795,
            &make_variable_3796,
            &make_variable_3799,
            &make_variable_380,
            &make_variable_3800,
            &make_variable_3803,
            &make_variable_3804,
            &make_variable_3806,
            &make_variable_3807,
            &make_variable_3808,
            &make_variable_3809,
            &make_variable_381,
            &make_variable_3811,
            &make_variable_3813,
            &make_variable_3815,
            &make_variable_3817,
            &make_variable_3819,
            &make_variable_382,
            &make_variable_3821,
            &make_variable_3824,
            &make_variable_3825,
            &make_variable_3826,
            &make_variable_3827,
            &make_variable_3829,
            &make_variable_383,
            &make_variable_3831,
            &make_variable_3833,
            &make_variable_3835,
            &make_variable_3837,
            &make_variable_3838,
            &make_variable_384,
            &make_variable_3840,
            &make_variable_3843,
            &make_variable_3844,
            &make_variable_3845,
            &make_variable_3846,
            &make_variable_3848,
            &make_variable_385,
            &make_variable_3850,
            &make_variable_3852,
            &make_variable_3857,
            &make_variable_3858,
            &make_variable_3859,
            &make_variable_386,
            &make_variable_3860,
            &make_variable_3862,
            &make_variable_3863,
            &make_variable_3865,
            &make_variable_3867,
            &make_variable_3868,
            &make_variable_387,
            &make_variable_3870,
            &make_variable_3872,
            &make_variable_3873,
            &make_variable_3875,
            &make_variable_3876,
            &make_variable_3878,
            &make_variable_3879,
            &make_variable_388,
            &make_variable_3881,
            &make_variable_3882,
            &make_variable_3884,
            &make_variable_3886,
            &make_variable_3887,
            &make_variable_3888,
            &make_variable_3889,
            &make_variable_389,
            &make_variable_3890,
            &make_variable_3891,
            &make_variable_3892,
            &make_variable_3893,
            &make_variable_3894,
            &make_variable_3896,
            &make_variable_3897,
            &make_variable_3900,
            &make_variable_3901,
            &make_variable_3903,
            &make_variable_3904,
            &make_variable_3906,
        ]
        .into_iter()
        .map(|f| f(ns_map)),
    )
}
#[allow(unused)]
fn make_variable_3763(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 15250u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "ResourceUri"),
                opcua::types::LocalizedText::new("", "ResourceUri"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 21138u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3764(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 15251u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "AuthenticationProfileUri"),
                opcua::types::LocalizedText::new("", "AuthenticationProfileUri"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 21138u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3765(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 15330u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "RequestedDeliveryGuarantee"),
                opcua::types::LocalizedText::new("", "RequestedDeliveryGuarantee"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 15008u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 21138u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3766(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 21141u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "MetaDataUpdateTime"),
                opcua::types::LocalizedText::new("", "MetaDataUpdateTime"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 290u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 21138u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3768(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 21143u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "QueueName"),
                opcua::types::LocalizedText::new("", "QueueName"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 21142u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3769(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 15334u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "ResourceUri"),
                opcua::types::LocalizedText::new("", "ResourceUri"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 21142u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3770(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 15419u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "AuthenticationProfileUri"),
                opcua::types::LocalizedText::new("", "AuthenticationProfileUri"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 21142u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3771(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 15420u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "RequestedDeliveryGuarantee"),
                opcua::types::LocalizedText::new("", "RequestedDeliveryGuarantee"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 15008u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 21142u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3772(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 21144u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "MetaDataQueueName"),
                opcua::types::LocalizedText::new("", "MetaDataQueueName"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 21142u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3774(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 21146u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "NetworkInterface"),
                opcua::types::LocalizedText::new("", "NetworkInterface"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 17582u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 16309u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 21145u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3775(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 17582u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "Selections"),
                opcua::types::LocalizedText::new("", "Selections"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 24u32),
            false,
            1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 21146u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3777(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 21149u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "Url"),
                opcua::types::LocalizedText::new("", "Url"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 63u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 21147u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_378(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 11565u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "MaxNodesPerRead"),
                opcua::types::LocalizedText::new("", "MaxNodesPerRead"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 7u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 80u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 11564u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3783(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 23460u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "InputArguments"),
                opcua::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(vec![
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::Argument {
                        array_dimensions: None,
                        data_type: opcua::types::NodeId::new(0u16, 12u32),
                        description: Default::default(),
                        name: "AliasNameSearchPattern".into(),
                        value_rank: -1i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::Argument {
                        array_dimensions: None,
                        data_type: opcua::types::NodeId::new(0u16, 17u32),
                        description: Default::default(),
                        name: "ReferenceTypeFilter".into(),
                        value_rank: -1i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
            ])),
            1u8,
            1u8,
            Some(vec![2u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 23459u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3784(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 23461u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "OutputArguments"),
                opcua::types::LocalizedText::new("", "OutputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(vec![
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::Argument {
                        array_dimensions: Some(vec![0u32]),
                        data_type: opcua::types::NodeId::new(0u16, 23468u32),
                        description: Default::default(),
                        name: "AliasNodeList".into(),
                        value_rank: 1i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
            ])),
            1u8,
            1u8,
            Some(vec![1u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 23459u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3785(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 32849u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "LastChange"),
                opcua::types::LocalizedText::new("", "LastChange"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 20998u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 80u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 23458u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3787(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 23463u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "InputArguments"),
                opcua::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(vec![
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::Argument {
                        array_dimensions: None,
                        data_type: opcua::types::NodeId::new(0u16, 12u32),
                        description: Default::default(),
                        name: "AliasNameSearchPattern".into(),
                        value_rank: -1i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::Argument {
                        array_dimensions: None,
                        data_type: opcua::types::NodeId::new(0u16, 17u32),
                        description: Default::default(),
                        name: "ReferenceTypeFilter".into(),
                        value_rank: -1i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
            ])),
            1u8,
            1u8,
            Some(vec![2u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 23462u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3788(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 23464u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "OutputArguments"),
                opcua::types::LocalizedText::new("", "OutputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(vec![
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::Argument {
                        array_dimensions: Some(vec![0u32]),
                        data_type: opcua::types::NodeId::new(0u16, 23468u32),
                        description: Default::default(),
                        name: "AliasNodeList".into(),
                        value_rank: 1i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
            ])),
            1u8,
            1u8,
            Some(vec![1u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 23462u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3789(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 32850u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "LastChange"),
                opcua::types::LocalizedText::new("", "LastChange"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 20998u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 80u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 23456u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_379(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 12161u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "MaxNodesPerHistoryReadData"),
                opcua::types::LocalizedText::new("", "MaxNodesPerHistoryReadData"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 7u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 80u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 11564u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3794(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 23477u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "InputArguments"),
                opcua::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(vec![
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::Argument {
                        array_dimensions: None,
                        data_type: opcua::types::NodeId::new(0u16, 12u32),
                        description: Default::default(),
                        name: "AliasNameSearchPattern".into(),
                        value_rank: -1i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::Argument {
                        array_dimensions: None,
                        data_type: opcua::types::NodeId::new(0u16, 17u32),
                        description: Default::default(),
                        name: "ReferenceTypeFilter".into(),
                        value_rank: -1i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
            ])),
            1u8,
            1u8,
            Some(vec![2u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 23476u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3795(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 23478u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "OutputArguments"),
                opcua::types::LocalizedText::new("", "OutputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(vec![
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::Argument {
                        array_dimensions: Some(vec![0u32]),
                        data_type: opcua::types::NodeId::new(0u16, 23468u32),
                        description: Default::default(),
                        name: "AliasNodeList".into(),
                        value_rank: 1i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
            ])),
            1u8,
            1u8,
            Some(vec![1u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 23476u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3796(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 32852u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "LastChange"),
                opcua::types::LocalizedText::new("", "LastChange"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 20998u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 23470u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3799(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 23486u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "InputArguments"),
                opcua::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(vec![
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::Argument {
                        array_dimensions: None,
                        data_type: opcua::types::NodeId::new(0u16, 12u32),
                        description: Default::default(),
                        name: "AliasNameSearchPattern".into(),
                        value_rank: -1i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::Argument {
                        array_dimensions: None,
                        data_type: opcua::types::NodeId::new(0u16, 17u32),
                        description: Default::default(),
                        name: "ReferenceTypeFilter".into(),
                        value_rank: -1i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
            ])),
            1u8,
            1u8,
            Some(vec![2u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 23485u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_380(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 12162u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "MaxNodesPerHistoryReadEvents"),
                opcua::types::LocalizedText::new("", "MaxNodesPerHistoryReadEvents"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 7u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 80u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 11564u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3800(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 23487u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "OutputArguments"),
                opcua::types::LocalizedText::new("", "OutputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(vec![
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::Argument {
                        array_dimensions: Some(vec![0u32]),
                        data_type: opcua::types::NodeId::new(0u16, 23468u32),
                        description: Default::default(),
                        name: "AliasNodeList".into(),
                        value_rank: 1i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
            ])),
            1u8,
            1u8,
            Some(vec![1u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 23485u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3803(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 23495u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "InputArguments"),
                opcua::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(vec![
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::Argument {
                        array_dimensions: None,
                        data_type: opcua::types::NodeId::new(0u16, 12u32),
                        description: Default::default(),
                        name: "AliasNameSearchPattern".into(),
                        value_rank: -1i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::Argument {
                        array_dimensions: None,
                        data_type: opcua::types::NodeId::new(0u16, 17u32),
                        description: Default::default(),
                        name: "ReferenceTypeFilter".into(),
                        value_rank: -1i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
            ])),
            1u8,
            1u8,
            Some(vec![2u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 23494u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3804(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 23496u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "OutputArguments"),
                opcua::types::LocalizedText::new("", "OutputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(vec![
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::Argument {
                        array_dimensions: Some(vec![0u32]),
                        data_type: opcua::types::NodeId::new(0u16, 23468u32),
                        description: Default::default(),
                        name: "AliasNodeList".into(),
                        value_rank: 1i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
            ])),
            1u8,
            1u8,
            Some(vec![1u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 23494u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3806(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 24265u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "Users"),
                opcua::types::LocalizedText::new("", "Users"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 24281u32),
            false,
            1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 24264u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3807(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 24266u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "PasswordLength"),
                opcua::types::LocalizedText::new("", "PasswordLength"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 884u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 24264u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3808(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 24267u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "PasswordOptions"),
                opcua::types::LocalizedText::new("", "PasswordOptions"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 24277u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 24264u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3809(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 24268u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "PasswordRestrictions"),
                opcua::types::LocalizedText::new("", "PasswordRestrictions"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 21u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 80u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 24264u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_381(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 11567u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "MaxNodesPerWrite"),
                opcua::types::LocalizedText::new("", "MaxNodesPerWrite"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 7u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 80u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 11564u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3811(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 24270u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "InputArguments"),
                opcua::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(vec![
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::Argument {
                        array_dimensions: None,
                        data_type: opcua::types::NodeId::new(0u16, 12u32),
                        description: Default::default(),
                        name: "UserName".into(),
                        value_rank: -1i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::Argument {
                        array_dimensions: None,
                        data_type: opcua::types::NodeId::new(0u16, 12u32),
                        description: Default::default(),
                        name: "Password".into(),
                        value_rank: -1i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::Argument {
                        array_dimensions: None,
                        data_type: opcua::types::NodeId::new(0u16, 24279u32),
                        description: Default::default(),
                        name: "UserConfiguration".into(),
                        value_rank: -1i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::Argument {
                        array_dimensions: None,
                        data_type: opcua::types::NodeId::new(0u16, 12u32),
                        description: Default::default(),
                        name: "Description".into(),
                        value_rank: -1i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
            ])),
            1u8,
            1u8,
            Some(vec![4u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 24269u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3813(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 24272u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "InputArguments"),
                opcua::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(vec![
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::Argument {
                        array_dimensions: None,
                        data_type: opcua::types::NodeId::new(0u16, 12u32),
                        description: Default::default(),
                        name: "UserName".into(),
                        value_rank: -1i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::Argument {
                        array_dimensions: None,
                        data_type: opcua::types::NodeId::new(0u16, 1u32),
                        description: Default::default(),
                        name: "ModifyPassword".into(),
                        value_rank: -1i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::Argument {
                        array_dimensions: None,
                        data_type: opcua::types::NodeId::new(0u16, 12u32),
                        description: Default::default(),
                        name: "Password".into(),
                        value_rank: -1i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::Argument {
                        array_dimensions: None,
                        data_type: opcua::types::NodeId::new(0u16, 1u32),
                        description: Default::default(),
                        name: "ModifyUserConfiguration".into(),
                        value_rank: -1i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::Argument {
                        array_dimensions: None,
                        data_type: opcua::types::NodeId::new(0u16, 24279u32),
                        description: Default::default(),
                        name: "UserConfiguration".into(),
                        value_rank: -1i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::Argument {
                        array_dimensions: None,
                        data_type: opcua::types::NodeId::new(0u16, 1u32),
                        description: Default::default(),
                        name: "ModifyDescription".into(),
                        value_rank: -1i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::Argument {
                        array_dimensions: None,
                        data_type: opcua::types::NodeId::new(0u16, 12u32),
                        description: Default::default(),
                        name: "Description".into(),
                        value_rank: -1i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
            ])),
            1u8,
            1u8,
            Some(vec![7u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 24271u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3815(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 24274u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "InputArguments"),
                opcua::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(vec![
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::Argument {
                        array_dimensions: None,
                        data_type: opcua::types::NodeId::new(0u16, 12u32),
                        description: Default::default(),
                        name: "UserName".into(),
                        value_rank: -1i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
            ])),
            1u8,
            1u8,
            Some(vec![1u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 24273u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3817(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 24276u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "InputArguments"),
                opcua::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(vec![
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::Argument {
                        array_dimensions: None,
                        data_type: opcua::types::NodeId::new(0u16, 12u32),
                        description: Default::default(),
                        name: "OldPassword".into(),
                        value_rank: -1i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::Argument {
                        array_dimensions: None,
                        data_type: opcua::types::NodeId::new(0u16, 12u32),
                        description: Default::default(),
                        name: "NewPassword".into(),
                        value_rank: -1i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
            ])),
            1u8,
            1u8,
            Some(vec![2u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 24275u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3819(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 24278u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "OptionSetValues"),
                opcua::types::LocalizedText::new("", "OptionSetValues"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 21u32),
            false,
            1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(vec![
                opcua::types::LocalizedText::new("", "SupportInitialPasswordChange"),
                opcua::types::LocalizedText::new("", "SupportDisableUser"),
                opcua::types::LocalizedText::new("", "SupportDisableDeleteForUser"),
                opcua::types::LocalizedText::new("", "SupportNoChangeForUser"),
                opcua::types::LocalizedText::new("", "SupportDescriptionForUser"),
                opcua::types::LocalizedText::new("", "RequiresUpperCaseCharacters"),
                opcua::types::LocalizedText::new("", "RequiresLowerCaseCharacters"),
                opcua::types::LocalizedText::new("", "RequiresDigitCharacters"),
                opcua::types::LocalizedText::new("", "RequiresSpecialCharacters"),
            ])),
            1u8,
            1u8,
            Some(vec![9u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 24277u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_382(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 12163u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "MaxNodesPerHistoryUpdateData"),
                opcua::types::LocalizedText::new("", "MaxNodesPerHistoryUpdateData"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 7u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 80u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 11564u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3821(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 24280u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "OptionSetValues"),
                opcua::types::LocalizedText::new("", "OptionSetValues"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 21u32),
            false,
            1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(vec![
                opcua::types::LocalizedText::new("", "NoDelete"),
                opcua::types::LocalizedText::new("", "Disabled"),
                opcua::types::LocalizedText::new("", "NoChangeByUser"),
                opcua::types::LocalizedText::new("", "MustChangePassword"),
            ])),
            1u8,
            1u8,
            Some(vec![4u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 24279u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3824(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 24301u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "Users"),
                opcua::types::LocalizedText::new("", "Users"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 24281u32),
            false,
            1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 24290u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3825(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 24302u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "PasswordLength"),
                opcua::types::LocalizedText::new("", "PasswordLength"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 884u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 24290u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3826(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 24303u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "PasswordOptions"),
                opcua::types::LocalizedText::new("", "PasswordOptions"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 24277u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 24290u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3827(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 24291u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "PasswordRestrictions"),
                opcua::types::LocalizedText::new("", "PasswordRestrictions"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 21u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 24290u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3829(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 24305u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "InputArguments"),
                opcua::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(vec![
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::Argument {
                        array_dimensions: None,
                        data_type: opcua::types::NodeId::new(0u16, 12u32),
                        description: Default::default(),
                        name: "UserName".into(),
                        value_rank: -1i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::Argument {
                        array_dimensions: None,
                        data_type: opcua::types::NodeId::new(0u16, 12u32),
                        description: Default::default(),
                        name: "Password".into(),
                        value_rank: -1i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::Argument {
                        array_dimensions: None,
                        data_type: opcua::types::NodeId::new(0u16, 24279u32),
                        description: Default::default(),
                        name: "UserConfiguration".into(),
                        value_rank: -1i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::Argument {
                        array_dimensions: None,
                        data_type: opcua::types::NodeId::new(0u16, 12u32),
                        description: Default::default(),
                        name: "Description".into(),
                        value_rank: -1i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
            ])),
            1u8,
            1u8,
            Some(vec![4u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 24304u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_383(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 12164u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "MaxNodesPerHistoryUpdateEvents"),
                opcua::types::LocalizedText::new("", "MaxNodesPerHistoryUpdateEvents"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 7u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 80u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 11564u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3831(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 24307u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "InputArguments"),
                opcua::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(vec![
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::Argument {
                        array_dimensions: None,
                        data_type: opcua::types::NodeId::new(0u16, 12u32),
                        description: Default::default(),
                        name: "UserName".into(),
                        value_rank: -1i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::Argument {
                        array_dimensions: None,
                        data_type: opcua::types::NodeId::new(0u16, 1u32),
                        description: Default::default(),
                        name: "ModifyPassword".into(),
                        value_rank: -1i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::Argument {
                        array_dimensions: None,
                        data_type: opcua::types::NodeId::new(0u16, 12u32),
                        description: Default::default(),
                        name: "Password".into(),
                        value_rank: -1i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::Argument {
                        array_dimensions: None,
                        data_type: opcua::types::NodeId::new(0u16, 1u32),
                        description: Default::default(),
                        name: "ModifyUserConfiguration".into(),
                        value_rank: -1i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::Argument {
                        array_dimensions: None,
                        data_type: opcua::types::NodeId::new(0u16, 24279u32),
                        description: Default::default(),
                        name: "UserConfiguration".into(),
                        value_rank: -1i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::Argument {
                        array_dimensions: None,
                        data_type: opcua::types::NodeId::new(0u16, 1u32),
                        description: Default::default(),
                        name: "ModifyDescription".into(),
                        value_rank: -1i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::Argument {
                        array_dimensions: None,
                        data_type: opcua::types::NodeId::new(0u16, 12u32),
                        description: Default::default(),
                        name: "Description".into(),
                        value_rank: -1i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
            ])),
            1u8,
            1u8,
            Some(vec![7u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 24306u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3833(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 24309u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "InputArguments"),
                opcua::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(vec![
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::Argument {
                        array_dimensions: None,
                        data_type: opcua::types::NodeId::new(0u16, 12u32),
                        description: Default::default(),
                        name: "UserName".into(),
                        value_rank: -1i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
            ])),
            1u8,
            1u8,
            Some(vec![1u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 24308u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3835(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 24311u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "InputArguments"),
                opcua::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(vec![
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::Argument {
                        array_dimensions: None,
                        data_type: opcua::types::NodeId::new(0u16, 12u32),
                        description: Default::default(),
                        name: "OldPassword".into(),
                        value_rank: -1i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::Argument {
                        array_dimensions: None,
                        data_type: opcua::types::NodeId::new(0u16, 12u32),
                        description: Default::default(),
                        name: "NewPassword".into(),
                        value_rank: -1i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
            ])),
            1u8,
            1u8,
            Some(vec![2u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 24310u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3837(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 19082u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "EnumDictionaryEntries"),
                opcua::types::LocalizedText::new("", "EnumDictionaryEntries"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 17u32),
            false,
            2i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            Some(vec![0u32, 0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 19077u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3838(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 19083u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "ValueAsDictionaryEntries"),
                opcua::types::LocalizedText::new("", "ValueAsDictionaryEntries"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 17u32),
            false,
            1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 80u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 19077u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_384(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 11569u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "MaxNodesPerMethodCall"),
                opcua::types::LocalizedText::new("", "MaxNodesPerMethodCall"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 7u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 80u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 11564u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3840(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 19090u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "ValueAsDictionaryEntries"),
                opcua::types::LocalizedText::new("", "ValueAsDictionaryEntries"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 17u32),
            false,
            1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 19084u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3843(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 26850u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "ApplicationUri"),
                opcua::types::LocalizedText::new("", "ApplicationUri"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 23751u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 25731u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3844(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 26851u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "ProductUri"),
                opcua::types::LocalizedText::new("", "ProductUri"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 23751u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 25731u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3845(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 26852u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "ApplicationType"),
                opcua::types::LocalizedText::new("", "ApplicationType"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 307u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 25731u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3846(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 26849u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "Enabled"),
                opcua::types::LocalizedText::new("", "Enabled"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 1u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 25731u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3848(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 26872u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "IsSingleton"),
                opcua::types::LocalizedText::new("", "IsSingleton"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 1u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 26871u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_385(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 11570u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "MaxNodesPerBrowse"),
                opcua::types::LocalizedText::new("", "MaxNodesPerBrowse"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 7u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 80u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 11564u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3850(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 26874u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "OutputArguments"),
                opcua::types::LocalizedText::new("", "OutputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(vec![
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::Argument {
                        array_dimensions: Some(vec![0u32]),
                        data_type: opcua::types::NodeId::new(0u16, 25726u32),
                        description: Default::default(),
                        name: "Tickets".into(),
                        value_rank: 1i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
            ])),
            1u8,
            1u8,
            Some(vec![1u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 26873u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3852(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 26876u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "InputArguments"),
                opcua::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(vec![
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::Argument {
                        array_dimensions: Some(vec![0u32]),
                        data_type: opcua::types::NodeId::new(0u16, 308u32),
                        description: Default::default(),
                        name: "Registrars".into(),
                        value_rank: 1i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
            ])),
            1u8,
            1u8,
            Some(vec![1u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 26875u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3857(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 26882u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "Size"),
                opcua::types::LocalizedText::new("", "Size"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 9u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 26881u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3858(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 26883u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "Writable"),
                opcua::types::LocalizedText::new("", "Writable"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 1u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 26881u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3859(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 26884u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "UserWritable"),
                opcua::types::LocalizedText::new("", "UserWritable"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 1u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 26881u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_386(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 11571u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "MaxNodesPerRegisterNodes"),
                opcua::types::LocalizedText::new("", "MaxNodesPerRegisterNodes"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 7u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 80u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 11564u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3860(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 26885u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "OpenCount"),
                opcua::types::LocalizedText::new("", "OpenCount"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 5u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 26881u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3862(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 26890u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "InputArguments"),
                opcua::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(vec![
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::Argument {
                        array_dimensions: None,
                        data_type: opcua::types::NodeId::new(0u16, 3u32),
                        description: Default::default(),
                        name: "Mode".into(),
                        value_rank: -1i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
            ])),
            1u8,
            1u8,
            Some(vec![1u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 26889u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3863(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 26891u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "OutputArguments"),
                opcua::types::LocalizedText::new("", "OutputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(vec![
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::Argument {
                        array_dimensions: None,
                        data_type: opcua::types::NodeId::new(0u16, 7u32),
                        description: Default::default(),
                        name: "FileHandle".into(),
                        value_rank: -1i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
            ])),
            1u8,
            1u8,
            Some(vec![1u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 26889u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3865(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 26893u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "InputArguments"),
                opcua::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(vec![
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::Argument {
                        array_dimensions: None,
                        data_type: opcua::types::NodeId::new(0u16, 7u32),
                        description: Default::default(),
                        name: "FileHandle".into(),
                        value_rank: -1i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
            ])),
            1u8,
            1u8,
            Some(vec![1u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 26892u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3867(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 26895u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "InputArguments"),
                opcua::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(vec![
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::Argument {
                        array_dimensions: None,
                        data_type: opcua::types::NodeId::new(0u16, 7u32),
                        description: Default::default(),
                        name: "FileHandle".into(),
                        value_rank: -1i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::Argument {
                        array_dimensions: None,
                        data_type: opcua::types::NodeId::new(0u16, 6u32),
                        description: Default::default(),
                        name: "Length".into(),
                        value_rank: -1i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
            ])),
            1u8,
            1u8,
            Some(vec![2u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 26894u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3868(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 26896u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "OutputArguments"),
                opcua::types::LocalizedText::new("", "OutputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(vec![
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::Argument {
                        array_dimensions: None,
                        data_type: opcua::types::NodeId::new(0u16, 15u32),
                        description: Default::default(),
                        name: "Data".into(),
                        value_rank: -1i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
            ])),
            1u8,
            1u8,
            Some(vec![1u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 26894u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_387(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 11572u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "MaxNodesPerTranslateBrowsePathsToNodeIds"),
                opcua::types::LocalizedText::new("", "MaxNodesPerTranslateBrowsePathsToNodeIds"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 7u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 80u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 11564u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3870(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 26898u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "InputArguments"),
                opcua::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(vec![
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::Argument {
                        array_dimensions: None,
                        data_type: opcua::types::NodeId::new(0u16, 7u32),
                        description: Default::default(),
                        name: "FileHandle".into(),
                        value_rank: -1i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::Argument {
                        array_dimensions: None,
                        data_type: opcua::types::NodeId::new(0u16, 15u32),
                        description: Default::default(),
                        name: "Data".into(),
                        value_rank: -1i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
            ])),
            1u8,
            1u8,
            Some(vec![2u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 26897u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3872(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 26900u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "InputArguments"),
                opcua::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(vec![
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::Argument {
                        array_dimensions: None,
                        data_type: opcua::types::NodeId::new(0u16, 7u32),
                        description: Default::default(),
                        name: "FileHandle".into(),
                        value_rank: -1i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
            ])),
            1u8,
            1u8,
            Some(vec![1u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 26899u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3873(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 26901u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "OutputArguments"),
                opcua::types::LocalizedText::new("", "OutputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(vec![
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::Argument {
                        array_dimensions: None,
                        data_type: opcua::types::NodeId::new(0u16, 9u32),
                        description: Default::default(),
                        name: "Position".into(),
                        value_rank: -1i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
            ])),
            1u8,
            1u8,
            Some(vec![1u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 26899u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3875(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 26903u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "InputArguments"),
                opcua::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(vec![
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::Argument {
                        array_dimensions: None,
                        data_type: opcua::types::NodeId::new(0u16, 7u32),
                        description: Default::default(),
                        name: "FileHandle".into(),
                        value_rank: -1i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::Argument {
                        array_dimensions: None,
                        data_type: opcua::types::NodeId::new(0u16, 9u32),
                        description: Default::default(),
                        name: "Position".into(),
                        value_rank: -1i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
            ])),
            1u8,
            1u8,
            Some(vec![2u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 26902u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3876(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 26904u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "LastUpdateTime"),
                opcua::types::LocalizedText::new("", "LastUpdateTime"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 294u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 26881u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3878(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 26908u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "InputArguments"),
                opcua::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(vec![
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::Argument {
                        array_dimensions: None,
                        data_type: opcua::types::NodeId::new(0u16, 7u32),
                        description: Default::default(),
                        name: "Masks".into(),
                        value_rank: -1i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
            ])),
            1u8,
            1u8,
            Some(vec![1u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 26907u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3879(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 26909u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "OutputArguments"),
                opcua::types::LocalizedText::new("", "OutputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(vec![
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::Argument {
                        array_dimensions: None,
                        data_type: opcua::types::NodeId::new(0u16, 7u32),
                        description: Default::default(),
                        name: "FileHandle".into(),
                        value_rank: -1i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
            ])),
            1u8,
            1u8,
            Some(vec![1u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 26907u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_388(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 11573u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "MaxNodesPerNodeManagement"),
                opcua::types::LocalizedText::new("", "MaxNodesPerNodeManagement"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 7u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 80u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 11564u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3881(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 26911u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "InputArguments"),
                opcua::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(vec![
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::Argument {
                        array_dimensions: None,
                        data_type: opcua::types::NodeId::new(0u16, 7u32),
                        description: Default::default(),
                        name: "FileHandle".into(),
                        value_rank: -1i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
            ])),
            1u8,
            1u8,
            Some(vec![1u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 26910u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3882(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 26912u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "OutputArguments"),
                opcua::types::LocalizedText::new("", "OutputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(vec![
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::Argument {
                        array_dimensions: None,
                        data_type: opcua::types::NodeId::new(0u16, 1u32),
                        description: Default::default(),
                        name: "ApplyChangesRequired".into(),
                        value_rank: -1i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
            ])),
            1u8,
            1u8,
            Some(vec![1u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 26910u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3884(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 26914u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "InputArguments"),
                opcua::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(vec![
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::Argument {
                        array_dimensions: None,
                        data_type: opcua::types::NodeId::new(0u16, 15u32),
                        description: Default::default(),
                        name: "Certificate".into(),
                        value_rank: -1i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::Argument {
                        array_dimensions: None,
                        data_type: opcua::types::NodeId::new(0u16, 1u32),
                        description: Default::default(),
                        name: "IsTrustedCertificate".into(),
                        value_rank: -1i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
            ])),
            1u8,
            1u8,
            Some(vec![2u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 26913u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3886(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 26916u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "InputArguments"),
                opcua::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(vec![
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::Argument {
                        array_dimensions: None,
                        data_type: opcua::types::NodeId::new(0u16, 12u32),
                        description: Default::default(),
                        name: "Thumbprint".into(),
                        value_rank: -1i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::Argument {
                        array_dimensions: None,
                        data_type: opcua::types::NodeId::new(0u16, 1u32),
                        description: Default::default(),
                        name: "IsTrustedCertificate".into(),
                        value_rank: -1i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
            ])),
            1u8,
            1u8,
            Some(vec![2u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 26915u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3887(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 26917u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "CertificateTypes"),
                opcua::types::LocalizedText::new("", "CertificateTypes"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 17u32),
            false,
            1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 26880u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3888(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 27997u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "ApplicationUri"),
                opcua::types::LocalizedText::new("", "ApplicationUri"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 23751u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 26878u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3889(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 27998u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "ProductUri"),
                opcua::types::LocalizedText::new("", "ProductUri"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 23751u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 26878u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_389(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 11574u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "MaxMonitoredItemsPerCall"),
                opcua::types::LocalizedText::new("", "MaxMonitoredItemsPerCall"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 7u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 80u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 11564u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3890(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 27999u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "ApplicationType"),
                opcua::types::LocalizedText::new("", "ApplicationType"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 307u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 26878u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3891(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 28000u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "ServerCapabilities"),
                opcua::types::LocalizedText::new("", "ServerCapabilities"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 12u32),
            false,
            1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 26878u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3892(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 28001u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "SupportedPrivateKeyFormats"),
                opcua::types::LocalizedText::new("", "SupportedPrivateKeyFormats"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 12u32),
            false,
            1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 26878u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3893(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 28002u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "MaxTrustListSize"),
                opcua::types::LocalizedText::new("", "MaxTrustListSize"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 7u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 26878u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3894(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 28003u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "MulticastDnsEnabled"),
                opcua::types::LocalizedText::new("", "MulticastDnsEnabled"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 1u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 26878u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3896(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 28006u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "InputArguments"),
                opcua::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(vec![
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::Argument {
                        array_dimensions: None,
                        data_type: opcua::types::NodeId::new(0u16, 17u32),
                        description: Default::default(),
                        name: "CertificateGroupId".into(),
                        value_rank: -1i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::Argument {
                        array_dimensions: None,
                        data_type: opcua::types::NodeId::new(0u16, 17u32),
                        description: Default::default(),
                        name: "CertificateTypeId".into(),
                        value_rank: -1i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::Argument {
                        array_dimensions: None,
                        data_type: opcua::types::NodeId::new(0u16, 15u32),
                        description: Default::default(),
                        name: "Certificate".into(),
                        value_rank: -1i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::Argument {
                        array_dimensions: Some(vec![0u32]),
                        data_type: opcua::types::NodeId::new(0u16, 15u32),
                        description: Default::default(),
                        name: "IssuerCertificates".into(),
                        value_rank: 1i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::Argument {
                        array_dimensions: None,
                        data_type: opcua::types::NodeId::new(0u16, 12u32),
                        description: Default::default(),
                        name: "PrivateKeyFormat".into(),
                        value_rank: -1i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::Argument {
                        array_dimensions: None,
                        data_type: opcua::types::NodeId::new(0u16, 15u32),
                        description: Default::default(),
                        name: "PrivateKey".into(),
                        value_rank: -1i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
            ])),
            1u8,
            1u8,
            Some(vec![6u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 28005u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3897(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 28007u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "OutputArguments"),
                opcua::types::LocalizedText::new("", "OutputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(vec![
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::Argument {
                        array_dimensions: None,
                        data_type: opcua::types::NodeId::new(0u16, 1u32),
                        description: Default::default(),
                        name: "ApplyChangesRequired".into(),
                        value_rank: -1i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
            ])),
            1u8,
            1u8,
            Some(vec![1u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 28005u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3900(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 28011u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "InputArguments"),
                opcua::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(vec![
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::Argument {
                        array_dimensions: None,
                        data_type: opcua::types::NodeId::new(0u16, 17u32),
                        description: Default::default(),
                        name: "CertificateGroupId".into(),
                        value_rank: -1i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::Argument {
                        array_dimensions: None,
                        data_type: opcua::types::NodeId::new(0u16, 17u32),
                        description: Default::default(),
                        name: "CertificateTypeId".into(),
                        value_rank: -1i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::Argument {
                        array_dimensions: None,
                        data_type: opcua::types::NodeId::new(0u16, 12u32),
                        description: Default::default(),
                        name: "SubjectName".into(),
                        value_rank: -1i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::Argument {
                        array_dimensions: None,
                        data_type: opcua::types::NodeId::new(0u16, 1u32),
                        description: Default::default(),
                        name: "RegeneratePrivateKey".into(),
                        value_rank: -1i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::Argument {
                        array_dimensions: None,
                        data_type: opcua::types::NodeId::new(0u16, 15u32),
                        description: Default::default(),
                        name: "Nonce".into(),
                        value_rank: -1i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
            ])),
            1u8,
            1u8,
            Some(vec![5u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 28010u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3901(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 28012u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "OutputArguments"),
                opcua::types::LocalizedText::new("", "OutputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(vec![
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::Argument {
                        array_dimensions: None,
                        data_type: opcua::types::NodeId::new(0u16, 15u32),
                        description: Default::default(),
                        name: "CertificateRequest".into(),
                        value_rank: -1i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
            ])),
            1u8,
            1u8,
            Some(vec![1u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 28010u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3903(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 28014u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "OutputArguments"),
                opcua::types::LocalizedText::new("", "OutputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(vec![
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::Argument {
                        array_dimensions: Some(vec![0u32]),
                        data_type: opcua::types::NodeId::new(0u16, 15u32),
                        description: Default::default(),
                        name: "Certificates".into(),
                        value_rank: 1i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
            ])),
            1u8,
            1u8,
            Some(vec![1u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 28013u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3904(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 27996u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "Enabled"),
                opcua::types::LocalizedText::new("", "Enabled"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 1u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 26878u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3906(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 29879u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "IsSingleton"),
                opcua::types::LocalizedText::new("", "IsSingleton"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 1u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 29878u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
