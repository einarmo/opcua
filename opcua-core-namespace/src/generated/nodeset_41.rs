// This file was autogenerated from schemas/1.05/Opc.Ua.NodeSet2.xml by opcua-codegen
//
// DO NOT EDIT THIS FILE

// OPCUA for Rust
// SPDX-License-Identifier: MPL-2.0
// Copyright (C) 2017-2024 Adam Lock, Einar Omang
#[allow(unused)]
mod opcua {
    pub use opcua_nodes as nodes;
    pub use opcua_types as types;
}
pub(super) fn imported_nodes<'a>(
    ns_map: &'a opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> Box<dyn Iterator<Item = opcua::nodes::ImportedItem> + 'a> {
    Box::new(
        [
            &make_variable_3908 as &dyn Fn(_) -> opcua::nodes::ImportedItem,
            &make_variable_391,
            &make_variable_3910,
            &make_variable_3911,
            &make_variable_3912,
            &make_variable_3913,
            &make_variable_3914,
            &make_variable_3916,
            &make_variable_3917,
            &make_variable_3918,
            &make_variable_3919,
            &make_variable_392,
            &make_variable_3921,
            &make_variable_3923,
            &make_variable_3925,
            &make_variable_3927,
            &make_variable_3928,
            &make_variable_3929,
            &make_variable_393,
            &make_variable_3931,
            &make_variable_3932,
            &make_variable_3933,
            &make_variable_3934,
            &make_variable_3935,
            &make_variable_3937,
            &make_variable_3938,
            &make_variable_3939,
            &make_variable_394,
            &make_variable_3941,
            &make_variable_3942,
            &make_variable_3943,
            &make_variable_3944,
            &make_variable_3946,
            &make_variable_3947,
            &make_variable_3949,
            &make_variable_395,
            &make_variable_3951,
            &make_variable_3953,
            &make_variable_3954,
            &make_variable_3956,
            &make_variable_3957,
            &make_variable_3959,
            &make_variable_396,
            &make_variable_3960,
            &make_variable_3961,
            &make_variable_3962,
            &make_variable_3964,
            &make_variable_3966,
            &make_variable_3968,
            &make_variable_397,
            &make_variable_3970,
            &make_variable_3972,
            &make_variable_3974,
            &make_variable_3976,
            &make_variable_3978,
            &make_variable_3988,
            &make_variable_3989,
            &make_variable_399,
            &make_variable_3990,
            &make_variable_3991,
            &make_variable_3992,
            &make_variable_3995,
            &make_variable_3997,
            &make_variable_3999,
            &make_variable_400,
            &make_variable_4017,
            &make_variable_402,
            &make_variable_4021,
            &make_variable_4023,
            &make_variable_4025,
            &make_variable_4027,
            &make_variable_4029,
            &make_variable_4031,
            &make_variable_4033,
            &make_variable_4037,
            &make_variable_404,
            &make_variable_405,
            &make_variable_4057,
            &make_variable_4063,
            &make_variable_4065,
            &make_variable_407,
            &make_variable_4072,
            &make_variable_4081,
            &make_variable_4087,
            &make_variable_409,
            &make_variable_4095,
            &make_variable_410,
            &make_variable_4107,
            &make_variable_4109,
            &make_variable_4116,
            &make_variable_4118,
            &make_variable_412,
            &make_variable_4135,
            &make_variable_4144,
            &make_variable_416,
            &make_variable_417,
            &make_variable_418,
            &make_variable_419,
            &make_variable_420,
            &make_variable_421,
        ]
        .into_iter()
        .map(|f| f(ns_map)),
    )
}
#[allow(unused)]
fn make_variable_3908(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 29881u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "OutputArguments"),
                opcua::types::LocalizedText::new("", "OutputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(vec![
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::Argument {
                        array_dimensions: Some(vec![0u32]),
                        data_type: opcua::types::NodeId::new(0u16, 25726u32),
                        description: Default::default(),
                        name: "Tickets".into(),
                        value_rank: 1i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
            ])),
            1u8,
            1u8,
            Some(vec![1u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 29880u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_391(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 11576u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "Size"),
                opcua::types::LocalizedText::new("", "Size"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 9u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 11575u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3910(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 24149u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "AdminStatus"),
                opcua::types::LocalizedText::new("", "AdminStatus"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 24212u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 63u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 24148u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3911(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 24150u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "OperStatus"),
                opcua::types::LocalizedText::new("", "OperStatus"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 24214u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 63u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 24148u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3912(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 24151u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "PhysAddress"),
                opcua::types::LocalizedText::new("", "PhysAddress"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 63u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 80u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 24148u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3913(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 24152u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "Speed"),
                opcua::types::LocalizedText::new("", "Speed"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 9u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 24157u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 17497u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 24148u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3914(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 24157u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "EngineeringUnits"),
                opcua::types::LocalizedText::new("", "EngineeringUnits"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 887u32),
            false,
            -1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EUInformation {
                        description: opcua::types::LocalizedText::new("en", "bit per second"),
                        display_name: opcua::types::LocalizedText::new("en", "bit/s"),
                        namespace_uri: "http://www.opcfoundation.org/UA/units/un/cefact".into(),
                        unit_id: 4337968i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
            )),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 24152u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3916(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 24159u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "Speed"),
                opcua::types::LocalizedText::new("", "Speed"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 9u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 24164u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 17497u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 24158u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3917(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 24164u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "EngineeringUnits"),
                opcua::types::LocalizedText::new("", "EngineeringUnits"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 887u32),
            false,
            -1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EUInformation {
                        description: opcua::types::LocalizedText::new("en", "megabit per second"),
                        display_name: opcua::types::LocalizedText::new("en", "Mbit/s"),
                        namespace_uri: "http://www.opcfoundation.org/UA/units/un/cefact".into(),
                        unit_id: 4534832i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
            )),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 24159u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3918(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 24165u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "Duplex"),
                opcua::types::LocalizedText::new("", "Duplex"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 24210u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 63u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 24158u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3919(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 24166u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "MaxFrameLength"),
                opcua::types::LocalizedText::new("", "MaxFrameLength"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 5u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 63u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 24158u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_392(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 12686u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "Writable"),
                opcua::types::LocalizedText::new("", "Writable"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 1u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 11575u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3921(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 24234u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "NegotiationStatus"),
                opcua::types::LocalizedText::new("", "NegotiationStatus"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 24216u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 63u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 24233u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3923(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 24168u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "VlanTagCapable"),
                opcua::types::LocalizedText::new("", "VlanTagCapable"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 1u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 63u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 24167u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3925(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 25219u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "VlanId"),
                opcua::types::LocalizedText::new("", "VlanId"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 5u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 63u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 25218u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3927(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 24170u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "Id"),
                opcua::types::LocalizedText::new("", "Id"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 3u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 63u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 24169u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3928(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 24171u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "Priority"),
                opcua::types::LocalizedText::new("", "Priority"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 3u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 63u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 24169u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3929(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 24172u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "Vid"),
                opcua::types::LocalizedText::new("", "Vid"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 5u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 63u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 24169u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_393(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 12687u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "UserWritable"),
                opcua::types::LocalizedText::new("", "UserWritable"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 1u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 11575u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3931(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 24174u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "StreamId"),
                opcua::types::LocalizedText::new("", "StreamId"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 3u32),
            false,
            1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            Some(vec![8u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 63u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 24173u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3932(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 24175u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "StreamName"),
                opcua::types::LocalizedText::new("", "StreamName"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 63u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 24173u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3933(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 24176u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "State"),
                opcua::types::LocalizedText::new("", "State"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 24220u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 63u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 24173u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3934(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 24177u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "AccumulatedLatency"),
                opcua::types::LocalizedText::new("", "AccumulatedLatency"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 7u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 63u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 80u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 24173u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3935(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 24178u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "SrClassId"),
                opcua::types::LocalizedText::new("", "SrClassId"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 3u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 63u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 80u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 24173u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3937(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 24180u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "MaxIntervalFrames"),
                opcua::types::LocalizedText::new("", "MaxIntervalFrames"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 5u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 63u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 24179u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3938(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 24181u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "MaxFrameSize"),
                opcua::types::LocalizedText::new("", "MaxFrameSize"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 7u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 63u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 24179u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3939(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 24182u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "Interval"),
                opcua::types::LocalizedText::new("", "Interval"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 24107u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 63u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 24179u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_394(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 11579u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "OpenCount"),
                opcua::types::LocalizedText::new("", "OpenCount"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 5u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 11575u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3941(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 24184u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "TalkerStatus"),
                opcua::types::LocalizedText::new("", "TalkerStatus"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 24222u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 63u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 80u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 24183u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3942(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 24185u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "ListenerStatus"),
                opcua::types::LocalizedText::new("", "ListenerStatus"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 24224u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 63u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 80u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 24183u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3943(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 24186u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "FailureCode"),
                opcua::types::LocalizedText::new("", "FailureCode"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 24218u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 63u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 24183u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3944(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 24187u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "FailureSystemIdentifier"),
                opcua::types::LocalizedText::new("", "FailureSystemIdentifier"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 3u32),
            false,
            2i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            Some(vec![0u32, 8u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 63u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 24183u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3946(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 24189u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "MacAddress"),
                opcua::types::LocalizedText::new("", "MacAddress"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 63u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 24188u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3947(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 24190u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "InterfaceName"),
                opcua::types::LocalizedText::new("", "InterfaceName"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 63u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 80u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 24188u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3949(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 24194u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "TimeAwareOffset"),
                opcua::types::LocalizedText::new("", "TimeAwareOffset"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 7u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 63u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 80u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 24191u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_395(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 13341u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "MimeType"),
                opcua::types::LocalizedText::new("", "MimeType"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 80u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 11575u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3951(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 24198u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "ReceiveOffset"),
                opcua::types::LocalizedText::new("", "ReceiveOffset"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 7u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 63u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 80u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 24195u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3953(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 24200u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "DestinationAddress"),
                opcua::types::LocalizedText::new("", "DestinationAddress"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 3u32),
            false,
            1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            Some(vec![6u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 63u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 24199u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3954(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 24201u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "SourceAddress"),
                opcua::types::LocalizedText::new("", "SourceAddress"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 3u32),
            false,
            1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            Some(vec![6u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 63u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 80u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 24199u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3956(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 24203u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "VlanId"),
                opcua::types::LocalizedText::new("", "VlanId"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 5u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 63u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 24202u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3957(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 24204u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "PriorityCodePoint"),
                opcua::types::LocalizedText::new("", "PriorityCodePoint"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 3u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 63u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 24202u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3959(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 24206u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "MappingUri"),
                opcua::types::LocalizedText::new("", "MappingUri"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 63u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 24205u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_396(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 24244u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "MaxByteStringLength"),
                opcua::types::LocalizedText::new("", "MaxByteStringLength"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 7u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 80u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 11575u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3960(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 24207u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "PriorityLabel"),
                opcua::types::LocalizedText::new("", "PriorityLabel"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 63u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 24205u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3961(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 24208u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "PriorityValue_PCP"),
                opcua::types::LocalizedText::new("", "PriorityValue_PCP"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 3u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 63u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 80u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 24205u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3962(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 24209u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "PriorityValue_DSCP"),
                opcua::types::LocalizedText::new("", "PriorityValue_DSCP"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 7u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 63u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 80u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 24205u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3964(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 24235u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "EnumValues"),
                opcua::types::LocalizedText::new("", "EnumValues"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 7594u32),
            false,
            1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(vec![
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: opcua::types::LocalizedText::new("", "Full duplex."),
                        display_name: opcua::types::LocalizedText::new("", "Full"),
                        value: 0i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: opcua::types::LocalizedText::new("", "Half duplex."),
                        display_name: opcua::types::LocalizedText::new("", "Half"),
                        value: 1i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: opcua::types::LocalizedText::new(
                            "",
                            "Link is currently disconnected or initializing.",
                        ),
                        display_name: opcua::types::LocalizedText::new("", "Unknown"),
                        value: 2i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
            ])),
            1u8,
            1u8,
            Some(vec![3u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 24210u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3966(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 24236u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "EnumValues"),
                opcua::types::LocalizedText::new("", "EnumValues"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 7594u32),
            false,
            1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(vec![
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: opcua::types::LocalizedText::new("", "Ready to pass packets."),
                        display_name: opcua::types::LocalizedText::new("", "Up"),
                        value: 0i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: opcua::types::LocalizedText::new(
                            "",
                            "Not ready to pass packets and not in some test mode.",
                        ),
                        display_name: opcua::types::LocalizedText::new("", "Down"),
                        value: 1i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: opcua::types::LocalizedText::new("", "In some test mode."),
                        display_name: opcua::types::LocalizedText::new("", "Testing"),
                        value: 2i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
            ])),
            1u8,
            1u8,
            Some(vec![3u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 24212u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3968(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 24237u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "EnumValues"),
                opcua::types::LocalizedText::new("", "EnumValues"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 7594u32),
            false,
            1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(vec![
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: opcua::types::LocalizedText::new("", "Ready to pass packets."),
                        display_name: opcua::types::LocalizedText::new("", "Up"),
                        value: 0i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: opcua::types::LocalizedText::new(
                            "",
                            "The interface does not pass any packets.",
                        ),
                        display_name: opcua::types::LocalizedText::new("", "Down"),
                        value: 1i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: opcua::types::LocalizedText::new(
                            "",
                            "In some test mode. No operational packets can be passed.",
                        ),
                        display_name: opcua::types::LocalizedText::new("", "Testing"),
                        value: 2i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: opcua::types::LocalizedText::new(
                            "",
                            "Status cannot be determined for some reason.",
                        ),
                        display_name: opcua::types::LocalizedText::new("", "Unknown"),
                        value: 3i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: opcua::types::LocalizedText::new(
                            "",
                            "Waiting for some external event.",
                        ),
                        display_name: opcua::types::LocalizedText::new("", "Dormant"),
                        value: 4i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: opcua::types::LocalizedText::new(
                            "",
                            "Some component (typically hardware) is missing.",
                        ),
                        display_name: opcua::types::LocalizedText::new("", "NotPresent"),
                        value: 5i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: opcua::types::LocalizedText::new(
                            "",
                            "Down due to state of lower-layer interface(s).",
                        ),
                        display_name: opcua::types::LocalizedText::new("", "LowerLayerDown"),
                        value: 6i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
            ])),
            1u8,
            1u8,
            Some(vec![7u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 24214u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_397(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 25200u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "LastModifiedTime"),
                opcua::types::LocalizedText::new("", "LastModifiedTime"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 13u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 80u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 11575u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3970(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
                opcua::nodes::Base::new_full(
                    opcua::types::NodeId::new(0u16, 24238u32),
                    opcua::types::NodeClass::Variable,
                    opcua::types::QualifiedName::new(0u16, "EnumValues"),
                    opcua::types::LocalizedText::new("", "EnumValues"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                opcua::types::NodeId::new(0u16, 7594u32),
                false,
                1i32,
                opcua::types::DataValue::new_now(
                    opcua::types::Variant::from(
                        vec![
                            opcua::types::ExtensionObject::from_message_full(&
                            opcua::types::EnumValueType { description :
                            opcua::types::LocalizedText::new("",
                            "The auto-negotiation protocol is running and negotiation is currently in-progress."),
                            display_name : opcua::types::LocalizedText::new("",
                            "InProgress"), value : 0i64, }, ns_map.namespaces())
                            .expect("Invalid encoding ID"),
                            opcua::types::ExtensionObject::from_message_full(&
                            opcua::types::EnumValueType { description :
                            opcua::types::LocalizedText::new("",
                            "The auto-negotiation protocol has completed successfully."),
                            display_name : opcua::types::LocalizedText::new("",
                            "Complete"), value : 1i64, }, ns_map.namespaces())
                            .expect("Invalid encoding ID"),
                            opcua::types::ExtensionObject::from_message_full(&
                            opcua::types::EnumValueType { description :
                            opcua::types::LocalizedText::new("",
                            "The auto-negotiation protocol has failed."), display_name :
                            opcua::types::LocalizedText::new("", "Failed"), value : 2i64,
                            }, ns_map.namespaces()).expect("Invalid encoding ID"),
                            opcua::types::ExtensionObject::from_message_full(&
                            opcua::types::EnumValueType { description :
                            opcua::types::LocalizedText::new("",
                            "The auto-negotiation status is not currently known, this could be because it is still negotiating or the protocol cannot run (e.g., if no medium is present)."),
                            display_name : opcua::types::LocalizedText::new("",
                            "Unknown"), value : 3i64, }, ns_map.namespaces())
                            .expect("Invalid encoding ID"),
                            opcua::types::ExtensionObject::from_message_full(&
                            opcua::types::EnumValueType { description :
                            opcua::types::LocalizedText::new("",
                            "No auto-negotiation is executed. The auto-negotiation function is either not supported on this interface or has not been enabled."),
                            display_name : opcua::types::LocalizedText::new("",
                            "NoNegotiation"), value : 4i64, }, ns_map.namespaces())
                            .expect("Invalid encoding ID"),
                        ],
                    ),
                ),
                1u8,
                1u8,
                Some(vec![5u32]),
                Some(0f64),
            )
            .into(),
        references: vec![
            opcua::nodes::ImportedReference { target_id : opcua::types::NodeId::new(0u16,
            68u32), type_id : opcua::types::NodeId::new(0u16, 40u32), is_forward : true,
            }, opcua::nodes::ImportedReference { target_id :
            opcua::types::NodeId::new(0u16, 24216u32), type_id :
            opcua::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_3972(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
                opcua::nodes::Base::new_full(
                    opcua::types::NodeId::new(0u16, 24239u32),
                    opcua::types::NodeClass::Variable,
                    opcua::types::QualifiedName::new(0u16, "EnumValues"),
                    opcua::types::LocalizedText::new("", "EnumValues"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                opcua::types::NodeId::new(0u16, 7594u32),
                false,
                1i32,
                opcua::types::DataValue::new_now(
                    opcua::types::Variant::from(
                        vec![
                            opcua::types::ExtensionObject::from_message_full(&
                            opcua::types::EnumValueType { description :
                            opcua::types::LocalizedText::new("", "No failure"),
                            display_name : opcua::types::LocalizedText::new("",
                            "NoFailure"), value : 0i64, }, ns_map.namespaces())
                            .expect("Invalid encoding ID"),
                            opcua::types::ExtensionObject::from_message_full(&
                            opcua::types::EnumValueType { description :
                            opcua::types::LocalizedText::new("",
                            "Insufficient bandwidth"), display_name :
                            opcua::types::LocalizedText::new("",
                            "InsufficientBandwidth"), value : 1i64, }, ns_map
                            .namespaces()).expect("Invalid encoding ID"),
                            opcua::types::ExtensionObject::from_message_full(&
                            opcua::types::EnumValueType { description :
                            opcua::types::LocalizedText::new("",
                            "Insufficient bridge resources"), display_name :
                            opcua::types::LocalizedText::new("",
                            "InsufficientResources"), value : 2i64, }, ns_map
                            .namespaces()).expect("Invalid encoding ID"),
                            opcua::types::ExtensionObject::from_message_full(&
                            opcua::types::EnumValueType { description :
                            opcua::types::LocalizedText::new("",
                            "Insufficient bandwidth for Traffic Class"), display_name :
                            opcua::types::LocalizedText::new("",
                            "InsufficientTrafficClassBandwidth"), value : 3i64, }, ns_map
                            .namespaces()).expect("Invalid encoding ID"),
                            opcua::types::ExtensionObject::from_message_full(&
                            opcua::types::EnumValueType { description :
                            opcua::types::LocalizedText::new("",
                            "StreamID in use by another Talker"), display_name :
                            opcua::types::LocalizedText::new("", "StreamIdInUse"), value
                            : 4i64, }, ns_map.namespaces())
                            .expect("Invalid encoding ID"),
                            opcua::types::ExtensionObject::from_message_full(&
                            opcua::types::EnumValueType { description :
                            opcua::types::LocalizedText::new("",
                            "Stream destination address already in use"), display_name :
                            opcua::types::LocalizedText::new("",
                            "StreamDestinationAddressInUse"), value : 5i64, }, ns_map
                            .namespaces()).expect("Invalid encoding ID"),
                            opcua::types::ExtensionObject::from_message_full(&
                            opcua::types::EnumValueType { description :
                            opcua::types::LocalizedText::new("",
                            "Stream pre-empted by higher rank"), display_name :
                            opcua::types::LocalizedText::new("",
                            "StreamPreemptedByHigherRank"), value : 6i64, }, ns_map
                            .namespaces()).expect("Invalid encoding ID"),
                            opcua::types::ExtensionObject::from_message_full(&
                            opcua::types::EnumValueType { description :
                            opcua::types::LocalizedText::new("",
                            "Reported latency has changed"), display_name :
                            opcua::types::LocalizedText::new("", "LatencyHasChanged"),
                            value : 7i64, }, ns_map.namespaces())
                            .expect("Invalid encoding ID"),
                            opcua::types::ExtensionObject::from_message_full(&
                            opcua::types::EnumValueType { description :
                            opcua::types::LocalizedText::new("",
                            "Egress port is not AVBCapable"), display_name :
                            opcua::types::LocalizedText::new("",
                            "EgressPortNotAvbCapable"), value : 8i64, }, ns_map
                            .namespaces()).expect("Invalid encoding ID"),
                            opcua::types::ExtensionObject::from_message_full(&
                            opcua::types::EnumValueType { description :
                            opcua::types::LocalizedText::new("",
                            "Use a different destination address"), display_name :
                            opcua::types::LocalizedText::new("",
                            "UseDifferentDestinationAddress"), value : 9i64, }, ns_map
                            .namespaces()).expect("Invalid encoding ID"),
                            opcua::types::ExtensionObject::from_message_full(&
                            opcua::types::EnumValueType { description :
                            opcua::types::LocalizedText::new("",
                            "Out of MSRP resources"), display_name :
                            opcua::types::LocalizedText::new("", "OutOfMsrpResources"),
                            value : 10i64, }, ns_map.namespaces())
                            .expect("Invalid encoding ID"),
                            opcua::types::ExtensionObject::from_message_full(&
                            opcua::types::EnumValueType { description :
                            opcua::types::LocalizedText::new("",
                            "Out of MMRP resources"), display_name :
                            opcua::types::LocalizedText::new("", "OutOfMmrpResources"),
                            value : 11i64, }, ns_map.namespaces())
                            .expect("Invalid encoding ID"),
                            opcua::types::ExtensionObject::from_message_full(&
                            opcua::types::EnumValueType { description :
                            opcua::types::LocalizedText::new("",
                            "Cannot store destination address"), display_name :
                            opcua::types::LocalizedText::new("",
                            "CannotStoreDestinationAddress"), value : 12i64, }, ns_map
                            .namespaces()).expect("Invalid encoding ID"),
                            opcua::types::ExtensionObject::from_message_full(&
                            opcua::types::EnumValueType { description :
                            opcua::types::LocalizedText::new("",
                            "Requested priority is not an SR Class priority"),
                            display_name : opcua::types::LocalizedText::new("",
                            "PriorityIsNotAnSrcClass"), value : 13i64, }, ns_map
                            .namespaces()).expect("Invalid encoding ID"),
                            opcua::types::ExtensionObject::from_message_full(&
                            opcua::types::EnumValueType { description :
                            opcua::types::LocalizedText::new("",
                            "MaxFrameSize is too large for media"), display_name :
                            opcua::types::LocalizedText::new("", "MaxFrameSizeTooLarge"),
                            value : 14i64, }, ns_map.namespaces())
                            .expect("Invalid encoding ID"),
                            opcua::types::ExtensionObject::from_message_full(&
                            opcua::types::EnumValueType { description :
                            opcua::types::LocalizedText::new("",
                            "MaxFanInPorts limit has been reached"), display_name :
                            opcua::types::LocalizedText::new("",
                            "MaxFanInPortsLimitReached"), value : 15i64, }, ns_map
                            .namespaces()).expect("Invalid encoding ID"),
                            opcua::types::ExtensionObject::from_message_full(&
                            opcua::types::EnumValueType { description :
                            opcua::types::LocalizedText::new("",
                            "Changes in FirstValue for a registered StreamID"),
                            display_name : opcua::types::LocalizedText::new("",
                            "FirstValueChangedForStreamId"), value : 16i64, }, ns_map
                            .namespaces()).expect("Invalid encoding ID"),
                            opcua::types::ExtensionObject::from_message_full(&
                            opcua::types::EnumValueType { description :
                            opcua::types::LocalizedText::new("",
                            "VLAN is blocked on this egress port (Registration Forbidden)"),
                            display_name : opcua::types::LocalizedText::new("",
                            "VlanBlockedOnEgress"), value : 17i64, }, ns_map
                            .namespaces()).expect("Invalid encoding ID"),
                            opcua::types::ExtensionObject::from_message_full(&
                            opcua::types::EnumValueType { description :
                            opcua::types::LocalizedText::new("",
                            "VLAN tagging is disabled on this egress port (untagged set)"),
                            display_name : opcua::types::LocalizedText::new("",
                            "VlanTaggingDisabledOnEgress"), value : 18i64, }, ns_map
                            .namespaces()).expect("Invalid encoding ID"),
                            opcua::types::ExtensionObject::from_message_full(&
                            opcua::types::EnumValueType { description :
                            opcua::types::LocalizedText::new("",
                            "SR class priority mismatch"), display_name :
                            opcua::types::LocalizedText::new("",
                            "SrClassPriorityMismatch"), value : 19i64, }, ns_map
                            .namespaces()).expect("Invalid encoding ID"),
                            opcua::types::ExtensionObject::from_message_full(&
                            opcua::types::EnumValueType { description :
                            opcua::types::LocalizedText::new("",
                            "Enhanced feature cannot be propagated to original Port"),
                            display_name : opcua::types::LocalizedText::new("",
                            "FeatureNotPropagated"), value : 20i64, }, ns_map
                            .namespaces()).expect("Invalid encoding ID"),
                            opcua::types::ExtensionObject::from_message_full(&
                            opcua::types::EnumValueType { description :
                            opcua::types::LocalizedText::new("", "MaxLatency exceeded"),
                            display_name : opcua::types::LocalizedText::new("",
                            "MaxLatencyExceeded"), value : 21i64, }, ns_map.namespaces())
                            .expect("Invalid encoding ID"),
                            opcua::types::ExtensionObject::from_message_full(&
                            opcua::types::EnumValueType { description :
                            opcua::types::LocalizedText::new("",
                            "Nearest Bridge cannot provide network identification for stream transformation"),
                            display_name : opcua::types::LocalizedText::new("",
                            "BridgeDoesNotProvideNetworkId"), value : 22i64, }, ns_map
                            .namespaces()).expect("Invalid encoding ID"),
                            opcua::types::ExtensionObject::from_message_full(&
                            opcua::types::EnumValueType { description :
                            opcua::types::LocalizedText::new("",
                            "Stream transformation not supported"), display_name :
                            opcua::types::LocalizedText::new("",
                            "StreamTransformNotSupported"), value : 23i64, }, ns_map
                            .namespaces()).expect("Invalid encoding ID"),
                            opcua::types::ExtensionObject::from_message_full(&
                            opcua::types::EnumValueType { description :
                            opcua::types::LocalizedText::new("",
                            "Stream identification type not supported for stream transformation"),
                            display_name : opcua::types::LocalizedText::new("",
                            "StreamIdTypeNotSupported"), value : 24i64, }, ns_map
                            .namespaces()).expect("Invalid encoding ID"),
                            opcua::types::ExtensionObject::from_message_full(&
                            opcua::types::EnumValueType { description :
                            opcua::types::LocalizedText::new("",
                            "Enhanced feature cannot be supported without a CNC"),
                            display_name : opcua::types::LocalizedText::new("",
                            "FeatureNotSupported"), value : 25i64, }, ns_map
                            .namespaces()).expect("Invalid encoding ID"),
                        ],
                    ),
                ),
                1u8,
                1u8,
                Some(vec![26u32]),
                Some(0f64),
            )
            .into(),
        references: vec![
            opcua::nodes::ImportedReference { target_id : opcua::types::NodeId::new(0u16,
            68u32), type_id : opcua::types::NodeId::new(0u16, 40u32), is_forward : true,
            }, opcua::nodes::ImportedReference { target_id :
            opcua::types::NodeId::new(0u16, 24218u32), type_id :
            opcua::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_3974(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
                opcua::nodes::Base::new_full(
                    opcua::types::NodeId::new(0u16, 24240u32),
                    opcua::types::NodeClass::Variable,
                    opcua::types::QualifiedName::new(0u16, "EnumValues"),
                    opcua::types::LocalizedText::new("", "EnumValues"),
                    None,
                    Some(0u32),
                    Some(0u32),
                ),
                opcua::types::NodeId::new(0u16, 7594u32),
                false,
                1i32,
                opcua::types::DataValue::new_now(
                    opcua::types::Variant::from(
                        vec![
                            opcua::types::ExtensionObject::from_message_full(&
                            opcua::types::EnumValueType { description :
                            opcua::types::LocalizedText::new("",
                            "The related TSN Stream is currently disabled."),
                            display_name : opcua::types::LocalizedText::new("",
                            "Disabled"), value : 0i64, }, ns_map.namespaces())
                            .expect("Invalid encoding ID"),
                            opcua::types::ExtensionObject::from_message_full(&
                            opcua::types::EnumValueType { description :
                            opcua::types::LocalizedText::new("",
                            "The related TSN Stream is in the process of receiving configuration parameters from the TSN Control Layer."),
                            display_name : opcua::types::LocalizedText::new("",
                            "Configuring"), value : 1i64, }, ns_map.namespaces())
                            .expect("Invalid encoding ID"),
                            opcua::types::ExtensionObject::from_message_full(&
                            opcua::types::EnumValueType { description :
                            opcua::types::LocalizedText::new("",
                            "The related TSN Stream has successfully received and applied the configuration from the TSN Control Layer. The related TSN Stream is not fully operational as long as local preconditions (e.g. synchronization state) are not valid."),
                            display_name : opcua::types::LocalizedText::new("", "Ready"),
                            value : 2i64, }, ns_map.namespaces())
                            .expect("Invalid encoding ID"),
                            opcua::types::ExtensionObject::from_message_full(&
                            opcua::types::EnumValueType { description :
                            opcua::types::LocalizedText::new("",
                            "The related TSN Stream object is configured and all other required preconditions (e.g. synchronization state) for sending / receiving data are valid."),
                            display_name : opcua::types::LocalizedText::new("",
                            "Operational"), value : 3i64, }, ns_map.namespaces())
                            .expect("Invalid encoding ID"),
                            opcua::types::ExtensionObject::from_message_full(&
                            opcua::types::EnumValueType { description :
                            opcua::types::LocalizedText::new("",
                            "The related TSN Stream object is in an error state."),
                            display_name : opcua::types::LocalizedText::new("", "Error"),
                            value : 4i64, }, ns_map.namespaces())
                            .expect("Invalid encoding ID"),
                        ],
                    ),
                ),
                1u8,
                1u8,
                Some(vec![5u32]),
                Some(0f64),
            )
            .into(),
        references: vec![
            opcua::nodes::ImportedReference { target_id : opcua::types::NodeId::new(0u16,
            68u32), type_id : opcua::types::NodeId::new(0u16, 40u32), is_forward : true,
            }, opcua::nodes::ImportedReference { target_id :
            opcua::types::NodeId::new(0u16, 24220u32), type_id :
            opcua::types::NodeId::new(0u16, 46u32), is_forward : false, }
        ],
    }
}
#[allow(unused)]
fn make_variable_3976(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 24241u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "EnumValues"),
                opcua::types::LocalizedText::new("", "EnumValues"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 7594u32),
            false,
            1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(vec![
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: opcua::types::LocalizedText::new("", "No Talker detected."),
                        display_name: opcua::types::LocalizedText::new("", "None"),
                        value: 0i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: opcua::types::LocalizedText::new(
                            "",
                            "Talker ready (configured).",
                        ),
                        display_name: opcua::types::LocalizedText::new("", "Ready"),
                        value: 1i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: opcua::types::LocalizedText::new("", "Talker failed."),
                        display_name: opcua::types::LocalizedText::new("", "Failed"),
                        value: 2i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
            ])),
            1u8,
            1u8,
            Some(vec![3u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 24222u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3978(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 24242u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "EnumValues"),
                opcua::types::LocalizedText::new("", "EnumValues"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 7594u32),
            false,
            1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(vec![
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: opcua::types::LocalizedText::new("", "No Listener detected."),
                        display_name: opcua::types::LocalizedText::new("", "None"),
                        value: 0i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: opcua::types::LocalizedText::new(
                            "",
                            "Listener ready (configured).",
                        ),
                        display_name: opcua::types::LocalizedText::new("", "Ready"),
                        value: 1i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: opcua::types::LocalizedText::new(
                            "",
                            "One or more Listeners ready, and one or more Listeners failed.",
                        ),
                        display_name: opcua::types::LocalizedText::new("", "PartialFailed"),
                        value: 2i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: opcua::types::LocalizedText::new("", "Listener failed."),
                        display_name: opcua::types::LocalizedText::new("", "Failed"),
                        value: 3i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
            ])),
            1u8,
            1u8,
            Some(vec![4u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 24224u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3988(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 25222u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "AdminStatus"),
                opcua::types::LocalizedText::new("", "AdminStatus"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 24212u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 63u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 25221u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3989(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 25223u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "OperStatus"),
                opcua::types::LocalizedText::new("", "OperStatus"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 24214u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 63u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 25221u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_399(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 11581u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "InputArguments"),
                opcua::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(vec![
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::Argument {
                        array_dimensions: None,
                        data_type: opcua::types::NodeId::new(0u16, 3u32),
                        description: Default::default(),
                        name: "Mode".into(),
                        value_rank: -1i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
            ])),
            1u8,
            1u8,
            Some(vec![1u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 11580u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3990(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 25224u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "PhysAddress"),
                opcua::types::LocalizedText::new("", "PhysAddress"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 63u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 80u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 25221u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3991(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 25225u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "Speed"),
                opcua::types::LocalizedText::new("", "Speed"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 9u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 25252u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 17497u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 25221u32),
                type_id: opcua::types::NodeId::new(0u16, 47u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3992(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 25252u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "EngineeringUnits"),
                opcua::types::LocalizedText::new("", "EngineeringUnits"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 887u32),
            false,
            -1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EUInformation {
                        description: opcua::types::LocalizedText::new("en", "bit per second"),
                        display_name: opcua::types::LocalizedText::new("en", "bit/s"),
                        namespace_uri: "http://www.opcfoundation.org/UA/units/un/cefact".into(),
                        unit_id: 4337968i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
            )),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 25225u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3995(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 25228u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "PriorityMapppingEntries"),
                opcua::types::LocalizedText::new("", "PriorityMapppingEntries"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 25220u32),
            false,
            1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 25227u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3997(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 25230u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "InputArguments"),
                opcua::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(vec![
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::Argument {
                        array_dimensions: None,
                        data_type: opcua::types::NodeId::new(0u16, 12u32),
                        description: Default::default(),
                        name: "MappingUri".into(),
                        value_rank: -1i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::Argument {
                        array_dimensions: None,
                        data_type: opcua::types::NodeId::new(0u16, 12u32),
                        description: Default::default(),
                        name: "PriorityLabel".into(),
                        value_rank: -1i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::Argument {
                        array_dimensions: None,
                        data_type: opcua::types::NodeId::new(0u16, 3u32),
                        description: Default::default(),
                        name: "PriorityValue_PCP".into(),
                        value_rank: -1i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::Argument {
                        array_dimensions: None,
                        data_type: opcua::types::NodeId::new(0u16, 7u32),
                        description: Default::default(),
                        name: "PriorityValue_DSCP".into(),
                        value_rank: -1i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
            ])),
            1u8,
            1u8,
            Some(vec![4u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 25229u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_3999(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 25232u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "InputArguments"),
                opcua::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(vec![
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::Argument {
                        array_dimensions: None,
                        data_type: opcua::types::NodeId::new(0u16, 12u32),
                        description: Default::default(),
                        name: "MappingUri".into(),
                        value_rank: -1i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::Argument {
                        array_dimensions: None,
                        data_type: opcua::types::NodeId::new(0u16, 12u32),
                        description: Default::default(),
                        name: "PriorityLabel".into(),
                        value_rank: -1i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
            ])),
            1u8,
            1u8,
            Some(vec![2u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 25231u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_400(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 11582u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "OutputArguments"),
                opcua::types::LocalizedText::new("", "OutputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(vec![
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::Argument {
                        array_dimensions: None,
                        data_type: opcua::types::NodeId::new(0u16, 7u32),
                        description: Default::default(),
                        name: "FileHandle".into(),
                        value_rank: -1i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
            ])),
            1u8,
            1u8,
            Some(vec![1u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 11580u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_4017(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 32658u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "ReferenceRefinement"),
                opcua::types::LocalizedText::new("", "ReferenceRefinement"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 32660u32),
            false,
            1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 80u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 32657u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_402(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 11584u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "InputArguments"),
                opcua::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(vec![
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::Argument {
                        array_dimensions: None,
                        data_type: opcua::types::NodeId::new(0u16, 7u32),
                        description: Default::default(),
                        name: "FileHandle".into(),
                        value_rank: -1i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
            ])),
            1u8,
            1u8,
            Some(vec![1u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 11583u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_4021(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 7591u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "EnumStrings"),
                opcua::types::LocalizedText::new("", "EnumStrings"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 21u32),
            false,
            1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(vec![
                opcua::types::LocalizedText::new("", "Numeric"),
                opcua::types::LocalizedText::new("", "String"),
                opcua::types::LocalizedText::new("", "Guid"),
                opcua::types::LocalizedText::new("", "Opaque"),
            ])),
            1u8,
            1u8,
            Some(vec![4u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 256u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_4023(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 11878u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "EnumValues"),
                opcua::types::LocalizedText::new("", "EnumValues"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 7594u32),
            false,
            1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(vec![
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: opcua::types::LocalizedText::new("", "No value is specified."),
                        display_name: opcua::types::LocalizedText::new("", "Unspecified"),
                        value: 0i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: opcua::types::LocalizedText::new("", "The Node is an Object."),
                        display_name: opcua::types::LocalizedText::new("", "Object"),
                        value: 1i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: opcua::types::LocalizedText::new(
                            "",
                            "The Node is a Variable.",
                        ),
                        display_name: opcua::types::LocalizedText::new("", "Variable"),
                        value: 2i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: opcua::types::LocalizedText::new("", "The Node is a Method."),
                        display_name: opcua::types::LocalizedText::new("", "Method"),
                        value: 4i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: opcua::types::LocalizedText::new(
                            "",
                            "The Node is an ObjectType.",
                        ),
                        display_name: opcua::types::LocalizedText::new("", "ObjectType"),
                        value: 8i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: opcua::types::LocalizedText::new(
                            "",
                            "The Node is a VariableType.",
                        ),
                        display_name: opcua::types::LocalizedText::new("", "VariableType"),
                        value: 16i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: opcua::types::LocalizedText::new(
                            "",
                            "The Node is a ReferenceType.",
                        ),
                        display_name: opcua::types::LocalizedText::new("", "ReferenceType"),
                        value: 32i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: opcua::types::LocalizedText::new(
                            "",
                            "The Node is a DataType.",
                        ),
                        display_name: opcua::types::LocalizedText::new("", "DataType"),
                        value: 64i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: opcua::types::LocalizedText::new("", "The Node is a View."),
                        display_name: opcua::types::LocalizedText::new("", "View"),
                        value: 128i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
            ])),
            1u8,
            1u8,
            Some(vec![9u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 257u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_4025(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 15030u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "OptionSetValues"),
                opcua::types::LocalizedText::new("", "OptionSetValues"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 21u32),
            false,
            1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(vec![
                opcua::types::LocalizedText::new("", "Browse"),
                opcua::types::LocalizedText::new("", "ReadRolePermissions"),
                opcua::types::LocalizedText::new("", "WriteAttribute"),
                opcua::types::LocalizedText::new("", "WriteRolePermissions"),
                opcua::types::LocalizedText::new("", "WriteHistorizing"),
                opcua::types::LocalizedText::new("", "Read"),
                opcua::types::LocalizedText::new("", "Write"),
                opcua::types::LocalizedText::new("", "ReadHistory"),
                opcua::types::LocalizedText::new("", "InsertHistory"),
                opcua::types::LocalizedText::new("", "ModifyHistory"),
                opcua::types::LocalizedText::new("", "DeleteHistory"),
                opcua::types::LocalizedText::new("", "ReceiveEvents"),
                opcua::types::LocalizedText::new("", "Call"),
                opcua::types::LocalizedText::new("", "AddReference"),
                opcua::types::LocalizedText::new("", "RemoveReference"),
                opcua::types::LocalizedText::new("", "DeleteNode"),
                opcua::types::LocalizedText::new("", "AddNode"),
            ])),
            1u8,
            1u8,
            Some(vec![17u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 94u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_4027(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 15032u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "OptionSetValues"),
                opcua::types::LocalizedText::new("", "OptionSetValues"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 21u32),
            false,
            1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(vec![
                opcua::types::LocalizedText::new("", "CurrentRead"),
                opcua::types::LocalizedText::new("", "CurrentWrite"),
                opcua::types::LocalizedText::new("", "HistoryRead"),
                opcua::types::LocalizedText::new("", "HistoryWrite"),
                opcua::types::LocalizedText::new("", "SemanticChange"),
                opcua::types::LocalizedText::new("", "StatusWrite"),
                opcua::types::LocalizedText::new("", "TimestampWrite"),
            ])),
            1u8,
            1u8,
            Some(vec![7u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 15031u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_4029(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 15407u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "OptionSetValues"),
                opcua::types::LocalizedText::new("", "OptionSetValues"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 21u32),
            false,
            1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(vec![
                opcua::types::LocalizedText::new("", "CurrentRead"),
                opcua::types::LocalizedText::new("", "CurrentWrite"),
                opcua::types::LocalizedText::new("", "HistoryRead"),
                opcua::types::LocalizedText::new("", "HistoryWrite"),
                opcua::types::LocalizedText::new("", "SemanticChange"),
                opcua::types::LocalizedText::new("", "StatusWrite"),
                opcua::types::LocalizedText::new("", "TimestampWrite"),
                opcua::types::LocalizedText::new("", "Reserved"),
                opcua::types::LocalizedText::new("", "NonatomicRead"),
                opcua::types::LocalizedText::new("", "NonatomicWrite"),
                opcua::types::LocalizedText::new("", "WriteFullArrayOnly"),
                opcua::types::LocalizedText::new("", "NoSubDataTypes"),
                opcua::types::LocalizedText::new("", "NonVolatile"),
                opcua::types::LocalizedText::new("", "Constant"),
            ])),
            1u8,
            1u8,
            Some(vec![14u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 15406u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_4031(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 15034u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "OptionSetValues"),
                opcua::types::LocalizedText::new("", "OptionSetValues"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 21u32),
            false,
            1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(vec![
                opcua::types::LocalizedText::new("", "SubscribeToEvents"),
                opcua::types::LocalizedText::new("", "Reserved"),
                opcua::types::LocalizedText::new("", "HistoryRead"),
                opcua::types::LocalizedText::new("", "HistoryWrite"),
            ])),
            1u8,
            1u8,
            Some(vec![4u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 15033u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_4033(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 15035u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "OptionSetValues"),
                opcua::types::LocalizedText::new("", "OptionSetValues"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 21u32),
            false,
            1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(vec![
                opcua::types::LocalizedText::new("", "SigningRequired"),
                opcua::types::LocalizedText::new("", "EncryptionRequired"),
                opcua::types::LocalizedText::new("", "SessionRequired"),
                opcua::types::LocalizedText::new("", "ApplyRestrictionsToBrowse"),
            ])),
            1u8,
            1u8,
            Some(vec![4u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 95u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_4037(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 14528u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "EnumStrings"),
                opcua::types::LocalizedText::new("", "EnumStrings"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 21u32),
            false,
            1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(vec![
                opcua::types::LocalizedText::new("", "Structure"),
                opcua::types::LocalizedText::new("", "StructureWithOptionalFields"),
                opcua::types::LocalizedText::new("", "Union"),
                opcua::types::LocalizedText::new("", "StructureWithSubtypedValues"),
                opcua::types::LocalizedText::new("", "UnionWithSubtypedValues"),
            ])),
            1u8,
            1u8,
            Some(vec![5u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 98u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_404(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 11586u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "InputArguments"),
                opcua::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(vec![
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::Argument {
                        array_dimensions: None,
                        data_type: opcua::types::NodeId::new(0u16, 7u32),
                        description: Default::default(),
                        name: "FileHandle".into(),
                        value_rank: -1i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::Argument {
                        array_dimensions: None,
                        data_type: opcua::types::NodeId::new(0u16, 6u32),
                        description: Default::default(),
                        name: "Length".into(),
                        value_rank: -1i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
            ])),
            1u8,
            1u8,
            Some(vec![2u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 11585u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_405(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 11587u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "OutputArguments"),
                opcua::types::LocalizedText::new("", "OutputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(vec![
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::Argument {
                        array_dimensions: None,
                        data_type: opcua::types::NodeId::new(0u16, 15u32),
                        description: Default::default(),
                        name: "Data".into(),
                        value_rank: -1i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
            ])),
            1u8,
            1u8,
            Some(vec![1u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 11585u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_4057(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 7597u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "EnumStrings"),
                opcua::types::LocalizedText::new("", "EnumStrings"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 21u32),
            false,
            1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(vec![
                opcua::types::LocalizedText::new("", "Server"),
                opcua::types::LocalizedText::new("", "Client"),
                opcua::types::LocalizedText::new("", "ClientAndServer"),
                opcua::types::LocalizedText::new("", "DiscoveryServer"),
            ])),
            1u8,
            1u8,
            Some(vec![4u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 307u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_4063(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 7595u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "EnumStrings"),
                opcua::types::LocalizedText::new("", "EnumStrings"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 21u32),
            false,
            1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(vec![
                opcua::types::LocalizedText::new("", "Invalid"),
                opcua::types::LocalizedText::new("", "None"),
                opcua::types::LocalizedText::new("", "Sign"),
                opcua::types::LocalizedText::new("", "SignAndEncrypt"),
            ])),
            1u8,
            1u8,
            Some(vec![4u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 302u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_4065(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 7596u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "EnumStrings"),
                opcua::types::LocalizedText::new("", "EnumStrings"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 21u32),
            false,
            1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(vec![
                opcua::types::LocalizedText::new("", "Anonymous"),
                opcua::types::LocalizedText::new("", "UserName"),
                opcua::types::LocalizedText::new("", "Certificate"),
                opcua::types::LocalizedText::new("", "IssuedToken"),
            ])),
            1u8,
            1u8,
            Some(vec![4u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 303u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_407(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 11589u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "InputArguments"),
                opcua::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(vec![
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::Argument {
                        array_dimensions: None,
                        data_type: opcua::types::NodeId::new(0u16, 7u32),
                        description: Default::default(),
                        name: "FileHandle".into(),
                        value_rank: -1i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::Argument {
                        array_dimensions: None,
                        data_type: opcua::types::NodeId::new(0u16, 15u32),
                        description: Default::default(),
                        name: "Data".into(),
                        value_rank: -1i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
            ])),
            1u8,
            1u8,
            Some(vec![2u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 11588u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_4072(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 7598u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "EnumStrings"),
                opcua::types::LocalizedText::new("", "EnumStrings"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 21u32),
            false,
            1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(vec![
                opcua::types::LocalizedText::new("", "Issue"),
                opcua::types::LocalizedText::new("", "Renew"),
            ])),
            1u8,
            1u8,
            Some(vec![2u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 315u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_4081(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 11881u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "EnumValues"),
                opcua::types::LocalizedText::new("", "EnumValues"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 7594u32),
            false,
            1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(vec![
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: Default::default(),
                        display_name: opcua::types::LocalizedText::new("", "None"),
                        value: 0i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: Default::default(),
                        display_name: opcua::types::LocalizedText::new("", "AccessLevel"),
                        value: 1i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: Default::default(),
                        display_name: opcua::types::LocalizedText::new("", "ArrayDimensions"),
                        value: 2i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: Default::default(),
                        display_name: opcua::types::LocalizedText::new("", "BrowseName"),
                        value: 4i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: Default::default(),
                        display_name: opcua::types::LocalizedText::new("", "ContainsNoLoops"),
                        value: 8i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: Default::default(),
                        display_name: opcua::types::LocalizedText::new("", "DataType"),
                        value: 16i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: Default::default(),
                        display_name: opcua::types::LocalizedText::new("", "Description"),
                        value: 32i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: Default::default(),
                        display_name: opcua::types::LocalizedText::new("", "DisplayName"),
                        value: 64i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: Default::default(),
                        display_name: opcua::types::LocalizedText::new("", "EventNotifier"),
                        value: 128i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: Default::default(),
                        display_name: opcua::types::LocalizedText::new("", "Executable"),
                        value: 256i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: Default::default(),
                        display_name: opcua::types::LocalizedText::new("", "Historizing"),
                        value: 512i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: Default::default(),
                        display_name: opcua::types::LocalizedText::new("", "InverseName"),
                        value: 1024i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: Default::default(),
                        display_name: opcua::types::LocalizedText::new("", "IsAbstract"),
                        value: 2048i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: Default::default(),
                        display_name: opcua::types::LocalizedText::new(
                            "",
                            "MinimumSamplingInterval",
                        ),
                        value: 4096i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: Default::default(),
                        display_name: opcua::types::LocalizedText::new("", "NodeClass"),
                        value: 8192i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: Default::default(),
                        display_name: opcua::types::LocalizedText::new("", "NodeId"),
                        value: 16384i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: Default::default(),
                        display_name: opcua::types::LocalizedText::new("", "Symmetric"),
                        value: 32768i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: Default::default(),
                        display_name: opcua::types::LocalizedText::new("", "UserAccessLevel"),
                        value: 65536i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: Default::default(),
                        display_name: opcua::types::LocalizedText::new("", "UserExecutable"),
                        value: 131072i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: Default::default(),
                        display_name: opcua::types::LocalizedText::new("", "UserWriteMask"),
                        value: 262144i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: Default::default(),
                        display_name: opcua::types::LocalizedText::new("", "ValueRank"),
                        value: 524288i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: Default::default(),
                        display_name: opcua::types::LocalizedText::new("", "WriteMask"),
                        value: 1048576i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: Default::default(),
                        display_name: opcua::types::LocalizedText::new("", "Value"),
                        value: 2097152i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: Default::default(),
                        display_name: opcua::types::LocalizedText::new("", "DataTypeDefinition"),
                        value: 4194304i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: Default::default(),
                        display_name: opcua::types::LocalizedText::new("", "RolePermissions"),
                        value: 8388608i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: Default::default(),
                        display_name: opcua::types::LocalizedText::new("", "AccessRestrictions"),
                        value: 16777216i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: Default::default(),
                        display_name: opcua::types::LocalizedText::new("", "All"),
                        value: 33554431i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: Default::default(),
                        display_name: opcua::types::LocalizedText::new("", "BaseNode"),
                        value: 26501220i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: Default::default(),
                        display_name: opcua::types::LocalizedText::new("", "Object"),
                        value: 26501348i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: Default::default(),
                        display_name: opcua::types::LocalizedText::new("", "ObjectType"),
                        value: 26503268i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: Default::default(),
                        display_name: opcua::types::LocalizedText::new("", "Variable"),
                        value: 26571383i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: Default::default(),
                        display_name: opcua::types::LocalizedText::new("", "VariableType"),
                        value: 28600438i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: Default::default(),
                        display_name: opcua::types::LocalizedText::new("", "Method"),
                        value: 26632548i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: Default::default(),
                        display_name: opcua::types::LocalizedText::new("", "ReferenceType"),
                        value: 26537060i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: Default::default(),
                        display_name: opcua::types::LocalizedText::new("", "View"),
                        value: 26501356i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
            ])),
            1u8,
            1u8,
            Some(vec![35u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 348u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_4087(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 15036u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "OptionSetValues"),
                opcua::types::LocalizedText::new("", "OptionSetValues"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 21u32),
            false,
            1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(vec![
                opcua::types::LocalizedText::new("", "AccessLevel"),
                opcua::types::LocalizedText::new("", "ArrayDimensions"),
                opcua::types::LocalizedText::new("", "BrowseName"),
                opcua::types::LocalizedText::new("", "ContainsNoLoops"),
                opcua::types::LocalizedText::new("", "DataType"),
                opcua::types::LocalizedText::new("", "Description"),
                opcua::types::LocalizedText::new("", "DisplayName"),
                opcua::types::LocalizedText::new("", "EventNotifier"),
                opcua::types::LocalizedText::new("", "Executable"),
                opcua::types::LocalizedText::new("", "Historizing"),
                opcua::types::LocalizedText::new("", "InverseName"),
                opcua::types::LocalizedText::new("", "IsAbstract"),
                opcua::types::LocalizedText::new("", "MinimumSamplingInterval"),
                opcua::types::LocalizedText::new("", "NodeClass"),
                opcua::types::LocalizedText::new("", "NodeId"),
                opcua::types::LocalizedText::new("", "Symmetric"),
                opcua::types::LocalizedText::new("", "UserAccessLevel"),
                opcua::types::LocalizedText::new("", "UserExecutable"),
                opcua::types::LocalizedText::new("", "UserWriteMask"),
                opcua::types::LocalizedText::new("", "ValueRank"),
                opcua::types::LocalizedText::new("", "WriteMask"),
                opcua::types::LocalizedText::new("", "ValueForVariableType"),
                opcua::types::LocalizedText::new("", "DataTypeDefinition"),
                opcua::types::LocalizedText::new("", "RolePermissions"),
                opcua::types::LocalizedText::new("", "AccessRestrictions"),
                opcua::types::LocalizedText::new("", "AccessLevelEx"),
            ])),
            1u8,
            1u8,
            Some(vec![26u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 347u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_409(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 11591u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "InputArguments"),
                opcua::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(vec![
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::Argument {
                        array_dimensions: None,
                        data_type: opcua::types::NodeId::new(0u16, 7u32),
                        description: Default::default(),
                        name: "FileHandle".into(),
                        value_rank: -1i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
            ])),
            1u8,
            1u8,
            Some(vec![1u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 11590u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_4095(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 7605u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "EnumStrings"),
                opcua::types::LocalizedText::new("", "EnumStrings"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 21u32),
            false,
            1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(vec![
                opcua::types::LocalizedText::new("", "Equals"),
                opcua::types::LocalizedText::new("", "IsNull"),
                opcua::types::LocalizedText::new("", "GreaterThan"),
                opcua::types::LocalizedText::new("", "LessThan"),
                opcua::types::LocalizedText::new("", "GreaterThanOrEqual"),
                opcua::types::LocalizedText::new("", "LessThanOrEqual"),
                opcua::types::LocalizedText::new("", "Like"),
                opcua::types::LocalizedText::new("", "Not"),
                opcua::types::LocalizedText::new("", "Between"),
                opcua::types::LocalizedText::new("", "InList"),
                opcua::types::LocalizedText::new("", "And"),
                opcua::types::LocalizedText::new("", "Or"),
                opcua::types::LocalizedText::new("", "Cast"),
                opcua::types::LocalizedText::new("", "InView"),
                opcua::types::LocalizedText::new("", "OfType"),
                opcua::types::LocalizedText::new("", "RelatedTo"),
                opcua::types::LocalizedText::new("", "BitwiseAnd"),
                opcua::types::LocalizedText::new("", "BitwiseOr"),
            ])),
            1u8,
            1u8,
            Some(vec![18u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 576u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_410(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 11592u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "OutputArguments"),
                opcua::types::LocalizedText::new("", "OutputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(vec![
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::Argument {
                        array_dimensions: None,
                        data_type: opcua::types::NodeId::new(0u16, 9u32),
                        description: Default::default(),
                        name: "Position".into(),
                        value_rank: -1i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
            ])),
            1u8,
            1u8,
            Some(vec![1u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 11590u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_4107(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 11884u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "EnumValues"),
                opcua::types::LocalizedText::new("", "EnumValues"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 7594u32),
            false,
            1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(vec![
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: opcua::types::LocalizedText::new("", "Data was inserted."),
                        display_name: opcua::types::LocalizedText::new("", "Insert"),
                        value: 1i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: opcua::types::LocalizedText::new("", "Data was replaced."),
                        display_name: opcua::types::LocalizedText::new("", "Replace"),
                        value: 2i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: opcua::types::LocalizedText::new(
                            "",
                            "Data was inserted or replaced.",
                        ),
                        display_name: opcua::types::LocalizedText::new("", "Update"),
                        value: 3i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: opcua::types::LocalizedText::new("", "Data was deleted."),
                        display_name: opcua::types::LocalizedText::new("", "Delete"),
                        value: 4i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
            ])),
            1u8,
            1u8,
            Some(vec![4u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 11234u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_4109(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 11885u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "EnumValues"),
                opcua::types::LocalizedText::new("", "EnumValues"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 7594u32),
            false,
            1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(vec![
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: opcua::types::LocalizedText::new("", "Data was inserted."),
                        display_name: opcua::types::LocalizedText::new("", "Insert"),
                        value: 1i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: opcua::types::LocalizedText::new("", "Data was replaced."),
                        display_name: opcua::types::LocalizedText::new("", "Replace"),
                        value: 2i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: opcua::types::LocalizedText::new(
                            "",
                            "Data was inserted or replaced.",
                        ),
                        display_name: opcua::types::LocalizedText::new("", "Update"),
                        value: 3i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::EnumValueType {
                        description: opcua::types::LocalizedText::new("", "Data was deleted."),
                        display_name: opcua::types::LocalizedText::new("", "Remove"),
                        value: 4i64,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
            ])),
            1u8,
            1u8,
            Some(vec![4u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 11293u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_4116(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 7611u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "EnumStrings"),
                opcua::types::LocalizedText::new("", "EnumStrings"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 21u32),
            false,
            1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(vec![
                opcua::types::LocalizedText::new("", "None"),
                opcua::types::LocalizedText::new("", "Cold"),
                opcua::types::LocalizedText::new("", "Warm"),
                opcua::types::LocalizedText::new("", "Hot"),
                opcua::types::LocalizedText::new("", "Transparent"),
                opcua::types::LocalizedText::new("", "HotAndMirrored"),
            ])),
            1u8,
            1u8,
            Some(vec![6u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 851u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_4118(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 7612u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "EnumStrings"),
                opcua::types::LocalizedText::new("", "EnumStrings"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 21u32),
            false,
            1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(vec![
                opcua::types::LocalizedText::new("", "Running"),
                opcua::types::LocalizedText::new("", "Failed"),
                opcua::types::LocalizedText::new("", "NoConfiguration"),
                opcua::types::LocalizedText::new("", "Suspended"),
                opcua::types::LocalizedText::new("", "Shutdown"),
                opcua::types::LocalizedText::new("", "Test"),
                opcua::types::LocalizedText::new("", "CommunicationFault"),
                opcua::types::LocalizedText::new("", "Unknown"),
            ])),
            1u8,
            1u8,
            Some(vec![8u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 852u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_412(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 11594u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "InputArguments"),
                opcua::types::LocalizedText::new("", "InputArguments"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 296u32),
            false,
            1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(vec![
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::Argument {
                        array_dimensions: None,
                        data_type: opcua::types::NodeId::new(0u16, 7u32),
                        description: Default::default(),
                        name: "FileHandle".into(),
                        value_rank: -1i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
                opcua::types::ExtensionObject::from_message_full(
                    &opcua::types::Argument {
                        array_dimensions: None,
                        data_type: opcua::types::NodeId::new(0u16, 9u32),
                        description: Default::default(),
                        name: "Position".into(),
                        value_rank: -1i32,
                    },
                    ns_map.namespaces(),
                )
                .expect("Invalid encoding ID"),
            ])),
            1u8,
            1u8,
            Some(vec![2u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 11593u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_4135(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 12078u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "EnumStrings"),
                opcua::types::LocalizedText::new("", "EnumStrings"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 21u32),
            false,
            1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(vec![
                opcua::types::LocalizedText::new("", "Linear"),
                opcua::types::LocalizedText::new("", "Log"),
                opcua::types::LocalizedText::new("", "Ln"),
            ])),
            1u8,
            1u8,
            Some(vec![3u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 12077u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_4144(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 7614u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "EnumStrings"),
                opcua::types::LocalizedText::new("", "EnumStrings"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 21u32),
            false,
            1i32,
            opcua::types::DataValue::new_now(opcua::types::Variant::from(vec![
                opcua::types::LocalizedText::new("", "AbsoluteValue"),
                opcua::types::LocalizedText::new("", "PercentOfValue"),
                opcua::types::LocalizedText::new("", "PercentOfRange"),
                opcua::types::LocalizedText::new("", "PercentOfEURange"),
                opcua::types::LocalizedText::new("", "Unknown"),
            ])),
            1u8,
            1u8,
            Some(vec![5u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 890u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_416(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 11617u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "NamespaceUri"),
                opcua::types::LocalizedText::new("", "NamespaceUri"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 11616u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_417(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 11618u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "NamespaceVersion"),
                opcua::types::LocalizedText::new("", "NamespaceVersion"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 12u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 11616u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_418(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 11619u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "NamespacePublicationDate"),
                opcua::types::LocalizedText::new("", "NamespacePublicationDate"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 13u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 11616u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_419(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 11620u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "IsNamespaceSubset"),
                opcua::types::LocalizedText::new("", "IsNamespaceSubset"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 1u32),
            false,
            -1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            None,
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 11616u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_420(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 11621u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "StaticNodeIdTypes"),
                opcua::types::LocalizedText::new("", "StaticNodeIdTypes"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 256u32),
            false,
            1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 11616u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
#[allow(unused)]
fn make_variable_421(
    ns_map: &opcua::nodes::NodeSetNamespaceMapper<'_>,
) -> opcua::nodes::ImportedItem {
    opcua::nodes::ImportedItem {
        node: opcua::nodes::Variable::new_full(
            opcua::nodes::Base::new_full(
                opcua::types::NodeId::new(0u16, 11622u32),
                opcua::types::NodeClass::Variable,
                opcua::types::QualifiedName::new(0u16, "StaticNumericNodeIdRange"),
                opcua::types::LocalizedText::new("", "StaticNumericNodeIdRange"),
                None,
                Some(0u32),
                Some(0u32),
            ),
            opcua::types::NodeId::new(0u16, 291u32),
            false,
            1i32,
            opcua::types::DataValue::null(),
            1u8,
            1u8,
            Some(vec![0u32]),
            Some(0f64),
        )
        .into(),
        references: vec![
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 68u32),
                type_id: opcua::types::NodeId::new(0u16, 40u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 78u32),
                type_id: opcua::types::NodeId::new(0u16, 37u32),
                is_forward: true,
            },
            opcua::nodes::ImportedReference {
                target_id: opcua::types::NodeId::new(0u16, 11616u32),
                type_id: opcua::types::NodeId::new(0u16, 46u32),
                is_forward: false,
            },
        ],
    }
}
