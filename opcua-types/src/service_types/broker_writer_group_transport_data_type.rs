// This file was autogenerated from tools/schema/schemas/1.0.4/Opc.Ua.Types.bsd by opcua-codegen
//
// DO NOT EDIT THIS FILE

// OPCUA for Rust
// SPDX-License-Identifier: MPL-2.0
// Copyright (C) 2017-2024 Adam Lock, Einar Omang
#[allow(unused)]
mod opcua { pub use crate as types; }#[derive(Debug, Clone, PartialEq)]
pub struct BrokerWriterGroupTransportDataType {
    pub queue_name: opcua::types::string::UAString,
    pub resource_uri: opcua::types::string::UAString,
    pub authentication_profile_uri: opcua::types::string::UAString,
    pub requested_delivery_guarantee: super::enums::BrokerTransportQualityOfService,
}
impl opcua::types::MessageInfo for BrokerWriterGroupTransportDataType {
    fn object_id(&self) -> opcua::types::ObjectId {
        opcua::types::ObjectId::BrokerWriterGroupTransportDataType_Encoding_DefaultBinary
    }
}
impl opcua::types::BinaryEncoder for BrokerWriterGroupTransportDataType {
    fn byte_len(&self) -> usize {
        let mut size = 0usize;
        size += self.queue_name.byte_len();
        size += self.resource_uri.byte_len();
        size += self.authentication_profile_uri.byte_len();
        size += self.requested_delivery_guarantee.byte_len();
        size
    }
    #[allow(unused_variables)]
    fn encode<S: std::io::Write>(
        &self,
        stream: &mut S,
    ) -> opcua::types::EncodingResult<usize> {
        let mut size = 0usize;
        size += self.queue_name.encode(stream)?;
        size += self.resource_uri.encode(stream)?;
        size += self.authentication_profile_uri.encode(stream)?;
        size += self.requested_delivery_guarantee.encode(stream)?;
        Ok(size)
    }
    #[allow(unused_variables)]
    fn decode<S: std::io::Read>(
        stream: &mut S,
        decoding_options: &opcua::types::DecodingOptions,
    ) -> opcua::types::EncodingResult<Self> {
        let queue_name = <opcua::types::string::UAString as opcua::types::BinaryEncoder>::decode(
            stream,
            decoding_options,
        )?;
        let resource_uri = <opcua::types::string::UAString as opcua::types::BinaryEncoder>::decode(
            stream,
            decoding_options,
        )?;
        let authentication_profile_uri = <opcua::types::string::UAString as opcua::types::BinaryEncoder>::decode(
            stream,
            decoding_options,
        )?;
        let requested_delivery_guarantee = <super::enums::BrokerTransportQualityOfService as opcua::types::BinaryEncoder>::decode(
            stream,
            decoding_options,
        )?;
        Ok(Self {
            queue_name,
            resource_uri,
            authentication_profile_uri,
            requested_delivery_guarantee,
        })
    }
}
