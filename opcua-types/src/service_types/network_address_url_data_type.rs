// OPCUA for Rust
// SPDX-License-Identifier: MPL-2.0
// Copyright (C) 2017-2024 Adam Lock, Einar Omang
//
// This file was autogenerated from tools/schema/schemas/1.0.4/Opc.Ua.Types.bsd by opcua-codegen
//
// DO NOT EDIT THIS FILE
#[derive(Debug, Clone, PartialEq)]
#[derive(Default)]
pub struct NetworkAddressUrlDataType {
    pub network_interface: crate::string::UAString,
    pub url: crate::string::UAString,
}
impl crate::BinaryEncoder for NetworkAddressUrlDataType {
    fn byte_len(&self) -> usize {
        let mut size = 0usize;
        size += self.network_interface.byte_len();
        size += self.url.byte_len();
        size
    }
    #[allow(unused_variables)]
    fn encode<S: std::io::Write>(&self, stream: &mut S) -> crate::EncodingResult<usize> {
        let mut size = 0usize;
        size += self.network_interface.encode(stream)?;
        size += self.url.encode(stream)?;
        Ok(size)
    }
    #[allow(unused_variables)]
    fn decode<S: std::io::Read>(
        stream: &mut S,
        decoding_options: &crate::DecodingOptions,
    ) -> crate::EncodingResult<Self> {
        let network_interface = <crate::string::UAString as crate::BinaryEncoder>::decode(
            stream,
            decoding_options,
        )?;
        let url = <crate::string::UAString as crate::BinaryEncoder>::decode(
            stream,
            decoding_options,
        )?;
        Ok(Self { network_interface, url })
    }
}
