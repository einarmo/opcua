// This file was autogenerated from tools/schema/schemas/1.0.4/Opc.Ua.Types.bsd by opcua-codegen
//
// DO NOT EDIT THIS FILE

// OPCUA for Rust
// SPDX-License-Identifier: MPL-2.0
// Copyright (C) 2017-2024 Adam Lock, Einar Omang
#[allow(unused)]
mod opcua { pub use crate as types; }#[derive(Debug, Clone, PartialEq)]
#[derive(Default)]
pub struct TrustListDataType {
    pub specified_lists: u32,
    pub trusted_certificates: Option<Vec<opcua::types::byte_string::ByteString>>,
    pub trusted_crls: Option<Vec<opcua::types::byte_string::ByteString>>,
    pub issuer_certificates: Option<Vec<opcua::types::byte_string::ByteString>>,
    pub issuer_crls: Option<Vec<opcua::types::byte_string::ByteString>>,
}
impl opcua::types::MessageInfo for TrustListDataType {
    fn object_id(&self) -> opcua::types::ObjectId {
        opcua::types::ObjectId::TrustListDataType_Encoding_DefaultBinary
    }
}
impl opcua::types::BinaryEncoder for TrustListDataType {
    fn byte_len(&self) -> usize {
        let mut size = 0usize;
        size += self.specified_lists.byte_len();
        size += self.trusted_certificates.byte_len();
        size += self.trusted_crls.byte_len();
        size += self.issuer_certificates.byte_len();
        size += self.issuer_crls.byte_len();
        size
    }
    #[allow(unused_variables)]
    fn encode<S: std::io::Write>(
        &self,
        stream: &mut S,
    ) -> opcua::types::EncodingResult<usize> {
        let mut size = 0usize;
        size += self.specified_lists.encode(stream)?;
        size += self.trusted_certificates.encode(stream)?;
        size += self.trusted_crls.encode(stream)?;
        size += self.issuer_certificates.encode(stream)?;
        size += self.issuer_crls.encode(stream)?;
        Ok(size)
    }
    #[allow(unused_variables)]
    fn decode<S: std::io::Read>(
        stream: &mut S,
        decoding_options: &opcua::types::DecodingOptions,
    ) -> opcua::types::EncodingResult<Self> {
        let specified_lists = <u32 as opcua::types::BinaryEncoder>::decode(
            stream,
            decoding_options,
        )?;
        let trusted_certificates = <Option<
            Vec<opcua::types::byte_string::ByteString>,
        > as opcua::types::BinaryEncoder>::decode(stream, decoding_options)?;
        let trusted_crls = <Option<
            Vec<opcua::types::byte_string::ByteString>,
        > as opcua::types::BinaryEncoder>::decode(stream, decoding_options)?;
        let issuer_certificates = <Option<
            Vec<opcua::types::byte_string::ByteString>,
        > as opcua::types::BinaryEncoder>::decode(stream, decoding_options)?;
        let issuer_crls = <Option<
            Vec<opcua::types::byte_string::ByteString>,
        > as opcua::types::BinaryEncoder>::decode(stream, decoding_options)?;
        Ok(Self {
            specified_lists,
            trusted_certificates,
            trusted_crls,
            issuer_certificates,
            issuer_crls,
        })
    }
}
