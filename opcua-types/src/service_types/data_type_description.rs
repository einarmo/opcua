// OPCUA for Rust
// SPDX-License-Identifier: MPL-2.0
// Copyright (C) 2017-2024 Adam Lock, Einar Omang
//
// This file was autogenerated from tools/schema/schemas/1.0.4/Opc.Ua.Types.bsd by opcua-codegen
//
// DO NOT EDIT THIS FILE
#[derive(Debug, Clone, PartialEq)]
#[derive(Default)]
pub struct DataTypeDescription {
    pub data_type_id: crate::node_id::NodeId,
    pub name: crate::qualified_name::QualifiedName,
}
impl crate::MessageInfo for DataTypeDescription {
    fn object_id(&self) -> crate::ObjectId {
        crate::ObjectId::DataTypeDescription_Encoding_DefaultBinary
    }
}
impl crate::BinaryEncoder for DataTypeDescription {
    fn byte_len(&self) -> usize {
        let mut size = 0usize;
        size += self.data_type_id.byte_len();
        size += self.name.byte_len();
        size
    }
    #[allow(unused_variables)]
    fn encode<S: std::io::Write>(&self, stream: &mut S) -> crate::EncodingResult<usize> {
        let mut size = 0usize;
        size += self.data_type_id.encode(stream)?;
        size += self.name.encode(stream)?;
        Ok(size)
    }
    #[allow(unused_variables)]
    fn decode<S: std::io::Read>(
        stream: &mut S,
        decoding_options: &crate::DecodingOptions,
    ) -> crate::EncodingResult<Self> {
        let data_type_id = <crate::node_id::NodeId as crate::BinaryEncoder>::decode(
            stream,
            decoding_options,
        )?;
        let name = <crate::qualified_name::QualifiedName as crate::BinaryEncoder>::decode(
            stream,
            decoding_options,
        )?;
        Ok(Self { data_type_id, name })
    }
}
