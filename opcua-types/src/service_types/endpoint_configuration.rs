// OPCUA for Rust
// SPDX-License-Identifier: MPL-2.0
// Copyright (C) 2017-2024 Adam Lock, Einar Omang
//
// This file was autogenerated from tools/schema/schemas/1.0.4/Opc.Ua.Types.bsd by opcua-codegen
//
// DO NOT EDIT THIS FILE
#[derive(Debug, Clone, PartialEq)]
#[derive(Default)]
pub struct EndpointConfiguration {
    pub operation_timeout: i32,
    pub use_binary_encoding: bool,
    pub max_string_length: i32,
    pub max_byte_string_length: i32,
    pub max_array_length: i32,
    pub max_message_size: i32,
    pub max_buffer_size: i32,
    pub channel_lifetime: i32,
    pub security_token_lifetime: i32,
}
impl crate::MessageInfo for EndpointConfiguration {
    fn object_id(&self) -> crate::ObjectId {
        crate::ObjectId::EndpointConfiguration_Encoding_DefaultBinary
    }
}
impl crate::BinaryEncoder for EndpointConfiguration {
    fn byte_len(&self) -> usize {
        let mut size = 0usize;
        size += self.operation_timeout.byte_len();
        size += self.use_binary_encoding.byte_len();
        size += self.max_string_length.byte_len();
        size += self.max_byte_string_length.byte_len();
        size += self.max_array_length.byte_len();
        size += self.max_message_size.byte_len();
        size += self.max_buffer_size.byte_len();
        size += self.channel_lifetime.byte_len();
        size += self.security_token_lifetime.byte_len();
        size
    }
    #[allow(unused_variables)]
    fn encode<S: std::io::Write>(&self, stream: &mut S) -> crate::EncodingResult<usize> {
        let mut size = 0usize;
        size += self.operation_timeout.encode(stream)?;
        size += self.use_binary_encoding.encode(stream)?;
        size += self.max_string_length.encode(stream)?;
        size += self.max_byte_string_length.encode(stream)?;
        size += self.max_array_length.encode(stream)?;
        size += self.max_message_size.encode(stream)?;
        size += self.max_buffer_size.encode(stream)?;
        size += self.channel_lifetime.encode(stream)?;
        size += self.security_token_lifetime.encode(stream)?;
        Ok(size)
    }
    #[allow(unused_variables)]
    fn decode<S: std::io::Read>(
        stream: &mut S,
        decoding_options: &crate::DecodingOptions,
    ) -> crate::EncodingResult<Self> {
        let operation_timeout = <i32 as crate::BinaryEncoder>::decode(
            stream,
            decoding_options,
        )?;
        let use_binary_encoding = <bool as crate::BinaryEncoder>::decode(
            stream,
            decoding_options,
        )?;
        let max_string_length = <i32 as crate::BinaryEncoder>::decode(
            stream,
            decoding_options,
        )?;
        let max_byte_string_length = <i32 as crate::BinaryEncoder>::decode(
            stream,
            decoding_options,
        )?;
        let max_array_length = <i32 as crate::BinaryEncoder>::decode(
            stream,
            decoding_options,
        )?;
        let max_message_size = <i32 as crate::BinaryEncoder>::decode(
            stream,
            decoding_options,
        )?;
        let max_buffer_size = <i32 as crate::BinaryEncoder>::decode(
            stream,
            decoding_options,
        )?;
        let channel_lifetime = <i32 as crate::BinaryEncoder>::decode(
            stream,
            decoding_options,
        )?;
        let security_token_lifetime = <i32 as crate::BinaryEncoder>::decode(
            stream,
            decoding_options,
        )?;
        Ok(Self {
            operation_timeout,
            use_binary_encoding,
            max_string_length,
            max_byte_string_length,
            max_array_length,
            max_message_size,
            max_buffer_size,
            channel_lifetime,
            security_token_lifetime,
        })
    }
}
