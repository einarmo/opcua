// This file was autogenerated from schemas/1.0.4/Opc.Ua.Types.bsd by opcua-codegen
//
// DO NOT EDIT THIS FILE

// OPCUA for Rust
// SPDX-License-Identifier: MPL-2.0
// Copyright (C) 2017-2024 Adam Lock, Einar Omang
#[allow(unused)]
mod opcua { pub use crate as types; }#[derive(Debug, Clone, PartialEq)]
#[cfg_attr(feature = "json", serde_with::skip_serializing_none)]
#[cfg_attr(feature = "json", derive(serde::Serialize, serde::Deserialize))]
#[cfg_attr(feature = "json", serde(rename_all = "PascalCase"))]
#[cfg_attr(feature = "xml", derive(opcua::types::FromXml))]
#[derive(Default)]
pub struct MonitoredItemCreateResult {
    pub status_code: opcua::types::status_code::StatusCode,
    pub monitored_item_id: u32,
    pub revised_sampling_interval: f64,
    pub revised_queue_size: u32,
    pub filter_result: opcua::types::extension_object::ExtensionObject,
}
impl opcua::types::MessageInfo for MonitoredItemCreateResult {
    fn type_id(&self) -> opcua::types::ObjectId {
        opcua::types::ObjectId::MonitoredItemCreateResult_Encoding_DefaultBinary
    }
    fn json_type_id(&self) -> opcua::types::ObjectId {
        opcua::types::ObjectId::MonitoredItemCreateResult_Encoding_DefaultJson
    }
    fn xml_type_id(&self) -> opcua::types::ObjectId {
        opcua::types::ObjectId::MonitoredItemCreateResult_Encoding_DefaultXml
    }
}
impl opcua::types::BinaryEncodable for MonitoredItemCreateResult {
    fn byte_len(&self) -> usize {
        let mut size = 0usize;
        size += self.status_code.byte_len();
        size += self.monitored_item_id.byte_len();
        size += self.revised_sampling_interval.byte_len();
        size += self.revised_queue_size.byte_len();
        size += self.filter_result.byte_len();
        size
    }
    #[allow(unused_variables)]
    fn encode<S: std::io::Write>(
        &self,
        stream: &mut S,
    ) -> opcua::types::EncodingResult<usize> {
        let mut size = 0usize;
        size += self.status_code.encode(stream)?;
        size += self.monitored_item_id.encode(stream)?;
        size += self.revised_sampling_interval.encode(stream)?;
        size += self.revised_queue_size.encode(stream)?;
        size += self.filter_result.encode(stream)?;
        Ok(size)
    }
    #[allow(unused_variables)]
    fn decode<S: std::io::Read>(
        stream: &mut S,
        decoding_options: &opcua::types::DecodingOptions,
    ) -> opcua::types::EncodingResult<Self> {
        let status_code = <opcua::types::status_code::StatusCode as opcua::types::BinaryEncodable>::decode(
            stream,
            decoding_options,
        )?;
        let monitored_item_id = <u32 as opcua::types::BinaryEncodable>::decode(
            stream,
            decoding_options,
        )?;
        let revised_sampling_interval = <f64 as opcua::types::BinaryEncodable>::decode(
            stream,
            decoding_options,
        )?;
        let revised_queue_size = <u32 as opcua::types::BinaryEncodable>::decode(
            stream,
            decoding_options,
        )?;
        let filter_result = <opcua::types::extension_object::ExtensionObject as opcua::types::BinaryEncodable>::decode(
            stream,
            decoding_options,
        )?;
        Ok(Self {
            status_code,
            monitored_item_id,
            revised_sampling_interval,
            revised_queue_size,
            filter_result,
        })
    }
}
