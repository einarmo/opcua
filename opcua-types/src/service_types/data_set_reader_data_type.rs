// This file was autogenerated from schemas/1.0.4/Opc.Ua.Types.bsd by opcua-codegen
//
// DO NOT EDIT THIS FILE

// OPCUA for Rust
// SPDX-License-Identifier: MPL-2.0
// Copyright (C) 2017-2024 Adam Lock, Einar Omang
#[allow(unused)]
mod opcua { pub use crate as types; }
#[derive(Debug, Clone, PartialEq)]
#[cfg_attr(feature = "json", serde_with::skip_serializing_none)]
#[cfg_attr(feature = "json", derive(serde::Serialize, serde::Deserialize))]
#[cfg_attr(feature = "json", serde(rename_all = "PascalCase"))]
#[cfg_attr(feature = "xml", derive(opcua::types::FromXml))]
pub struct DataSetReaderDataType {
    pub name: opcua::types::string::UAString,
    pub enabled: bool,
    pub publisher_id: opcua::types::variant::Variant,
    pub writer_group_id: u16,
    pub data_set_writer_id: u16,
    pub data_set_meta_data: super::data_set_meta_data_type::DataSetMetaDataType,
    pub data_set_field_content_mask: super::enums::DataSetFieldContentMask,
    pub message_receive_timeout: f64,
    pub key_frame_count: u32,
    pub header_layout_uri: opcua::types::string::UAString,
    pub security_mode: super::enums::MessageSecurityMode,
    pub security_group_id: opcua::types::string::UAString,
    pub security_key_services: Option<
        Vec<super::endpoint_description::EndpointDescription>,
    >,
    pub data_set_reader_properties: Option<Vec<super::key_value_pair::KeyValuePair>>,
    pub transport_settings: opcua::types::extension_object::ExtensionObject,
    pub message_settings: opcua::types::extension_object::ExtensionObject,
    pub subscribed_data_set: opcua::types::extension_object::ExtensionObject,
}
impl opcua::types::MessageInfo for DataSetReaderDataType {
    fn type_id(&self) -> opcua::types::ObjectId {
        opcua::types::ObjectId::DataSetReaderDataType_Encoding_DefaultBinary
    }
    fn json_type_id(&self) -> opcua::types::ObjectId {
        opcua::types::ObjectId::DataSetReaderDataType_Encoding_DefaultJson
    }
    fn xml_type_id(&self) -> opcua::types::ObjectId {
        opcua::types::ObjectId::DataSetReaderDataType_Encoding_DefaultXml
    }
}
impl opcua::types::BinaryEncodable for DataSetReaderDataType {
    fn byte_len(&self) -> usize {
        let mut size = 0usize;
        size += self.name.byte_len();
        size += self.enabled.byte_len();
        size += self.publisher_id.byte_len();
        size += self.writer_group_id.byte_len();
        size += self.data_set_writer_id.byte_len();
        size += self.data_set_meta_data.byte_len();
        size += self.data_set_field_content_mask.byte_len();
        size += self.message_receive_timeout.byte_len();
        size += self.key_frame_count.byte_len();
        size += self.header_layout_uri.byte_len();
        size += self.security_mode.byte_len();
        size += self.security_group_id.byte_len();
        size += self.security_key_services.byte_len();
        size += self.data_set_reader_properties.byte_len();
        size += self.transport_settings.byte_len();
        size += self.message_settings.byte_len();
        size += self.subscribed_data_set.byte_len();
        size
    }
    #[allow(unused_variables)]
    fn encode<S: std::io::Write>(
        &self,
        stream: &mut S,
    ) -> opcua::types::EncodingResult<usize> {
        let mut size = 0usize;
        size += self.name.encode(stream)?;
        size += self.enabled.encode(stream)?;
        size += self.publisher_id.encode(stream)?;
        size += self.writer_group_id.encode(stream)?;
        size += self.data_set_writer_id.encode(stream)?;
        size += self.data_set_meta_data.encode(stream)?;
        size += self.data_set_field_content_mask.encode(stream)?;
        size += self.message_receive_timeout.encode(stream)?;
        size += self.key_frame_count.encode(stream)?;
        size += self.header_layout_uri.encode(stream)?;
        size += self.security_mode.encode(stream)?;
        size += self.security_group_id.encode(stream)?;
        size += self.security_key_services.encode(stream)?;
        size += self.data_set_reader_properties.encode(stream)?;
        size += self.transport_settings.encode(stream)?;
        size += self.message_settings.encode(stream)?;
        size += self.subscribed_data_set.encode(stream)?;
        Ok(size)
    }
}
impl opcua::types::BinaryDecodable for DataSetReaderDataType {
    #[allow(unused_variables)]
    fn decode<S: std::io::Read>(
        stream: &mut S,
        decoding_options: &opcua::types::DecodingOptions,
    ) -> opcua::types::EncodingResult<Self> {
        Ok(Self {
            name: opcua::types::BinaryDecodable::decode(stream, decoding_options)?,
            enabled: opcua::types::BinaryDecodable::decode(stream, decoding_options)?,
            publisher_id: opcua::types::BinaryDecodable::decode(
                stream,
                decoding_options,
            )?,
            writer_group_id: opcua::types::BinaryDecodable::decode(
                stream,
                decoding_options,
            )?,
            data_set_writer_id: opcua::types::BinaryDecodable::decode(
                stream,
                decoding_options,
            )?,
            data_set_meta_data: opcua::types::BinaryDecodable::decode(
                stream,
                decoding_options,
            )?,
            data_set_field_content_mask: opcua::types::BinaryDecodable::decode(
                stream,
                decoding_options,
            )?,
            message_receive_timeout: opcua::types::BinaryDecodable::decode(
                stream,
                decoding_options,
            )?,
            key_frame_count: opcua::types::BinaryDecodable::decode(
                stream,
                decoding_options,
            )?,
            header_layout_uri: opcua::types::BinaryDecodable::decode(
                stream,
                decoding_options,
            )?,
            security_mode: opcua::types::BinaryDecodable::decode(
                stream,
                decoding_options,
            )?,
            security_group_id: opcua::types::BinaryDecodable::decode(
                stream,
                decoding_options,
            )?,
            security_key_services: opcua::types::BinaryDecodable::decode(
                stream,
                decoding_options,
            )?,
            data_set_reader_properties: opcua::types::BinaryDecodable::decode(
                stream,
                decoding_options,
            )?,
            transport_settings: opcua::types::BinaryDecodable::decode(
                stream,
                decoding_options,
            )?,
            message_settings: opcua::types::BinaryDecodable::decode(
                stream,
                decoding_options,
            )?,
            subscribed_data_set: opcua::types::BinaryDecodable::decode(
                stream,
                decoding_options,
            )?,
        })
    }
}
