// OPCUA for Rust
// SPDX-License-Identifier: MPL-2.0
// Copyright (C) 2017-2024 Adam Lock, Einar Omang
//
// This file was autogenerated from tools/schema/schemas/1.0.4/Opc.Ua.Types.bsd by opcua-codegen
//
// DO NOT EDIT THIS FILE
#[derive(Debug, Clone, PartialEq)]
#[derive(Default)]
pub struct QueryFirstRequest {
    pub request_header: crate::request_header::RequestHeader,
    pub view: super::view_description::ViewDescription,
    pub node_types: Option<Vec<super::node_type_description::NodeTypeDescription>>,
    pub filter: super::content_filter::ContentFilter,
    pub max_data_sets_to_return: u32,
    pub max_references_to_return: u32,
}
impl crate::MessageInfo for QueryFirstRequest {
    fn object_id(&self) -> crate::ObjectId {
        crate::ObjectId::QueryFirstRequest_Encoding_DefaultBinary
    }
}
impl crate::BinaryEncoder for QueryFirstRequest {
    fn byte_len(&self) -> usize {
        let mut size = 0usize;
        size += self.request_header.byte_len();
        size += self.view.byte_len();
        size += self.node_types.byte_len();
        size += self.filter.byte_len();
        size += self.max_data_sets_to_return.byte_len();
        size += self.max_references_to_return.byte_len();
        size
    }
    #[allow(unused_variables)]
    fn encode<S: std::io::Write>(&self, stream: &mut S) -> crate::EncodingResult<usize> {
        let mut size = 0usize;
        size += self.request_header.encode(stream)?;
        size += self.view.encode(stream)?;
        size += self.node_types.encode(stream)?;
        size += self.filter.encode(stream)?;
        size += self.max_data_sets_to_return.encode(stream)?;
        size += self.max_references_to_return.encode(stream)?;
        Ok(size)
    }
    #[allow(unused_variables)]
    fn decode<S: std::io::Read>(
        stream: &mut S,
        decoding_options: &crate::DecodingOptions,
    ) -> crate::EncodingResult<Self> {
        let request_header = <crate::request_header::RequestHeader as crate::BinaryEncoder>::decode(
            stream,
            decoding_options,
        )?;
        let __request_handle = request_header.request_handle;
        let view = <super::view_description::ViewDescription as crate::BinaryEncoder>::decode(
                stream,
                decoding_options,
            )
            .map_err(|e| e.with_request_handle(__request_handle))?;
        let node_types = <Option<
            Vec<super::node_type_description::NodeTypeDescription>,
        > as crate::BinaryEncoder>::decode(stream, decoding_options)
            .map_err(|e| e.with_request_handle(__request_handle))?;
        let filter = <super::content_filter::ContentFilter as crate::BinaryEncoder>::decode(
                stream,
                decoding_options,
            )
            .map_err(|e| e.with_request_handle(__request_handle))?;
        let max_data_sets_to_return = <u32 as crate::BinaryEncoder>::decode(
                stream,
                decoding_options,
            )
            .map_err(|e| e.with_request_handle(__request_handle))?;
        let max_references_to_return = <u32 as crate::BinaryEncoder>::decode(
                stream,
                decoding_options,
            )
            .map_err(|e| e.with_request_handle(__request_handle))?;
        Ok(Self {
            request_header,
            view,
            node_types,
            filter,
            max_data_sets_to_return,
            max_references_to_return,
        })
    }
}
