// OPCUA for Rust
// SPDX-License-Identifier: MPL-2.0
// Copyright (C) 2017-2024 Adam Lock, Einar Omang
//
// This file was autogenerated from tools/schema/schemas/1.0.4/Opc.Ua.Types.bsd by opcua-codegen
//
// DO NOT EDIT THIS FILE
#[derive(Debug, Clone, PartialEq)]
pub struct IdentityMappingRuleType {
    pub criteria_type: super::enums::IdentityCriteriaType,
    pub criteria: crate::string::UAString,
}
impl crate::MessageInfo for IdentityMappingRuleType {
    fn object_id(&self) -> crate::ObjectId {
        crate::ObjectId::IdentityMappingRuleType_Encoding_DefaultBinary
    }
}
impl crate::BinaryEncoder for IdentityMappingRuleType {
    fn byte_len(&self) -> usize {
        let mut size = 0usize;
        size += self.criteria_type.byte_len();
        size += self.criteria.byte_len();
        size
    }
    #[allow(unused_variables)]
    fn encode<S: std::io::Write>(&self, stream: &mut S) -> crate::EncodingResult<usize> {
        let mut size = 0usize;
        size += self.criteria_type.encode(stream)?;
        size += self.criteria.encode(stream)?;
        Ok(size)
    }
    #[allow(unused_variables)]
    fn decode<S: std::io::Read>(
        stream: &mut S,
        decoding_options: &crate::DecodingOptions,
    ) -> crate::EncodingResult<Self> {
        let criteria_type = <super::enums::IdentityCriteriaType as crate::BinaryEncoder>::decode(
            stream,
            decoding_options,
        )?;
        let criteria = <crate::string::UAString as crate::BinaryEncoder>::decode(
            stream,
            decoding_options,
        )?;
        Ok(Self { criteria_type, criteria })
    }
}
