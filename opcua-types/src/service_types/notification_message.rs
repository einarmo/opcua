// OPCUA for Rust
// SPDX-License-Identifier: MPL-2.0
// Copyright (C) 2017-2024 Adam Lock, Einar Omang
//
// This file was autogenerated from tools/schema/schemas/1.0.4/Opc.Ua.Types.bsd by opcua-codegen
//
// DO NOT EDIT THIS FILE
#[derive(Debug, Clone, PartialEq)]
#[derive(Default)]
pub struct NotificationMessage {
    pub sequence_number: u32,
    pub publish_time: crate::date_time::DateTime,
    pub notification_data: Option<Vec<crate::extension_object::ExtensionObject>>,
}
impl crate::MessageInfo for NotificationMessage {
    fn object_id(&self) -> crate::ObjectId {
        crate::ObjectId::NotificationMessage_Encoding_DefaultBinary
    }
}
impl crate::BinaryEncoder for NotificationMessage {
    fn byte_len(&self) -> usize {
        let mut size = 0usize;
        size += self.sequence_number.byte_len();
        size += self.publish_time.byte_len();
        size += self.notification_data.byte_len();
        size
    }
    #[allow(unused_variables)]
    fn encode<S: std::io::Write>(&self, stream: &mut S) -> crate::EncodingResult<usize> {
        let mut size = 0usize;
        size += self.sequence_number.encode(stream)?;
        size += self.publish_time.encode(stream)?;
        size += self.notification_data.encode(stream)?;
        Ok(size)
    }
    #[allow(unused_variables)]
    fn decode<S: std::io::Read>(
        stream: &mut S,
        decoding_options: &crate::DecodingOptions,
    ) -> crate::EncodingResult<Self> {
        let sequence_number = <u32 as crate::BinaryEncoder>::decode(
            stream,
            decoding_options,
        )?;
        let publish_time = <crate::date_time::DateTime as crate::BinaryEncoder>::decode(
            stream,
            decoding_options,
        )?;
        let notification_data = <Option<
            Vec<crate::extension_object::ExtensionObject>,
        > as crate::BinaryEncoder>::decode(stream, decoding_options)?;
        Ok(Self {
            sequence_number,
            publish_time,
            notification_data,
        })
    }
}
