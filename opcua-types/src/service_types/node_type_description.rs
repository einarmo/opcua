// This file was autogenerated from tools/schema/schemas/1.0.4/Opc.Ua.Types.bsd by opcua-codegen
//
// DO NOT EDIT THIS FILE

// OPCUA for Rust
// SPDX-License-Identifier: MPL-2.0
// Copyright (C) 2017-2024 Adam Lock, Einar Omang
#[allow(unused)]
mod opcua { pub use crate as types; }#[derive(Debug, Clone, PartialEq)]
#[cfg_attr(feature = "json", serde_with::skip_serializing_none)]
#[cfg_attr(feature = "json", derive(serde::Serialize, serde::Deserialize))]
#[cfg_attr(feature = "json", serde(rename_all = "PascalCase"))]
#[derive(Default)]
pub struct NodeTypeDescription {
    pub type_definition_node: opcua::types::expanded_node_id::ExpandedNodeId,
    pub include_sub_types: bool,
    pub data_to_return: Option<Vec<super::query_data_description::QueryDataDescription>>,
}
impl opcua::types::MessageInfo for NodeTypeDescription {
    fn object_id(&self) -> opcua::types::ObjectId {
        opcua::types::ObjectId::NodeTypeDescription_Encoding_DefaultBinary
    }
}
impl opcua::types::BinaryEncoder for NodeTypeDescription {
    fn byte_len(&self) -> usize {
        let mut size = 0usize;
        size += self.type_definition_node.byte_len();
        size += self.include_sub_types.byte_len();
        size += self.data_to_return.byte_len();
        size
    }
    #[allow(unused_variables)]
    fn encode<S: std::io::Write>(
        &self,
        stream: &mut S,
    ) -> opcua::types::EncodingResult<usize> {
        let mut size = 0usize;
        size += self.type_definition_node.encode(stream)?;
        size += self.include_sub_types.encode(stream)?;
        size += self.data_to_return.encode(stream)?;
        Ok(size)
    }
    #[allow(unused_variables)]
    fn decode<S: std::io::Read>(
        stream: &mut S,
        decoding_options: &opcua::types::DecodingOptions,
    ) -> opcua::types::EncodingResult<Self> {
        let type_definition_node = <opcua::types::expanded_node_id::ExpandedNodeId as opcua::types::BinaryEncoder>::decode(
            stream,
            decoding_options,
        )?;
        let include_sub_types = <bool as opcua::types::BinaryEncoder>::decode(
            stream,
            decoding_options,
        )?;
        let data_to_return = <Option<
            Vec<super::query_data_description::QueryDataDescription>,
        > as opcua::types::BinaryEncoder>::decode(stream, decoding_options)?;
        Ok(Self {
            type_definition_node,
            include_sub_types,
            data_to_return,
        })
    }
}
