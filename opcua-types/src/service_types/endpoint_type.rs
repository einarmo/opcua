// OPCUA for Rust
// SPDX-License-Identifier: MPL-2.0
// Copyright (C) 2017-2024 Adam Lock, Einar Omang
//
// This file was autogenerated from tools/schema/schemas/1.0.4/Opc.Ua.Types.bsd by opcua-codegen
//
// DO NOT EDIT THIS FILE
#[derive(Debug, Clone, PartialEq)]
pub struct EndpointType {
    pub endpoint_url: crate::string::UAString,
    pub security_mode: super::enums::MessageSecurityMode,
    pub security_policy_uri: crate::string::UAString,
    pub transport_profile_uri: crate::string::UAString,
}
impl crate::MessageInfo for EndpointType {
    fn object_id(&self) -> crate::ObjectId {
        crate::ObjectId::EndpointType_Encoding_DefaultBinary
    }
}
impl crate::BinaryEncoder for EndpointType {
    fn byte_len(&self) -> usize {
        let mut size = 0usize;
        size += self.endpoint_url.byte_len();
        size += self.security_mode.byte_len();
        size += self.security_policy_uri.byte_len();
        size += self.transport_profile_uri.byte_len();
        size
    }
    #[allow(unused_variables)]
    fn encode<S: std::io::Write>(&self, stream: &mut S) -> crate::EncodingResult<usize> {
        let mut size = 0usize;
        size += self.endpoint_url.encode(stream)?;
        size += self.security_mode.encode(stream)?;
        size += self.security_policy_uri.encode(stream)?;
        size += self.transport_profile_uri.encode(stream)?;
        Ok(size)
    }
    #[allow(unused_variables)]
    fn decode<S: std::io::Read>(
        stream: &mut S,
        decoding_options: &crate::DecodingOptions,
    ) -> crate::EncodingResult<Self> {
        let endpoint_url = <crate::string::UAString as crate::BinaryEncoder>::decode(
            stream,
            decoding_options,
        )?;
        let security_mode = <super::enums::MessageSecurityMode as crate::BinaryEncoder>::decode(
            stream,
            decoding_options,
        )?;
        let security_policy_uri = <crate::string::UAString as crate::BinaryEncoder>::decode(
            stream,
            decoding_options,
        )?;
        let transport_profile_uri = <crate::string::UAString as crate::BinaryEncoder>::decode(
            stream,
            decoding_options,
        )?;
        Ok(Self {
            endpoint_url,
            security_mode,
            security_policy_uri,
            transport_profile_uri,
        })
    }
}
