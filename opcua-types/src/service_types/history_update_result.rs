// OPCUA for Rust
// SPDX-License-Identifier: MPL-2.0
// Copyright (C) 2017-2024 Adam Lock, Einar Omang
//
// This file was autogenerated from tools/schema/schemas/1.0.4/Opc.Ua.Types.bsd by opcua-codegen
//
// DO NOT EDIT THIS FILE
#[derive(Debug, Clone, PartialEq)]
#[derive(Default)]
pub struct HistoryUpdateResult {
    pub status_code: crate::status_code::StatusCode,
    pub operation_results: Option<Vec<crate::status_code::StatusCode>>,
    pub diagnostic_infos: Option<Vec<crate::diagnostic_info::DiagnosticInfo>>,
}
impl crate::MessageInfo for HistoryUpdateResult {
    fn object_id(&self) -> crate::ObjectId {
        crate::ObjectId::HistoryUpdateResult_Encoding_DefaultBinary
    }
}
impl crate::BinaryEncoder for HistoryUpdateResult {
    fn byte_len(&self) -> usize {
        let mut size = 0usize;
        size += self.status_code.byte_len();
        size += self.operation_results.byte_len();
        size += self.diagnostic_infos.byte_len();
        size
    }
    #[allow(unused_variables)]
    fn encode<S: std::io::Write>(&self, stream: &mut S) -> crate::EncodingResult<usize> {
        let mut size = 0usize;
        size += self.status_code.encode(stream)?;
        size += self.operation_results.encode(stream)?;
        size += self.diagnostic_infos.encode(stream)?;
        Ok(size)
    }
    #[allow(unused_variables)]
    fn decode<S: std::io::Read>(
        stream: &mut S,
        decoding_options: &crate::DecodingOptions,
    ) -> crate::EncodingResult<Self> {
        let status_code = <crate::status_code::StatusCode as crate::BinaryEncoder>::decode(
            stream,
            decoding_options,
        )?;
        let operation_results = <Option<
            Vec<crate::status_code::StatusCode>,
        > as crate::BinaryEncoder>::decode(stream, decoding_options)?;
        let diagnostic_infos = <Option<
            Vec<crate::diagnostic_info::DiagnosticInfo>,
        > as crate::BinaryEncoder>::decode(stream, decoding_options)?;
        Ok(Self {
            status_code,
            operation_results,
            diagnostic_infos,
        })
    }
}
