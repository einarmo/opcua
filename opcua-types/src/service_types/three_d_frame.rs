// This file was autogenerated from tools/schema/schemas/1.0.4/Opc.Ua.Types.bsd by opcua-codegen
//
// DO NOT EDIT THIS FILE

// OPCUA for Rust
// SPDX-License-Identifier: MPL-2.0
// Copyright (C) 2017-2024 Adam Lock, Einar Omang
#[allow(unused)]
mod opcua { pub use crate as types; }#[derive(Debug, Clone, PartialEq)]
#[derive(Default)]
pub struct ThreeDFrame {
    pub cartesian_coordinates: super::three_d_cartesian_coordinates::ThreeDCartesianCoordinates,
    pub orientation: super::three_d_orientation::ThreeDOrientation,
}
impl opcua::types::BinaryEncoder for ThreeDFrame {
    fn byte_len(&self) -> usize {
        let mut size = 0usize;
        size += self.cartesian_coordinates.byte_len();
        size += self.orientation.byte_len();
        size
    }
    #[allow(unused_variables)]
    fn encode<S: std::io::Write>(
        &self,
        stream: &mut S,
    ) -> opcua::types::EncodingResult<usize> {
        let mut size = 0usize;
        size += self.cartesian_coordinates.encode(stream)?;
        size += self.orientation.encode(stream)?;
        Ok(size)
    }
    #[allow(unused_variables)]
    fn decode<S: std::io::Read>(
        stream: &mut S,
        decoding_options: &opcua::types::DecodingOptions,
    ) -> opcua::types::EncodingResult<Self> {
        let cartesian_coordinates = <super::three_d_cartesian_coordinates::ThreeDCartesianCoordinates as opcua::types::BinaryEncoder>::decode(
            stream,
            decoding_options,
        )?;
        let orientation = <super::three_d_orientation::ThreeDOrientation as opcua::types::BinaryEncoder>::decode(
            stream,
            decoding_options,
        )?;
        Ok(Self {
            cartesian_coordinates,
            orientation,
        })
    }
}
