// OPCUA for Rust
// SPDX-License-Identifier: MPL-2.0
// Copyright (C) 2017-2024 Adam Lock, Einar Omang
//
// This file was autogenerated from tools/schema/schemas/1.0.4/Opc.Ua.Types.bsd by opcua-codegen
//
// DO NOT EDIT THIS FILE
#[derive(Debug, Clone, PartialEq)]
#[derive(Default)]
pub struct PublishedDataSetDataType {
    pub name: crate::string::UAString,
    pub data_set_folder: Option<Vec<crate::string::UAString>>,
    pub data_set_meta_data: super::data_set_meta_data_type::DataSetMetaDataType,
    pub extension_fields: Option<Vec<super::key_value_pair::KeyValuePair>>,
    pub data_set_source: crate::extension_object::ExtensionObject,
}
impl crate::MessageInfo for PublishedDataSetDataType {
    fn object_id(&self) -> crate::ObjectId {
        crate::ObjectId::PublishedDataSetDataType_Encoding_DefaultBinary
    }
}
impl crate::BinaryEncoder for PublishedDataSetDataType {
    fn byte_len(&self) -> usize {
        let mut size = 0usize;
        size += self.name.byte_len();
        size += self.data_set_folder.byte_len();
        size += self.data_set_meta_data.byte_len();
        size += self.extension_fields.byte_len();
        size += self.data_set_source.byte_len();
        size
    }
    #[allow(unused_variables)]
    fn encode<S: std::io::Write>(&self, stream: &mut S) -> crate::EncodingResult<usize> {
        let mut size = 0usize;
        size += self.name.encode(stream)?;
        size += self.data_set_folder.encode(stream)?;
        size += self.data_set_meta_data.encode(stream)?;
        size += self.extension_fields.encode(stream)?;
        size += self.data_set_source.encode(stream)?;
        Ok(size)
    }
    #[allow(unused_variables)]
    fn decode<S: std::io::Read>(
        stream: &mut S,
        decoding_options: &crate::DecodingOptions,
    ) -> crate::EncodingResult<Self> {
        let name = <crate::string::UAString as crate::BinaryEncoder>::decode(
            stream,
            decoding_options,
        )?;
        let data_set_folder = <Option<
            Vec<crate::string::UAString>,
        > as crate::BinaryEncoder>::decode(stream, decoding_options)?;
        let data_set_meta_data = <super::data_set_meta_data_type::DataSetMetaDataType as crate::BinaryEncoder>::decode(
            stream,
            decoding_options,
        )?;
        let extension_fields = <Option<
            Vec<super::key_value_pair::KeyValuePair>,
        > as crate::BinaryEncoder>::decode(stream, decoding_options)?;
        let data_set_source = <crate::extension_object::ExtensionObject as crate::BinaryEncoder>::decode(
            stream,
            decoding_options,
        )?;
        Ok(Self {
            name,
            data_set_folder,
            data_set_meta_data,
            extension_fields,
            data_set_source,
        })
    }
}
