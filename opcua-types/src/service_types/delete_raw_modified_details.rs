// OPCUA for Rust
// SPDX-License-Identifier: MPL-2.0
// Copyright (C) 2017-2024 Adam Lock, Einar Omang
//
// This file was autogenerated from tools/schema/schemas/1.0.4/Opc.Ua.Types.bsd by opcua-codegen
//
// DO NOT EDIT THIS FILE
#[derive(Debug, Clone, PartialEq)]
#[derive(Default)]
pub struct DeleteRawModifiedDetails {
    pub node_id: crate::node_id::NodeId,
    pub is_delete_modified: bool,
    pub start_time: crate::date_time::DateTime,
    pub end_time: crate::date_time::DateTime,
}
impl crate::BinaryEncoder for DeleteRawModifiedDetails {
    fn byte_len(&self) -> usize {
        let mut size = 0usize;
        size += self.node_id.byte_len();
        size += self.is_delete_modified.byte_len();
        size += self.start_time.byte_len();
        size += self.end_time.byte_len();
        size
    }
    #[allow(unused_variables)]
    fn encode<S: std::io::Write>(&self, stream: &mut S) -> crate::EncodingResult<usize> {
        let mut size = 0usize;
        size += self.node_id.encode(stream)?;
        size += self.is_delete_modified.encode(stream)?;
        size += self.start_time.encode(stream)?;
        size += self.end_time.encode(stream)?;
        Ok(size)
    }
    #[allow(unused_variables)]
    fn decode<S: std::io::Read>(
        stream: &mut S,
        decoding_options: &crate::DecodingOptions,
    ) -> crate::EncodingResult<Self> {
        let node_id = <crate::node_id::NodeId as crate::BinaryEncoder>::decode(
            stream,
            decoding_options,
        )?;
        let is_delete_modified = <bool as crate::BinaryEncoder>::decode(
            stream,
            decoding_options,
        )?;
        let start_time = <crate::date_time::DateTime as crate::BinaryEncoder>::decode(
            stream,
            decoding_options,
        )?;
        let end_time = <crate::date_time::DateTime as crate::BinaryEncoder>::decode(
            stream,
            decoding_options,
        )?;
        Ok(Self {
            node_id,
            is_delete_modified,
            start_time,
            end_time,
        })
    }
}
