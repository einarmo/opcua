// OPCUA for Rust
// SPDX-License-Identifier: MPL-2.0
// Copyright (C) 2017-2024 Adam Lock, Einar Omang
//
// This file was autogenerated from tools/schema/schemas/1.0.4/Opc.Ua.Types.bsd by opcua-codegen
//
// DO NOT EDIT THIS FILE
#[derive(Debug, Clone, PartialEq)]
pub struct ServerStatusDataType {
    pub start_time: crate::date_time::DateTime,
    pub current_time: crate::date_time::DateTime,
    pub state: super::enums::ServerState,
    pub build_info: super::build_info::BuildInfo,
    pub seconds_till_shutdown: u32,
    pub shutdown_reason: crate::localized_text::LocalizedText,
}
impl crate::MessageInfo for ServerStatusDataType {
    fn object_id(&self) -> crate::ObjectId {
        crate::ObjectId::ServerStatusDataType_Encoding_DefaultBinary
    }
}
impl crate::BinaryEncoder for ServerStatusDataType {
    fn byte_len(&self) -> usize {
        let mut size = 0usize;
        size += self.start_time.byte_len();
        size += self.current_time.byte_len();
        size += self.state.byte_len();
        size += self.build_info.byte_len();
        size += self.seconds_till_shutdown.byte_len();
        size += self.shutdown_reason.byte_len();
        size
    }
    #[allow(unused_variables)]
    fn encode<S: std::io::Write>(&self, stream: &mut S) -> crate::EncodingResult<usize> {
        let mut size = 0usize;
        size += self.start_time.encode(stream)?;
        size += self.current_time.encode(stream)?;
        size += self.state.encode(stream)?;
        size += self.build_info.encode(stream)?;
        size += self.seconds_till_shutdown.encode(stream)?;
        size += self.shutdown_reason.encode(stream)?;
        Ok(size)
    }
    #[allow(unused_variables)]
    fn decode<S: std::io::Read>(
        stream: &mut S,
        decoding_options: &crate::DecodingOptions,
    ) -> crate::EncodingResult<Self> {
        let start_time = <crate::date_time::DateTime as crate::BinaryEncoder>::decode(
            stream,
            decoding_options,
        )?;
        let current_time = <crate::date_time::DateTime as crate::BinaryEncoder>::decode(
            stream,
            decoding_options,
        )?;
        let state = <super::enums::ServerState as crate::BinaryEncoder>::decode(
            stream,
            decoding_options,
        )?;
        let build_info = <super::build_info::BuildInfo as crate::BinaryEncoder>::decode(
            stream,
            decoding_options,
        )?;
        let seconds_till_shutdown = <u32 as crate::BinaryEncoder>::decode(
            stream,
            decoding_options,
        )?;
        let shutdown_reason = <crate::localized_text::LocalizedText as crate::BinaryEncoder>::decode(
            stream,
            decoding_options,
        )?;
        Ok(Self {
            start_time,
            current_time,
            state,
            build_info,
            seconds_till_shutdown,
            shutdown_reason,
        })
    }
}
