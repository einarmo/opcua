// OPCUA for Rust
// SPDX-License-Identifier: MPL-2.0
// Copyright (C) 2017-2024 Adam Lock, Einar Omang
//
// This file was autogenerated from tools/schema/schemas/1.0.4/Opc.Ua.Types.bsd by opcua-codegen
//
// DO NOT EDIT THIS FILE
#[derive(Debug, Clone, PartialEq)]
#[derive(Default)]
pub struct ActivateSessionResponse {
    pub response_header: crate::response_header::ResponseHeader,
    pub server_nonce: crate::byte_string::ByteString,
    pub results: Option<Vec<crate::status_code::StatusCode>>,
    pub diagnostic_infos: Option<Vec<crate::diagnostic_info::DiagnosticInfo>>,
}
impl crate::MessageInfo for ActivateSessionResponse {
    fn object_id(&self) -> crate::ObjectId {
        crate::ObjectId::ActivateSessionResponse_Encoding_DefaultBinary
    }
}
impl crate::BinaryEncoder for ActivateSessionResponse {
    fn byte_len(&self) -> usize {
        let mut size = 0usize;
        size += self.response_header.byte_len();
        size += self.server_nonce.byte_len();
        size += self.results.byte_len();
        size += self.diagnostic_infos.byte_len();
        size
    }
    #[allow(unused_variables)]
    fn encode<S: std::io::Write>(&self, stream: &mut S) -> crate::EncodingResult<usize> {
        let mut size = 0usize;
        size += self.response_header.encode(stream)?;
        size += self.server_nonce.encode(stream)?;
        size += self.results.encode(stream)?;
        size += self.diagnostic_infos.encode(stream)?;
        Ok(size)
    }
    #[allow(unused_variables)]
    fn decode<S: std::io::Read>(
        stream: &mut S,
        decoding_options: &crate::DecodingOptions,
    ) -> crate::EncodingResult<Self> {
        let response_header = <crate::response_header::ResponseHeader as crate::BinaryEncoder>::decode(
            stream,
            decoding_options,
        )?;
        let __request_handle = response_header.request_handle;
        let server_nonce = <crate::byte_string::ByteString as crate::BinaryEncoder>::decode(
                stream,
                decoding_options,
            )
            .map_err(|e| e.with_request_handle(__request_handle))?;
        let results = <Option<
            Vec<crate::status_code::StatusCode>,
        > as crate::BinaryEncoder>::decode(stream, decoding_options)
            .map_err(|e| e.with_request_handle(__request_handle))?;
        let diagnostic_infos = <Option<
            Vec<crate::diagnostic_info::DiagnosticInfo>,
        > as crate::BinaryEncoder>::decode(stream, decoding_options)
            .map_err(|e| e.with_request_handle(__request_handle))?;
        Ok(Self {
            response_header,
            server_nonce,
            results,
            diagnostic_infos,
        })
    }
}
