// OPCUA for Rust
// SPDX-License-Identifier: MPL-2.0
// Copyright (C) 2017-2024 Adam Lock, Einar Omang
//
// This file was autogenerated from tools/schema/schemas/1.0.4/Opc.Ua.Types.bsd by opcua-codegen
//
// DO NOT EDIT THIS FILE
#[derive(Debug, Clone, PartialEq)]
#[derive(Default)]
pub struct ReadAtTimeDetails {
    pub req_times: Option<Vec<crate::date_time::DateTime>>,
    pub use_simple_bounds: bool,
}
impl crate::BinaryEncoder for ReadAtTimeDetails {
    fn byte_len(&self) -> usize {
        let mut size = 0usize;
        size += self.req_times.byte_len();
        size += self.use_simple_bounds.byte_len();
        size
    }
    #[allow(unused_variables)]
    fn encode<S: std::io::Write>(&self, stream: &mut S) -> crate::EncodingResult<usize> {
        let mut size = 0usize;
        size += self.req_times.encode(stream)?;
        size += self.use_simple_bounds.encode(stream)?;
        Ok(size)
    }
    #[allow(unused_variables)]
    fn decode<S: std::io::Read>(
        stream: &mut S,
        decoding_options: &crate::DecodingOptions,
    ) -> crate::EncodingResult<Self> {
        let req_times = <Option<
            Vec<crate::date_time::DateTime>,
        > as crate::BinaryEncoder>::decode(stream, decoding_options)?;
        let use_simple_bounds = <bool as crate::BinaryEncoder>::decode(
            stream,
            decoding_options,
        )?;
        Ok(Self {
            req_times,
            use_simple_bounds,
        })
    }
}
