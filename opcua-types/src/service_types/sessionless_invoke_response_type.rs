// This file was autogenerated from tools/schema/schemas/1.0.4/Opc.Ua.Types.bsd by opcua-codegen
//
// DO NOT EDIT THIS FILE

// OPCUA for Rust
// SPDX-License-Identifier: MPL-2.0
// Copyright (C) 2017-2024 Adam Lock, Einar Omang
#[allow(unused)]
mod opcua { pub use crate as types; }#[derive(Debug, Clone, PartialEq)]
#[derive(Default)]
pub struct SessionlessInvokeResponseType {
    pub namespace_uris: Option<Vec<opcua::types::string::UAString>>,
    pub server_uris: Option<Vec<opcua::types::string::UAString>>,
    pub service_id: u32,
}
impl opcua::types::MessageInfo for SessionlessInvokeResponseType {
    fn object_id(&self) -> opcua::types::ObjectId {
        opcua::types::ObjectId::SessionlessInvokeResponseType_Encoding_DefaultBinary
    }
}
impl opcua::types::BinaryEncoder for SessionlessInvokeResponseType {
    fn byte_len(&self) -> usize {
        let mut size = 0usize;
        size += self.namespace_uris.byte_len();
        size += self.server_uris.byte_len();
        size += self.service_id.byte_len();
        size
    }
    #[allow(unused_variables)]
    fn encode<S: std::io::Write>(
        &self,
        stream: &mut S,
    ) -> opcua::types::EncodingResult<usize> {
        let mut size = 0usize;
        size += self.namespace_uris.encode(stream)?;
        size += self.server_uris.encode(stream)?;
        size += self.service_id.encode(stream)?;
        Ok(size)
    }
    #[allow(unused_variables)]
    fn decode<S: std::io::Read>(
        stream: &mut S,
        decoding_options: &opcua::types::DecodingOptions,
    ) -> opcua::types::EncodingResult<Self> {
        let namespace_uris = <Option<
            Vec<opcua::types::string::UAString>,
        > as opcua::types::BinaryEncoder>::decode(stream, decoding_options)?;
        let server_uris = <Option<
            Vec<opcua::types::string::UAString>,
        > as opcua::types::BinaryEncoder>::decode(stream, decoding_options)?;
        let service_id = <u32 as opcua::types::BinaryEncoder>::decode(
            stream,
            decoding_options,
        )?;
        Ok(Self {
            namespace_uris,
            server_uris,
            service_id,
        })
    }
}
