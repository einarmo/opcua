// OPCUA for Rust
// SPDX-License-Identifier: MPL-2.0
// Copyright (C) 2017-2024 Adam Lock, Einar Omang
//
// This file was autogenerated from tools/schema/schemas/1.0.4/Opc.Ua.Types.bsd by opcua-codegen
//
// DO NOT EDIT THIS FILE
#[derive(Debug, Clone, PartialEq)]
#[derive(Default)]
pub struct ServiceCounterDataType {
    pub total_count: u32,
    pub error_count: u32,
}
impl crate::MessageInfo for ServiceCounterDataType {
    fn object_id(&self) -> crate::ObjectId {
        crate::ObjectId::ServiceCounterDataType_Encoding_DefaultBinary
    }
}
impl crate::BinaryEncoder for ServiceCounterDataType {
    fn byte_len(&self) -> usize {
        let mut size = 0usize;
        size += self.total_count.byte_len();
        size += self.error_count.byte_len();
        size
    }
    #[allow(unused_variables)]
    fn encode<S: std::io::Write>(&self, stream: &mut S) -> crate::EncodingResult<usize> {
        let mut size = 0usize;
        size += self.total_count.encode(stream)?;
        size += self.error_count.encode(stream)?;
        Ok(size)
    }
    #[allow(unused_variables)]
    fn decode<S: std::io::Read>(
        stream: &mut S,
        decoding_options: &crate::DecodingOptions,
    ) -> crate::EncodingResult<Self> {
        let total_count = <u32 as crate::BinaryEncoder>::decode(
            stream,
            decoding_options,
        )?;
        let error_count = <u32 as crate::BinaryEncoder>::decode(
            stream,
            decoding_options,
        )?;
        Ok(Self { total_count, error_count })
    }
}
