// This file was autogenerated from schemas/1.0.4/Opc.Ua.Types.bsd by opcua-codegen
//
// DO NOT EDIT THIS FILE

// OPCUA for Rust
// SPDX-License-Identifier: MPL-2.0
// Copyright (C) 2017-2024 Adam Lock, Einar Omang
#[allow(unused)]
mod opcua { pub use crate as types; }#[derive(Debug, Clone, PartialEq)]
#[cfg_attr(feature = "json", serde_with::skip_serializing_none)]
#[cfg_attr(feature = "json", derive(serde::Serialize, serde::Deserialize))]
#[cfg_attr(feature = "json", serde(rename_all = "PascalCase"))]
#[cfg_attr(feature = "xml", derive(opcua::types::FromXml))]
#[derive(Default)]
pub struct UadpDataSetReaderMessageDataType {
    pub group_version: u32,
    pub network_message_number: u16,
    pub data_set_offset: u16,
    pub data_set_class_id: opcua::types::guid::Guid,
    pub network_message_content_mask: super::enums::UadpNetworkMessageContentMask,
    pub data_set_message_content_mask: super::enums::UadpDataSetMessageContentMask,
    pub publishing_interval: f64,
    pub receive_offset: f64,
    pub processing_offset: f64,
}
impl opcua::types::MessageInfo for UadpDataSetReaderMessageDataType {
    fn type_id(&self) -> opcua::types::ObjectId {
        opcua::types::ObjectId::UadpDataSetReaderMessageDataType_Encoding_DefaultBinary
    }
    fn json_type_id(&self) -> opcua::types::ObjectId {
        opcua::types::ObjectId::UadpDataSetReaderMessageDataType_Encoding_DefaultJson
    }
    fn xml_type_id(&self) -> opcua::types::ObjectId {
        opcua::types::ObjectId::UadpDataSetReaderMessageDataType_Encoding_DefaultXml
    }
}
impl opcua::types::BinaryEncodable for UadpDataSetReaderMessageDataType {
    fn byte_len(&self) -> usize {
        let mut size = 0usize;
        size += self.group_version.byte_len();
        size += self.network_message_number.byte_len();
        size += self.data_set_offset.byte_len();
        size += self.data_set_class_id.byte_len();
        size += self.network_message_content_mask.byte_len();
        size += self.data_set_message_content_mask.byte_len();
        size += self.publishing_interval.byte_len();
        size += self.receive_offset.byte_len();
        size += self.processing_offset.byte_len();
        size
    }
    #[allow(unused_variables)]
    fn encode<S: std::io::Write>(
        &self,
        stream: &mut S,
    ) -> opcua::types::EncodingResult<usize> {
        let mut size = 0usize;
        size += self.group_version.encode(stream)?;
        size += self.network_message_number.encode(stream)?;
        size += self.data_set_offset.encode(stream)?;
        size += self.data_set_class_id.encode(stream)?;
        size += self.network_message_content_mask.encode(stream)?;
        size += self.data_set_message_content_mask.encode(stream)?;
        size += self.publishing_interval.encode(stream)?;
        size += self.receive_offset.encode(stream)?;
        size += self.processing_offset.encode(stream)?;
        Ok(size)
    }
    #[allow(unused_variables)]
    fn decode<S: std::io::Read>(
        stream: &mut S,
        decoding_options: &opcua::types::DecodingOptions,
    ) -> opcua::types::EncodingResult<Self> {
        let group_version = <u32 as opcua::types::BinaryEncodable>::decode(
            stream,
            decoding_options,
        )?;
        let network_message_number = <u16 as opcua::types::BinaryEncodable>::decode(
            stream,
            decoding_options,
        )?;
        let data_set_offset = <u16 as opcua::types::BinaryEncodable>::decode(
            stream,
            decoding_options,
        )?;
        let data_set_class_id = <opcua::types::guid::Guid as opcua::types::BinaryEncodable>::decode(
            stream,
            decoding_options,
        )?;
        let network_message_content_mask = <super::enums::UadpNetworkMessageContentMask as opcua::types::BinaryEncodable>::decode(
            stream,
            decoding_options,
        )?;
        let data_set_message_content_mask = <super::enums::UadpDataSetMessageContentMask as opcua::types::BinaryEncodable>::decode(
            stream,
            decoding_options,
        )?;
        let publishing_interval = <f64 as opcua::types::BinaryEncodable>::decode(
            stream,
            decoding_options,
        )?;
        let receive_offset = <f64 as opcua::types::BinaryEncodable>::decode(
            stream,
            decoding_options,
        )?;
        let processing_offset = <f64 as opcua::types::BinaryEncodable>::decode(
            stream,
            decoding_options,
        )?;
        Ok(Self {
            group_version,
            network_message_number,
            data_set_offset,
            data_set_class_id,
            network_message_content_mask,
            data_set_message_content_mask,
            publishing_interval,
            receive_offset,
            processing_offset,
        })
    }
}
