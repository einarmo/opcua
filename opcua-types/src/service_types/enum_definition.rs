// OPCUA for Rust
// SPDX-License-Identifier: MPL-2.0
// Copyright (C) 2017-2024 Adam Lock, Einar Omang
//
// This file was autogenerated from tools/schema/schemas/1.0.4/Opc.Ua.Types.bsd by opcua-codegen
//
// DO NOT EDIT THIS FILE
#[derive(Debug, Clone, PartialEq)]
#[derive(serde::Serialize, serde::Deserialize)]
#[serde(rename_all = "PascalCase")]
#[derive(Default)]
pub struct EnumDefinition {
    pub fields: Option<Vec<super::enum_field::EnumField>>,
}
impl crate::BinaryEncoder for EnumDefinition {
    fn byte_len(&self) -> usize {
        let mut size = 0usize;
        size += self.fields.byte_len();
        size
    }
    #[allow(unused_variables)]
    fn encode<S: std::io::Write>(&self, stream: &mut S) -> crate::EncodingResult<usize> {
        let mut size = 0usize;
        size += self.fields.encode(stream)?;
        Ok(size)
    }
    #[allow(unused_variables)]
    fn decode<S: std::io::Read>(
        stream: &mut S,
        decoding_options: &crate::DecodingOptions,
    ) -> crate::EncodingResult<Self> {
        let fields = <Option<
            Vec<super::enum_field::EnumField>,
        > as crate::BinaryEncoder>::decode(stream, decoding_options)?;
        Ok(Self { fields })
    }
}
