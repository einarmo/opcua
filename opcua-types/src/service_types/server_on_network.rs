// This file was autogenerated from schemas/1.0.4/Opc.Ua.Types.bsd by opcua-codegen
//
// DO NOT EDIT THIS FILE

// OPCUA for Rust
// SPDX-License-Identifier: MPL-2.0
// Copyright (C) 2017-2024 Adam Lock, Einar Omang
#[allow(unused)]
mod opcua { pub use crate as types; }#[derive(Debug, Clone, PartialEq)]
#[cfg_attr(feature = "json", serde_with::skip_serializing_none)]
#[cfg_attr(feature = "json", derive(serde::Serialize, serde::Deserialize))]
#[cfg_attr(feature = "json", serde(rename_all = "PascalCase"))]
#[cfg_attr(feature = "xml", derive(opcua::types::FromXml))]
#[derive(Default)]
pub struct ServerOnNetwork {
    pub record_id: u32,
    pub server_name: opcua::types::string::UAString,
    pub discovery_url: opcua::types::string::UAString,
    pub server_capabilities: Option<Vec<opcua::types::string::UAString>>,
}
impl opcua::types::MessageInfo for ServerOnNetwork {
    fn object_id(&self) -> opcua::types::ObjectId {
        opcua::types::ObjectId::ServerOnNetwork_Encoding_DefaultBinary
    }
}
impl opcua::types::BinaryEncoder for ServerOnNetwork {
    fn byte_len(&self) -> usize {
        let mut size = 0usize;
        size += self.record_id.byte_len();
        size += self.server_name.byte_len();
        size += self.discovery_url.byte_len();
        size += self.server_capabilities.byte_len();
        size
    }
    #[allow(unused_variables)]
    fn encode<S: std::io::Write>(
        &self,
        stream: &mut S,
    ) -> opcua::types::EncodingResult<usize> {
        let mut size = 0usize;
        size += self.record_id.encode(stream)?;
        size += self.server_name.encode(stream)?;
        size += self.discovery_url.encode(stream)?;
        size += self.server_capabilities.encode(stream)?;
        Ok(size)
    }
    #[allow(unused_variables)]
    fn decode<S: std::io::Read>(
        stream: &mut S,
        decoding_options: &opcua::types::DecodingOptions,
    ) -> opcua::types::EncodingResult<Self> {
        let record_id = <u32 as opcua::types::BinaryEncoder>::decode(
            stream,
            decoding_options,
        )?;
        let server_name = <opcua::types::string::UAString as opcua::types::BinaryEncoder>::decode(
            stream,
            decoding_options,
        )?;
        let discovery_url = <opcua::types::string::UAString as opcua::types::BinaryEncoder>::decode(
            stream,
            decoding_options,
        )?;
        let server_capabilities = <Option<
            Vec<opcua::types::string::UAString>,
        > as opcua::types::BinaryEncoder>::decode(stream, decoding_options)?;
        Ok(Self {
            record_id,
            server_name,
            discovery_url,
            server_capabilities,
        })
    }
}
