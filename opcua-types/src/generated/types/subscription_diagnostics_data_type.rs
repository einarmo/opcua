// This file was autogenerated from schemas/1.0.4/Opc.Ua.Types.bsd by opcua-codegen
//
// DO NOT EDIT THIS FILE

// OPCUA for Rust
// SPDX-License-Identifier: MPL-2.0
// Copyright (C) 2017-2024 Adam Lock, Einar Omang
#[allow(unused)]
mod opcua {
    pub use crate as types;
}
#[derive(Debug, Clone, PartialEq, opcua::types::BinaryEncodable, opcua::types::BinaryDecodable)]
#[cfg_attr(
    feature = "json",
    derive(opcua::types::JsonEncodable, opcua::types::JsonDecodable)
)]
#[cfg_attr(feature = "xml", derive(opcua::types::FromXml))]
#[derive(Default)]
pub struct SubscriptionDiagnosticsDataType {
    pub session_id: opcua::types::node_id::NodeId,
    pub subscription_id: u32,
    pub priority: u8,
    pub publishing_interval: f64,
    pub max_keep_alive_count: u32,
    pub max_lifetime_count: u32,
    pub max_notifications_per_publish: u32,
    pub publishing_enabled: bool,
    pub modify_count: u32,
    pub enable_count: u32,
    pub disable_count: u32,
    pub republish_request_count: u32,
    pub republish_message_request_count: u32,
    pub republish_message_count: u32,
    pub transfer_request_count: u32,
    pub transferred_to_alt_client_count: u32,
    pub transferred_to_same_client_count: u32,
    pub publish_request_count: u32,
    pub data_change_notifications_count: u32,
    pub event_notifications_count: u32,
    pub notifications_count: u32,
    pub late_publish_request_count: u32,
    pub current_keep_alive_count: u32,
    pub current_lifetime_count: u32,
    pub unacknowledged_message_count: u32,
    pub discarded_message_count: u32,
    pub monitored_item_count: u32,
    pub disabled_monitored_item_count: u32,
    pub monitoring_queue_overflow_count: u32,
    pub next_sequence_number: u32,
    pub event_queue_over_flow_count: u32,
}
impl opcua::types::MessageInfo for SubscriptionDiagnosticsDataType {
    fn type_id(&self) -> opcua::types::ObjectId {
        opcua::types::ObjectId::SubscriptionDiagnosticsDataType_Encoding_DefaultBinary
    }
    fn json_type_id(&self) -> opcua::types::ObjectId {
        opcua::types::ObjectId::SubscriptionDiagnosticsDataType_Encoding_DefaultJson
    }
    fn xml_type_id(&self) -> opcua::types::ObjectId {
        opcua::types::ObjectId::SubscriptionDiagnosticsDataType_Encoding_DefaultXml
    }
}
